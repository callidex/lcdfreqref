
MultiSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000008cc  00000960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  00800212  00800212  00000972  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000950b  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f98  00000000  00000000  0000a187  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000180f  00000000  00000000  0000c11f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  0000d930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002122  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002740  00000000  00000000  0001021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0001295a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	73 c0       	rjmp	.+230    	; 0xe8 <__ctors_end>
   2:	00 00       	nop
   4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
   6:	00 00       	nop
   8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
   a:	00 00       	nop
   c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
   e:	00 00       	nop
  10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
  12:	00 00       	nop
  14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
  16:	00 00       	nop
  18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
  1e:	00 00       	nop
  20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
  22:	00 00       	nop
  24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
  26:	00 00       	nop
  28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
  2e:	00 00       	nop
  30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
  32:	00 00       	nop
  34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
  36:	00 00       	nop
  38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
  3e:	00 00       	nop
  40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
  42:	00 00       	nop
  44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
  46:	00 00       	nop
  48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
  4e:	00 00       	nop
  50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
  52:	00 00       	nop
  54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
  56:	00 00       	nop
  58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5f c3       	rjmp	.+1726   	; 0x71c <__vector_23>
  5e:	00 00       	nop
  60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
  62:	00 00       	nop
  64:	fc c1       	rjmp	.+1016   	; 0x45e <__vector_25>
  66:	00 00       	nop
  68:	30 c2       	rjmp	.+1120   	; 0x4ca <__vector_26>
  6a:	00 00       	nop
  6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
  6e:	00 00       	nop
  70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
  72:	00 00       	nop
  74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
  76:	00 00       	nop
  78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
  7e:	00 00       	nop
  80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
  82:	00 00       	nop
  84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
  86:	00 00       	nop
  88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5b c0       	rjmp	.+182    	; 0x144 <__bad_interrupt>
  8e:	00 00       	nop
  90:	59 c0       	rjmp	.+178    	; 0x144 <__bad_interrupt>
  92:	00 00       	nop
  94:	57 c0       	rjmp	.+174    	; 0x144 <__bad_interrupt>
  96:	00 00       	nop
  98:	55 c0       	rjmp	.+170    	; 0x144 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	53 c0       	rjmp	.+166    	; 0x144 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	51 c0       	rjmp	.+162    	; 0x144 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4f c0       	rjmp	.+158    	; 0x144 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4d c0       	rjmp	.+154    	; 0x144 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4b c0       	rjmp	.+150    	; 0x144 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	49 c0       	rjmp	.+146    	; 0x144 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	47 c0       	rjmp	.+142    	; 0x144 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	45 c0       	rjmp	.+138    	; 0x144 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	43 c0       	rjmp	.+134    	; 0x144 <__bad_interrupt>
  be:	00 00       	nop
  c0:	41 c0       	rjmp	.+130    	; 0x144 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3f c0       	rjmp	.+126    	; 0x144 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3d c0       	rjmp	.+122    	; 0x144 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	5d c2       	rjmp	.+1210   	; 0x588 <__vector_51>
  ce:	00 00       	nop
  d0:	91 c2       	rjmp	.+1314   	; 0x5f4 <__vector_52>
  d2:	00 00       	nop
  d4:	37 c0       	rjmp	.+110    	; 0x144 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	35 c0       	rjmp	.+106    	; 0x144 <__bad_interrupt>
  da:	00 00       	nop
  dc:	33 c0       	rjmp	.+102    	; 0x144 <__bad_interrupt>
  de:	00 00       	nop
  e0:	31 c0       	rjmp	.+98     	; 0x144 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	97 02       	muls	r25, r23
  e6:	2c 03       	fmul	r18, r20

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	d1 e2       	ldi	r29, 0x21	; 33
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
  f8:	12 e0       	ldi	r17, 0x02	; 2
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b2 e0       	ldi	r27, 0x02	; 2
  fe:	ec ec       	ldi	r30, 0xCC	; 204
 100:	f8 e0       	ldi	r31, 0x08	; 8
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0b bf       	out	0x3b, r16	; 59
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
 108:	07 90       	elpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	a2 31       	cpi	r26, 0x12	; 18
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
 112:	23 e0       	ldi	r18, 0x03	; 3
 114:	a2 e1       	ldi	r26, 0x12	; 18
 116:	b2 e0       	ldi	r27, 0x02	; 2
 118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
 11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
 11c:	a5 35       	cpi	r26, 0x55	; 85
 11e:	b2 07       	cpc	r27, r18
 120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	c4 e7       	ldi	r28, 0x74	; 116
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <__do_global_ctors+0x14>
 12c:	21 97       	sbiw	r28, 0x01	; 1
 12e:	01 09       	sbc	r16, r1
 130:	80 2f       	mov	r24, r16
 132:	fe 01       	movw	r30, r28
 134:	c1 d3       	rcall	.+1922   	; 0x8b8 <__tablejump2__>
 136:	c2 37       	cpi	r28, 0x72	; 114
 138:	d1 07       	cpc	r29, r17
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 07       	cpc	r16, r24
 13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xa>
 140:	b9 d2       	rcall	.+1394   	; 0x6b4 <main>
 142:	c2 c3       	rjmp	.+1924   	; 0x8c8 <_exit>

00000144 <__bad_interrupt>:
 144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 146:	26 e0       	ldi	r18, 0x06	; 6
 148:	40 e8       	ldi	r20, 0x80	; 128
 14a:	55 e2       	ldi	r21, 0x25	; 37
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	82 e1       	ldi	r24, 0x12	; 18
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	21 d1       	rcall	.+578    	; 0x398 <_ZN14HardwareSerial5beginEmh>
 156:	26 e0       	ldi	r18, 0x06	; 6
 158:	40 e8       	ldi	r20, 0x80	; 128
 15a:	55 e2       	ldi	r21, 0x25	; 37
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	8f ea       	ldi	r24, 0xAF	; 175
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	19 c1       	rjmp	.+562    	; 0x398 <_ZN14HardwareSerial5beginEmh>

00000166 <loop>:

void loop() {
    unsigned char inByte;
    
  // read from port 2, send to port 0:
  if (Serial.available()) {
 166:	82 e1       	ldi	r24, 0x12	; 18
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	16 d0       	rcall	.+44     	; 0x198 <_ZN14HardwareSerial9availableEv>
 16c:	89 2b       	or	r24, r25
 16e:	39 f0       	breq	.+14     	; 0x17e <loop+0x18>
    inByte = Serial.read();
 170:	82 e1       	ldi	r24, 0x12	; 18
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	2b d0       	rcall	.+86     	; 0x1cc <_ZN14HardwareSerial4readEv>
    Serial2.write(inByte);
 176:	68 2f       	mov	r22, r24
 178:	8f ea       	ldi	r24, 0xAF	; 175
 17a:	92 e0       	ldi	r25, 0x02	; 2
  }

  // read from port 0, send to port 2:
  if (Serial2.available()) {
 17c:	a6 d0       	rcall	.+332    	; 0x2ca <_ZN14HardwareSerial5writeEh>
 17e:	8f ea       	ldi	r24, 0xAF	; 175
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	0a d0       	rcall	.+20     	; 0x198 <_ZN14HardwareSerial9availableEv>
 184:	89 2b       	or	r24, r25
    inByte = Serial2.read();
 186:	39 f0       	breq	.+14     	; 0x196 <loop+0x30>
 188:	8f ea       	ldi	r24, 0xAF	; 175
 18a:	92 e0       	ldi	r25, 0x02	; 2
    Serial.write(inByte);
 18c:	1f d0       	rcall	.+62     	; 0x1cc <_ZN14HardwareSerial4readEv>
 18e:	68 2f       	mov	r22, r24
 190:	82 e1       	ldi	r24, 0x12	; 18
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	9a c0       	rjmp	.+308    	; 0x2ca <_ZN14HardwareSerial5writeEh>
 196:	08 95       	ret

00000198 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 198:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 19a:	91 8d       	ldd	r25, Z+25	; 0x19
 19c:	22 8d       	ldd	r18, Z+26	; 0x1a
 19e:	89 2f       	mov	r24, r25
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	80 5c       	subi	r24, 0xC0	; 192
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	82 1b       	sub	r24, r18
 1a8:	91 09       	sbc	r25, r1
}
 1aa:	8f 73       	andi	r24, 0x3F	; 63
 1ac:	99 27       	eor	r25, r25
 1ae:	08 95       	ret

000001b0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 1b0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 1b2:	91 8d       	ldd	r25, Z+25	; 0x19
 1b4:	82 8d       	ldd	r24, Z+26	; 0x1a
 1b6:	98 17       	cp	r25, r24
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 1ba:	82 8d       	ldd	r24, Z+26	; 0x1a
 1bc:	e8 0f       	add	r30, r24
 1be:	f1 1d       	adc	r31, r1
 1c0:	85 8d       	ldd	r24, Z+29	; 0x1d
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 1ca:	08 95       	ret

000001cc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 1cc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 1ce:	91 8d       	ldd	r25, Z+25	; 0x19
 1d0:	82 8d       	ldd	r24, Z+26	; 0x1a
 1d2:	98 17       	cp	r25, r24
 1d4:	61 f0       	breq	.+24     	; 0x1ee <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 1d6:	82 8d       	ldd	r24, Z+26	; 0x1a
 1d8:	df 01       	movw	r26, r30
 1da:	a8 0f       	add	r26, r24
 1dc:	b1 1d       	adc	r27, r1
 1de:	5d 96       	adiw	r26, 0x1d	; 29
 1e0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 1e2:	92 8d       	ldd	r25, Z+26	; 0x1a
 1e4:	9f 5f       	subi	r25, 0xFF	; 255
 1e6:	9f 73       	andi	r25, 0x3F	; 63
 1e8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 1f2:	08 95       	ret

000001f4 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 1f4:	fc 01       	movw	r30, r24
 1f6:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 1f8:	44 8d       	ldd	r20, Z+28	; 0x1c
 1fa:	25 2f       	mov	r18, r21
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	84 2f       	mov	r24, r20
 200:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 202:	82 1b       	sub	r24, r18
 204:	93 0b       	sbc	r25, r19
 206:	54 17       	cp	r21, r20
 208:	10 f0       	brcs	.+4      	; 0x20e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 20a:	cf 96       	adiw	r24, 0x3f	; 63
 20c:	08 95       	ret
  return tail - head - 1;
 20e:	01 97       	sbiw	r24, 0x01	; 1
}
 210:	08 95       	ret

00000212 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 212:	8e e8       	ldi	r24, 0x8E	; 142
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	89 2b       	or	r24, r25
 218:	39 f0       	breq	.+14     	; 0x228 <_Z14serialEventRunv+0x16>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	89 2b       	or	r24, r25
 220:	19 f0       	breq	.+6      	; 0x228 <_Z14serialEventRunv+0x16>
 222:	7c d1       	rcall	.+760    	; 0x51c <_Z17Serial0_availablev>
 224:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 226:	24 c0       	rjmp	.+72     	; 0x270 <_Z14serialEventRunv+0x5e>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	89 2b       	or	r24, r25
 22e:	41 f0       	breq	.+16     	; 0x240 <_Z14serialEventRunv+0x2e>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	89 2b       	or	r24, r25
 236:	21 f0       	breq	.+8      	; 0x240 <_Z14serialEventRunv+0x2e>
 238:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 23c:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 23e:	1b c0       	rjmp	.+54     	; 0x276 <_Z14serialEventRunv+0x64>
 240:	83 e2       	ldi	r24, 0x23	; 35
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	89 2b       	or	r24, r25
 246:	39 f0       	breq	.+14     	; 0x256 <_Z14serialEventRunv+0x44>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	89 2b       	or	r24, r25
 24e:	19 f0       	breq	.+6      	; 0x256 <_Z14serialEventRunv+0x44>
 250:	fa d1       	rcall	.+1012   	; 0x646 <_Z17Serial2_availablev>
 252:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 254:	13 c0       	rjmp	.+38     	; 0x27c <_Z14serialEventRunv+0x6a>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	89 2b       	or	r24, r25
 25c:	a1 f0       	breq	.+40     	; 0x286 <_Z14serialEventRunv+0x74>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	89 2b       	or	r24, r25
 264:	81 f0       	breq	.+32     	; 0x286 <_Z14serialEventRunv+0x74>
 266:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 26a:	81 11       	cpse	r24, r1
 26c:	0a c0       	rjmp	.+20     	; 0x282 <_Z14serialEventRunv+0x70>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 26e:	08 95       	ret
 270:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 274:	d9 cf       	rjmp	.-78     	; 0x228 <_Z14serialEventRunv+0x16>
 276:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
 27a:	e2 cf       	rjmp	.-60     	; 0x240 <_Z14serialEventRunv+0x2e>
 27c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
 280:	ea cf       	rjmp	.-44     	; 0x256 <_Z14serialEventRunv+0x44>
 282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 286:	08 95       	ret

00000288 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 288:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 28a:	84 8d       	ldd	r24, Z+28	; 0x1c
 28c:	df 01       	movw	r26, r30
 28e:	a8 0f       	add	r26, r24
 290:	b1 1d       	adc	r27, r1
 292:	a3 5a       	subi	r26, 0xA3	; 163
 294:	bf 4f       	sbci	r27, 0xFF	; 255
 296:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 298:	84 8d       	ldd	r24, Z+28	; 0x1c
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	8f 73       	andi	r24, 0x3F	; 63
 2a0:	99 27       	eor	r25, r25
 2a2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 2a4:	a6 89       	ldd	r26, Z+22	; 0x16
 2a6:	b7 89       	ldd	r27, Z+23	; 0x17
 2a8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 2aa:	a0 89       	ldd	r26, Z+16	; 0x10
 2ac:	b1 89       	ldd	r27, Z+17	; 0x11
 2ae:	8c 91       	ld	r24, X
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 2b4:	93 8d       	ldd	r25, Z+27	; 0x1b
 2b6:	84 8d       	ldd	r24, Z+28	; 0x1c
 2b8:	98 13       	cpse	r25, r24
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 2bc:	02 88       	ldd	r0, Z+18	; 0x12
 2be:	f3 89       	ldd	r31, Z+19	; 0x13
 2c0:	e0 2d       	mov	r30, r0
 2c2:	80 81       	ld	r24, Z
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	80 83       	st	Z, r24
 2c8:	08 95       	ret

000002ca <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	ec 01       	movw	r28, r24
  _written = true;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 2dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2de:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2e0:	98 13       	cpse	r25, r24
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <_ZN14HardwareSerial5writeEh+0x24>
 2e4:	e8 89       	ldd	r30, Y+16	; 0x10
 2e6:	f9 89       	ldd	r31, Y+17	; 0x11
 2e8:	80 81       	ld	r24, Z
 2ea:	85 fd       	sbrc	r24, 5
 2ec:	23 c0       	rjmp	.+70     	; 0x334 <_ZN14HardwareSerial5writeEh+0x6a>
 2ee:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 2f0:	0b 8d       	ldd	r16, Y+27	; 0x1b
 2f2:	10 e0       	ldi	r17, 0x00	; 0
 2f4:	0f 5f       	subi	r16, 0xFF	; 255
 2f6:	1f 4f       	sbci	r17, 0xFF	; 255
 2f8:	0f 73       	andi	r16, 0x3F	; 63
 2fa:	11 27       	eor	r17, r17
 2fc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 2fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
 300:	e8 12       	cpse	r14, r24
 302:	0b c0       	rjmp	.+22     	; 0x31a <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	07 fc       	sbrc	r0, 7
 308:	fa cf       	rjmp	.-12     	; 0x2fe <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 30a:	e8 89       	ldd	r30, Y+16	; 0x10
 30c:	f9 89       	ldd	r31, Y+17	; 0x11
 30e:	80 81       	ld	r24, Z
 310:	85 ff       	sbrs	r24, 5
 312:	f5 cf       	rjmp	.-22     	; 0x2fe <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 314:	ce 01       	movw	r24, r28
 316:	b8 df       	rcall	.-144    	; 0x288 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 318:	f2 cf       	rjmp	.-28     	; 0x2fe <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 31a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 31c:	fe 01       	movw	r30, r28
 31e:	e8 0f       	add	r30, r24
 320:	f1 1d       	adc	r31, r1
 322:	e3 5a       	subi	r30, 0xA3	; 163
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 328:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 32a:	ea 89       	ldd	r30, Y+18	; 0x12
 32c:	fb 89       	ldd	r31, Y+19	; 0x13
 32e:	80 81       	ld	r24, Z
 330:	80 62       	ori	r24, 0x20	; 32
 332:	07 c0       	rjmp	.+14     	; 0x342 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 334:	ee 89       	ldd	r30, Y+22	; 0x16
 336:	ff 89       	ldd	r31, Y+23	; 0x17
 338:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 33a:	e8 89       	ldd	r30, Y+16	; 0x10
 33c:	f9 89       	ldd	r31, Y+17	; 0x11
 33e:	80 81       	ld	r24, Z
 340:	80 64       	ori	r24, 0x40	; 64
 342:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 35c:	88 8d       	ldd	r24, Y+24	; 0x18
 35e:	88 23       	and	r24, r24
 360:	c1 f0       	breq	.+48     	; 0x392 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 362:	ea 89       	ldd	r30, Y+18	; 0x12
 364:	fb 89       	ldd	r31, Y+19	; 0x13
 366:	80 81       	ld	r24, Z
 368:	85 fd       	sbrc	r24, 5
 36a:	05 c0       	rjmp	.+10     	; 0x376 <_ZN14HardwareSerial5flushEv+0x20>
 36c:	a8 89       	ldd	r26, Y+16	; 0x10
 36e:	b9 89       	ldd	r27, Y+17	; 0x11
 370:	8c 91       	ld	r24, X
 372:	86 fd       	sbrc	r24, 6
 374:	0e c0       	rjmp	.+28     	; 0x392 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	07 fc       	sbrc	r0, 7
 37a:	f5 cf       	rjmp	.-22     	; 0x366 <_ZN14HardwareSerial5flushEv+0x10>
 37c:	80 81       	ld	r24, Z
 37e:	85 ff       	sbrs	r24, 5
 380:	f2 cf       	rjmp	.-28     	; 0x366 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 382:	a8 89       	ldd	r26, Y+16	; 0x10
 384:	b9 89       	ldd	r27, Y+17	; 0x11
 386:	8c 91       	ld	r24, X
 388:	85 ff       	sbrs	r24, 5
 38a:	ed cf       	rjmp	.-38     	; 0x366 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 38c:	ce 01       	movw	r24, r28
 38e:	7c df       	rcall	.-264    	; 0x288 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 390:	e8 cf       	rjmp	.-48     	; 0x362 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
 3a8:	6a 01       	movw	r12, r20
 3aa:	7b 01       	movw	r14, r22
 3ac:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 3ae:	e8 89       	ldd	r30, Y+16	; 0x10
 3b0:	f9 89       	ldd	r31, Y+17	; 0x11
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 3b6:	41 15       	cp	r20, r1
 3b8:	51 4e       	sbci	r21, 0xE1	; 225
 3ba:	61 05       	cpc	r22, r1
 3bc:	71 05       	cpc	r23, r1
 3be:	a9 f0       	breq	.+42     	; 0x3ea <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	79 e0       	ldi	r23, 0x09	; 9
 3c4:	8d e3       	ldi	r24, 0x3D	; 61
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	a7 01       	movw	r20, r14
 3ca:	96 01       	movw	r18, r12
 3cc:	53 d2       	rcall	.+1190   	; 0x874 <__udivmodsi4>
 3ce:	da 01       	movw	r26, r20
 3d0:	c9 01       	movw	r24, r18
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	a1 09       	sbc	r26, r1
 3d6:	b1 09       	sbc	r27, r1
 3d8:	b6 95       	lsr	r27
 3da:	a7 95       	ror	r26
 3dc:	97 95       	ror	r25
 3de:	87 95       	ror	r24
 3e0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 3e2:	21 15       	cp	r18, r1
 3e4:	80 e1       	ldi	r24, 0x10	; 16
 3e6:	38 07       	cpc	r19, r24
 3e8:	a0 f0       	brcs	.+40     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
  {
    *_ucsra = 0;
 3ea:	e8 89       	ldd	r30, Y+16	; 0x10
 3ec:	f9 89       	ldd	r31, Y+17	; 0x11
 3ee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 3f0:	60 e8       	ldi	r22, 0x80	; 128
 3f2:	74 e8       	ldi	r23, 0x84	; 132
 3f4:	8e e1       	ldi	r24, 0x1E	; 30
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	a7 01       	movw	r20, r14
 3fa:	96 01       	movw	r18, r12
 3fc:	3b d2       	rcall	.+1142   	; 0x874 <__udivmodsi4>
 3fe:	da 01       	movw	r26, r20
 400:	c9 01       	movw	r24, r18
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	a1 09       	sbc	r26, r1
 406:	b1 09       	sbc	r27, r1
 408:	b6 95       	lsr	r27
 40a:	a7 95       	ror	r26
 40c:	97 95       	ror	r25
 40e:	87 95       	ror	r24
 410:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 412:	ec 85       	ldd	r30, Y+12	; 0x0c
 414:	fd 85       	ldd	r31, Y+13	; 0x0d
 416:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 418:	ee 85       	ldd	r30, Y+14	; 0x0e
 41a:	ff 85       	ldd	r31, Y+15	; 0x0f
 41c:	20 83       	st	Z, r18

  _written = false;
 41e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 420:	ec 89       	ldd	r30, Y+20	; 0x14
 422:	fd 89       	ldd	r31, Y+21	; 0x15
 424:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 426:	ea 89       	ldd	r30, Y+18	; 0x12
 428:	fb 89       	ldd	r31, Y+19	; 0x13
 42a:	80 81       	ld	r24, Z
 42c:	80 61       	ori	r24, 0x10	; 16
 42e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 430:	ea 89       	ldd	r30, Y+18	; 0x12
 432:	fb 89       	ldd	r31, Y+19	; 0x13
 434:	80 81       	ld	r24, Z
 436:	88 60       	ori	r24, 0x08	; 8
 438:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 43a:	ea 89       	ldd	r30, Y+18	; 0x12
 43c:	fb 89       	ldd	r31, Y+19	; 0x13
 43e:	80 81       	ld	r24, Z
 440:	80 68       	ori	r24, 0x80	; 128
 442:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 444:	ea 89       	ldd	r30, Y+18	; 0x12
 446:	fb 89       	ldd	r31, Y+19	; 0x13
 448:	80 81       	ld	r24, Z
 44a:	8f 7d       	andi	r24, 0xDF	; 223
 44c:	80 83       	st	Z, r24
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	08 95       	ret

0000045e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	0b b6       	in	r0, 0x3b	; 59
 46a:	0f 92       	push	r0
 46c:	2f 93       	push	r18
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 476:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__data_end+0x10>
 47a:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <__data_end+0x11>
 47e:	80 81       	ld	r24, Z
 480:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <__data_end+0x16>
 484:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <__data_end+0x17>
 488:	82 fd       	sbrc	r24, 2
 48a:	12 c0       	rjmp	.+36     	; 0x4b0 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 48c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 48e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__data_end+0x19>
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 496:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <__data_end+0x1a>
 49a:	82 17       	cp	r24, r18
 49c:	51 f0       	breq	.+20     	; 0x4b2 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 49e:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <__data_end+0x19>
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	ee 5e       	subi	r30, 0xEE	; 238
 4a6:	fd 4f       	sbci	r31, 0xFD	; 253
 4a8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 4aa:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__data_end+0x19>
 4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 4b0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0b be       	out	0x3b, r0	; 59
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	0b b6       	in	r0, 0x3b	; 59
 4d6:	0f 92       	push	r0
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 4f0:	82 e1       	ldi	r24, 0x12	; 18
 4f2:	92 e0       	ldi	r25, 0x02	; 2
 4f4:	c9 de       	rcall	.-622    	; 0x288 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0b be       	out	0x3b, r0	; 59
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 51c:	82 e1       	ldi	r24, 0x12	; 18
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	3b de       	rcall	.-906    	; 0x198 <_ZN14HardwareSerial9availableEv>
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	89 2b       	or	r24, r25
 526:	09 f4       	brne	.+2      	; 0x52a <_Z17Serial0_availablev+0xe>
 528:	20 e0       	ldi	r18, 0x00	; 0
}
 52a:	82 2f       	mov	r24, r18
 52c:	08 95       	ret

0000052e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 52e:	e2 e1       	ldi	r30, 0x12	; 18
 530:	f2 e0       	ldi	r31, 0x02	; 2
 532:	13 82       	std	Z+3, r1	; 0x03
 534:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 536:	88 ee       	ldi	r24, 0xE8	; 232
 538:	93 e0       	ldi	r25, 0x03	; 3
 53a:	a0 e0       	ldi	r26, 0x00	; 0
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	84 83       	std	Z+4, r24	; 0x04
 540:	95 83       	std	Z+5, r25	; 0x05
 542:	a6 83       	std	Z+6, r26	; 0x06
 544:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 546:	84 e0       	ldi	r24, 0x04	; 4
 548:	92 e0       	ldi	r25, 0x02	; 2
 54a:	91 83       	std	Z+1, r25	; 0x01
 54c:	80 83       	st	Z, r24
 54e:	85 ec       	ldi	r24, 0xC5	; 197
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	95 87       	std	Z+13, r25	; 0x0d
 554:	84 87       	std	Z+12, r24	; 0x0c
 556:	84 ec       	ldi	r24, 0xC4	; 196
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	97 87       	std	Z+15, r25	; 0x0f
 55c:	86 87       	std	Z+14, r24	; 0x0e
 55e:	80 ec       	ldi	r24, 0xC0	; 192
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	91 8b       	std	Z+17, r25	; 0x11
 564:	80 8b       	std	Z+16, r24	; 0x10
 566:	81 ec       	ldi	r24, 0xC1	; 193
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	93 8b       	std	Z+19, r25	; 0x13
 56c:	82 8b       	std	Z+18, r24	; 0x12
 56e:	82 ec       	ldi	r24, 0xC2	; 194
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	95 8b       	std	Z+21, r25	; 0x15
 574:	84 8b       	std	Z+20, r24	; 0x14
 576:	86 ec       	ldi	r24, 0xC6	; 198
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	97 8b       	std	Z+23, r25	; 0x17
 57c:	86 8b       	std	Z+22, r24	; 0x16
 57e:	11 8e       	std	Z+25, r1	; 0x19
 580:	12 8e       	std	Z+26, r1	; 0x1a
 582:	13 8e       	std	Z+27, r1	; 0x1b
 584:	14 8e       	std	Z+28, r1	; 0x1c
 586:	08 95       	ret

00000588 <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	0b b6       	in	r0, 0x3b	; 59
 594:	0f 92       	push	r0
 596:	2f 93       	push	r18
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5a0:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <Serial2+0x10>
 5a4:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <Serial2+0x11>
 5a8:	80 81       	ld	r24, Z
 5aa:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <Serial2+0x16>
 5ae:	f0 91 c6 02 	lds	r31, 0x02C6	; 0x8002c6 <Serial2+0x17>
 5b2:	82 fd       	sbrc	r24, 2
 5b4:	12 c0       	rjmp	.+36     	; 0x5da <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5b6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5b8:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <Serial2+0x19>
 5bc:	8f 5f       	subi	r24, 0xFF	; 255
 5be:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5c0:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <Serial2+0x1a>
 5c4:	82 17       	cp	r24, r18
 5c6:	51 f0       	breq	.+20     	; 0x5dc <__vector_51+0x54>
      _rx_buffer[_rx_buffer_head] = c;
 5c8:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <Serial2+0x19>
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	e1 55       	subi	r30, 0x51	; 81
 5d0:	fd 4f       	sbci	r31, 0xFD	; 253
 5d2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5d4:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <Serial2+0x19>
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <__vector_51+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5da:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	9f 91       	pop	r25
 5e2:	8f 91       	pop	r24
 5e4:	2f 91       	pop	r18
 5e6:	0f 90       	pop	r0
 5e8:	0b be       	out	0x3b, r0	; 59
 5ea:	0f 90       	pop	r0
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <__vector_52>:

ISR(USART2_UDRE_vect)
{
 5f4:	1f 92       	push	r1
 5f6:	0f 92       	push	r0
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	0f 92       	push	r0
 5fc:	11 24       	eor	r1, r1
 5fe:	0b b6       	in	r0, 0x3b	; 59
 600:	0f 92       	push	r0
 602:	2f 93       	push	r18
 604:	3f 93       	push	r19
 606:	4f 93       	push	r20
 608:	5f 93       	push	r21
 60a:	6f 93       	push	r22
 60c:	7f 93       	push	r23
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
 612:	af 93       	push	r26
 614:	bf 93       	push	r27
 616:	ef 93       	push	r30
 618:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
 61a:	8f ea       	ldi	r24, 0xAF	; 175
 61c:	92 e0       	ldi	r25, 0x02	; 2
 61e:	34 de       	rcall	.-920    	; 0x288 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	0f 90       	pop	r0
 63a:	0b be       	out	0x3b, r0	; 59
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
 646:	8f ea       	ldi	r24, 0xAF	; 175
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	a6 dd       	rcall	.-1204   	; 0x198 <_ZN14HardwareSerial9availableEv>
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	89 2b       	or	r24, r25
 650:	09 f4       	brne	.+2      	; 0x654 <_Z17Serial2_availablev+0xe>
 652:	20 e0       	ldi	r18, 0x00	; 0
}
 654:	82 2f       	mov	r24, r18
 656:	08 95       	ret

00000658 <_GLOBAL__sub_I___vector_51>:
 658:	ef ea       	ldi	r30, 0xAF	; 175
 65a:	f2 e0       	ldi	r31, 0x02	; 2
 65c:	13 82       	std	Z+3, r1	; 0x03
 65e:	12 82       	std	Z+2, r1	; 0x02
 660:	88 ee       	ldi	r24, 0xE8	; 232
 662:	93 e0       	ldi	r25, 0x03	; 3
 664:	a0 e0       	ldi	r26, 0x00	; 0
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	84 83       	std	Z+4, r24	; 0x04
 66a:	95 83       	std	Z+5, r25	; 0x05
 66c:	a6 83       	std	Z+6, r26	; 0x06
 66e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	91 83       	std	Z+1, r25	; 0x01
 676:	80 83       	st	Z, r24
 678:	85 ed       	ldi	r24, 0xD5	; 213
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	95 87       	std	Z+13, r25	; 0x0d
 67e:	84 87       	std	Z+12, r24	; 0x0c
 680:	84 ed       	ldi	r24, 0xD4	; 212
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	97 87       	std	Z+15, r25	; 0x0f
 686:	86 87       	std	Z+14, r24	; 0x0e
 688:	80 ed       	ldi	r24, 0xD0	; 208
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	91 8b       	std	Z+17, r25	; 0x11
 68e:	80 8b       	std	Z+16, r24	; 0x10
 690:	81 ed       	ldi	r24, 0xD1	; 209
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	93 8b       	std	Z+19, r25	; 0x13
 696:	82 8b       	std	Z+18, r24	; 0x12
 698:	82 ed       	ldi	r24, 0xD2	; 210
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	95 8b       	std	Z+21, r25	; 0x15
 69e:	84 8b       	std	Z+20, r24	; 0x14
 6a0:	86 ed       	ldi	r24, 0xD6	; 214
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	97 8b       	std	Z+23, r25	; 0x17
 6a6:	86 8b       	std	Z+22, r24	; 0x16
 6a8:	11 8e       	std	Z+25, r1	; 0x19
 6aa:	12 8e       	std	Z+26, r1	; 0x1a
 6ac:	13 8e       	std	Z+27, r1	; 0x1b
 6ae:	14 8e       	std	Z+28, r1	; 0x1c
 6b0:	08 95       	ret

000006b2 <initVariant>:
 6b2:	08 95       	ret

000006b4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6b4:	7d d0       	rcall	.+250    	; 0x7b0 <init>
 6b6:	fd df       	rcall	.-6      	; 0x6b2 <initVariant>
 6b8:	46 dd       	rcall	.-1396   	; 0x146 <setup>
 6ba:	c9 e0       	ldi	r28, 0x09	; 9
 6bc:	d1 e0       	ldi	r29, 0x01	; 1
 6be:	53 dd       	rcall	.-1370   	; 0x166 <loop>
 6c0:	20 97       	sbiw	r28, 0x00	; 0
 6c2:	e9 f3       	breq	.-6      	; 0x6be <main+0xa>
 6c4:	a6 dd       	rcall	.-1204   	; 0x212 <_Z14serialEventRunv>
 6c6:	fb cf       	rjmp	.-10     	; 0x6be <main+0xa>

000006c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 6c8:	cf 92       	push	r12
 6ca:	df 92       	push	r13
 6cc:	ef 92       	push	r14
 6ce:	ff 92       	push	r15
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	6c 01       	movw	r12, r24
 6da:	7a 01       	movw	r14, r20
 6dc:	8b 01       	movw	r16, r22
  size_t n = 0;
 6de:	c0 e0       	ldi	r28, 0x00	; 0
 6e0:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 6e2:	ce 15       	cp	r28, r14
 6e4:	df 05       	cpc	r29, r15
 6e6:	81 f0       	breq	.+32     	; 0x708 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 6e8:	d8 01       	movw	r26, r16
 6ea:	6d 91       	ld	r22, X+
 6ec:	8d 01       	movw	r16, r26
 6ee:	d6 01       	movw	r26, r12
 6f0:	ed 91       	ld	r30, X+
 6f2:	fc 91       	ld	r31, X
 6f4:	01 90       	ld	r0, Z+
 6f6:	f0 81       	ld	r31, Z
 6f8:	e0 2d       	mov	r30, r0
 6fa:	c6 01       	movw	r24, r12
 6fc:	19 95       	eicall
 6fe:	89 2b       	or	r24, r25
 700:	11 f0       	breq	.+4      	; 0x706 <_ZN5Print5writeEPKhj+0x3e>
 702:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 704:	ee cf       	rjmp	.-36     	; 0x6e2 <_ZN5Print5writeEPKhj+0x1a>
 706:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 708:	c7 01       	movw	r24, r14
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	ff 90       	pop	r15
 714:	ef 90       	pop	r14
 716:	df 90       	pop	r13
 718:	cf 90       	pop	r12
 71a:	08 95       	ret

0000071c <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	2f 93       	push	r18
 728:	3f 93       	push	r19
 72a:	8f 93       	push	r24
 72c:	9f 93       	push	r25
 72e:	af 93       	push	r26
 730:	bf 93       	push	r27
 732:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <timer0_millis>
 736:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <timer0_millis+0x1>
 73a:	a0 91 4f 03 	lds	r26, 0x034F	; 0x80034f <timer0_millis+0x2>
 73e:	b0 91 50 03 	lds	r27, 0x0350	; 0x800350 <timer0_millis+0x3>
 742:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <timer0_fract>
 746:	23 e0       	ldi	r18, 0x03	; 3
 748:	23 0f       	add	r18, r19
 74a:	2d 37       	cpi	r18, 0x7D	; 125
 74c:	20 f4       	brcc	.+8      	; 0x756 <__vector_23+0x3a>
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	a1 1d       	adc	r26, r1
 752:	b1 1d       	adc	r27, r1
 754:	05 c0       	rjmp	.+10     	; 0x760 <__vector_23+0x44>
 756:	26 e8       	ldi	r18, 0x86	; 134
 758:	23 0f       	add	r18, r19
 75a:	02 96       	adiw	r24, 0x02	; 2
 75c:	a1 1d       	adc	r26, r1
 75e:	b1 1d       	adc	r27, r1
 760:	20 93 4c 03 	sts	0x034C, r18	; 0x80034c <timer0_fract>
 764:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <timer0_millis>
 768:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <timer0_millis+0x1>
 76c:	a0 93 4f 03 	sts	0x034F, r26	; 0x80034f <timer0_millis+0x2>
 770:	b0 93 50 03 	sts	0x0350, r27	; 0x800350 <timer0_millis+0x3>
 774:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <timer0_overflow_count>
 778:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <timer0_overflow_count+0x1>
 77c:	a0 91 53 03 	lds	r26, 0x0353	; 0x800353 <timer0_overflow_count+0x2>
 780:	b0 91 54 03 	lds	r27, 0x0354	; 0x800354 <timer0_overflow_count+0x3>
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	a1 1d       	adc	r26, r1
 788:	b1 1d       	adc	r27, r1
 78a:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <timer0_overflow_count>
 78e:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <timer0_overflow_count+0x1>
 792:	a0 93 53 03 	sts	0x0353, r26	; 0x800353 <timer0_overflow_count+0x2>
 796:	b0 93 54 03 	sts	0x0354, r27	; 0x800354 <timer0_overflow_count+0x3>
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	3f 91       	pop	r19
 7a4:	2f 91       	pop	r18
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7b0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7b2:	84 b5       	in	r24, 0x24	; 36
 7b4:	82 60       	ori	r24, 0x02	; 2
 7b6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7b8:	84 b5       	in	r24, 0x24	; 36
 7ba:	81 60       	ori	r24, 0x01	; 1
 7bc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 7be:	85 b5       	in	r24, 0x25	; 37
 7c0:	82 60       	ori	r24, 0x02	; 2
 7c2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 7c4:	85 b5       	in	r24, 0x25	; 37
 7c6:	81 60       	ori	r24, 0x01	; 1
 7c8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 7ca:	ee e6       	ldi	r30, 0x6E	; 110
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	81 60       	ori	r24, 0x01	; 1
 7d2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 7d4:	e1 e8       	ldi	r30, 0x81	; 129
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 7da:	80 81       	ld	r24, Z
 7dc:	82 60       	ori	r24, 0x02	; 2
 7de:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 7e0:	80 81       	ld	r24, Z
 7e2:	81 60       	ori	r24, 0x01	; 1
 7e4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 7e6:	e0 e8       	ldi	r30, 0x80	; 128
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	81 60       	ori	r24, 0x01	; 1
 7ee:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 7f0:	e1 eb       	ldi	r30, 0xB1	; 177
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	84 60       	ori	r24, 0x04	; 4
 7f8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 7fa:	e0 eb       	ldi	r30, 0xB0	; 176
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	81 60       	ori	r24, 0x01	; 1
 802:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 804:	e1 e9       	ldi	r30, 0x91	; 145
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	82 60       	ori	r24, 0x02	; 2
 80c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 80e:	80 81       	ld	r24, Z
 810:	81 60       	ori	r24, 0x01	; 1
 812:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 814:	e0 e9       	ldi	r30, 0x90	; 144
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	81 60       	ori	r24, 0x01	; 1
 81c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 81e:	e1 ea       	ldi	r30, 0xA1	; 161
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	82 60       	ori	r24, 0x02	; 2
 826:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 828:	80 81       	ld	r24, Z
 82a:	81 60       	ori	r24, 0x01	; 1
 82c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 82e:	e0 ea       	ldi	r30, 0xA0	; 160
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	81 60       	ori	r24, 0x01	; 1
 836:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 838:	e1 e2       	ldi	r30, 0x21	; 33
 83a:	f1 e0       	ldi	r31, 0x01	; 1
 83c:	80 81       	ld	r24, Z
 83e:	82 60       	ori	r24, 0x02	; 2
 840:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 842:	80 81       	ld	r24, Z
 844:	81 60       	ori	r24, 0x01	; 1
 846:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 848:	e0 e2       	ldi	r30, 0x20	; 32
 84a:	f1 e0       	ldi	r31, 0x01	; 1
 84c:	80 81       	ld	r24, Z
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 852:	ea e7       	ldi	r30, 0x7A	; 122
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	84 60       	ori	r24, 0x04	; 4
 85a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 85c:	80 81       	ld	r24, Z
 85e:	82 60       	ori	r24, 0x02	; 2
 860:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 862:	80 81       	ld	r24, Z
 864:	81 60       	ori	r24, 0x01	; 1
 866:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 868:	80 81       	ld	r24, Z
 86a:	80 68       	ori	r24, 0x80	; 128
 86c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 86e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 872:	08 95       	ret

00000874 <__udivmodsi4>:
 874:	a1 e2       	ldi	r26, 0x21	; 33
 876:	1a 2e       	mov	r1, r26
 878:	aa 1b       	sub	r26, r26
 87a:	bb 1b       	sub	r27, r27
 87c:	fd 01       	movw	r30, r26
 87e:	0d c0       	rjmp	.+26     	; 0x89a <__udivmodsi4_ep>

00000880 <__udivmodsi4_loop>:
 880:	aa 1f       	adc	r26, r26
 882:	bb 1f       	adc	r27, r27
 884:	ee 1f       	adc	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	a2 17       	cp	r26, r18
 88a:	b3 07       	cpc	r27, r19
 88c:	e4 07       	cpc	r30, r20
 88e:	f5 07       	cpc	r31, r21
 890:	20 f0       	brcs	.+8      	; 0x89a <__udivmodsi4_ep>
 892:	a2 1b       	sub	r26, r18
 894:	b3 0b       	sbc	r27, r19
 896:	e4 0b       	sbc	r30, r20
 898:	f5 0b       	sbc	r31, r21

0000089a <__udivmodsi4_ep>:
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	1a 94       	dec	r1
 8a4:	69 f7       	brne	.-38     	; 0x880 <__udivmodsi4_loop>
 8a6:	60 95       	com	r22
 8a8:	70 95       	com	r23
 8aa:	80 95       	com	r24
 8ac:	90 95       	com	r25
 8ae:	9b 01       	movw	r18, r22
 8b0:	ac 01       	movw	r20, r24
 8b2:	bd 01       	movw	r22, r26
 8b4:	cf 01       	movw	r24, r30
 8b6:	08 95       	ret

000008b8 <__tablejump2__>:
 8b8:	ee 0f       	add	r30, r30
 8ba:	ff 1f       	adc	r31, r31
 8bc:	88 1f       	adc	r24, r24
 8be:	8b bf       	out	0x3b, r24	; 59
 8c0:	07 90       	elpm	r0, Z+
 8c2:	f6 91       	elpm	r31, Z
 8c4:	e0 2d       	mov	r30, r0
 8c6:	19 94       	eijmp

000008c8 <_exit>:
 8c8:	f8 94       	cli

000008ca <__stop_program>:
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <__stop_program>
