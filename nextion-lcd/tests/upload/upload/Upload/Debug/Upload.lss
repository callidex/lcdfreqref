
Upload.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000144  00800200  00004202  00004296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ca  00800344  00800344  000043da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000043da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000440c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a48  00000000  00000000  0000444c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00027195  00000000  00000000  00004e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005263  00000000  00000000  0002c029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000689b  00000000  00000000  0003128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000284c  00000000  00000000  00037b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058d3  00000000  00000000  0003a374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001023b  00000000  00000000  0003fc47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c10  00000000  00000000  0004fe82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c1       	rjmp	.+550    	; 0x228 <__ctors_end>
       2:	00 00       	nop
       4:	41 c1       	rjmp	.+642    	; 0x288 <__bad_interrupt>
       6:	00 00       	nop
       8:	3f c1       	rjmp	.+638    	; 0x288 <__bad_interrupt>
       a:	00 00       	nop
       c:	3d c1       	rjmp	.+634    	; 0x288 <__bad_interrupt>
       e:	00 00       	nop
      10:	3b c1       	rjmp	.+630    	; 0x288 <__bad_interrupt>
      12:	00 00       	nop
      14:	39 c1       	rjmp	.+626    	; 0x288 <__bad_interrupt>
      16:	00 00       	nop
      18:	37 c1       	rjmp	.+622    	; 0x288 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	35 c1       	rjmp	.+618    	; 0x288 <__bad_interrupt>
      1e:	00 00       	nop
      20:	33 c1       	rjmp	.+614    	; 0x288 <__bad_interrupt>
      22:	00 00       	nop
      24:	31 c1       	rjmp	.+610    	; 0x288 <__bad_interrupt>
      26:	00 00       	nop
      28:	2f c1       	rjmp	.+606    	; 0x288 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2d c1       	rjmp	.+602    	; 0x288 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2b c1       	rjmp	.+598    	; 0x288 <__bad_interrupt>
      32:	00 00       	nop
      34:	29 c1       	rjmp	.+594    	; 0x288 <__bad_interrupt>
      36:	00 00       	nop
      38:	27 c1       	rjmp	.+590    	; 0x288 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	25 c1       	rjmp	.+586    	; 0x288 <__bad_interrupt>
      3e:	00 00       	nop
      40:	23 c1       	rjmp	.+582    	; 0x288 <__bad_interrupt>
      42:	00 00       	nop
      44:	21 c1       	rjmp	.+578    	; 0x288 <__bad_interrupt>
      46:	00 00       	nop
      48:	1f c1       	rjmp	.+574    	; 0x288 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1d c1       	rjmp	.+570    	; 0x288 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1b c1       	rjmp	.+566    	; 0x288 <__bad_interrupt>
      52:	00 00       	nop
      54:	19 c1       	rjmp	.+562    	; 0x288 <__bad_interrupt>
      56:	00 00       	nop
      58:	17 c1       	rjmp	.+558    	; 0x288 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__vector_23>
      5e:	00 00       	nop
      60:	13 c1       	rjmp	.+550    	; 0x288 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__vector_25>
      68:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__vector_26>
      6c:	0d c1       	rjmp	.+538    	; 0x288 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0b c1       	rjmp	.+534    	; 0x288 <__bad_interrupt>
      72:	00 00       	nop
      74:	09 c1       	rjmp	.+530    	; 0x288 <__bad_interrupt>
      76:	00 00       	nop
      78:	07 c1       	rjmp	.+526    	; 0x288 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	05 c1       	rjmp	.+522    	; 0x288 <__bad_interrupt>
      7e:	00 00       	nop
      80:	03 c1       	rjmp	.+518    	; 0x288 <__bad_interrupt>
      82:	00 00       	nop
      84:	01 c1       	rjmp	.+514    	; 0x288 <__bad_interrupt>
      86:	00 00       	nop
      88:	ff c0       	rjmp	.+510    	; 0x288 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fd c0       	rjmp	.+506    	; 0x288 <__bad_interrupt>
      8e:	00 00       	nop
      90:	fb c0       	rjmp	.+502    	; 0x288 <__bad_interrupt>
      92:	00 00       	nop
      94:	f9 c0       	rjmp	.+498    	; 0x288 <__bad_interrupt>
      96:	00 00       	nop
      98:	f7 c0       	rjmp	.+494    	; 0x288 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f5 c0       	rjmp	.+490    	; 0x288 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f3 c0       	rjmp	.+486    	; 0x288 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f1 c0       	rjmp	.+482    	; 0x288 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ef c0       	rjmp	.+478    	; 0x288 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ed c0       	rjmp	.+474    	; 0x288 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	eb c0       	rjmp	.+470    	; 0x288 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e9 c0       	rjmp	.+466    	; 0x288 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e7 c0       	rjmp	.+462    	; 0x288 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e5 c0       	rjmp	.+458    	; 0x288 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e3 c0       	rjmp	.+454    	; 0x288 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e1 c0       	rjmp	.+450    	; 0x288 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	df c0       	rjmp	.+446    	; 0x288 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <__vector_51>
      d0:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__vector_52>
      d4:	d9 c0       	rjmp	.+434    	; 0x288 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d7 c0       	rjmp	.+430    	; 0x288 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d5 c0       	rjmp	.+426    	; 0x288 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d3 c0       	rjmp	.+422    	; 0x288 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	18 1c       	adc	r1, r8
      e6:	1b 1c       	adc	r1, r11
      e8:	0a 1c       	adc	r0, r10
      ea:	0e 1c       	adc	r0, r14
      ec:	14 1c       	adc	r1, r4
      ee:	52 1c       	adc	r5, r2
      f0:	1f 1c       	adc	r1, r15
      f2:	23 1c       	adc	r2, r3
      f4:	29 1c       	adc	r2, r9
      f6:	2d 1c       	adc	r2, r13
      f8:	31 1c       	adc	r3, r1
      fa:	37 1c       	adc	r3, r7
      fc:	3b 1c       	adc	r3, r11
      fe:	3f 1c       	adc	r3, r15
     100:	52 1c       	adc	r5, r2
     102:	45 1c       	adc	r4, r5
     104:	49 1c       	adc	r4, r9
     106:	4d 1c       	adc	r4, r13

00000108 <__trampolines_end>:
     108:	7c 3c       	cpi	r23, 0xCC	; 204
     10a:	3e 5e       	subi	r19, 0xEE	; 238
     10c:	2b 3d       	cpi	r18, 0xDB	; 219
     10e:	3f 2f       	mov	r19, r31
     110:	5b 5d       	subi	r21, 0xDB	; 219
     112:	3b 2c       	mov	r3, r11
     114:	2a 22       	and	r2, r26
     116:	5c 00       	.word	0x005c	; ????

00000118 <digital_pin_to_timer_PGM>:
     118:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     144:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000015e <digital_pin_to_bit_mask_PGM>:
     15e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     16e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     17e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     18e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     19e:	04 08 10 20 40 80                                   ... @.

000001a4 <digital_pin_to_port_PGM>:
     1a4:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1b4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1c4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1d4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1e4:	0b 0b 0b 0b 0b 0b                                   ......

000001ea <port_to_output_PGM>:
     1ea:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1fa:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000204 <port_to_mode_PGM>:
     204:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     214:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021e <__ctors_start>:
     21e:	49 01       	movw	r8, r18
     220:	7e 09       	sbc	r23, r14
     222:	d3 0c       	add	r13, r3
     224:	67 1a       	sub	r6, r23
     226:	fc 1a       	sub	r15, r28

00000228 <__ctors_end>:
     228:	11 24       	eor	r1, r1
     22a:	1f be       	out	0x3f, r1	; 63
     22c:	cf ef       	ldi	r28, 0xFF	; 255
     22e:	d1 e2       	ldi	r29, 0x21	; 33
     230:	de bf       	out	0x3e, r29	; 62
     232:	cd bf       	out	0x3d, r28	; 61
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0c bf       	out	0x3c, r16	; 60

00000238 <__do_copy_data>:
     238:	13 e0       	ldi	r17, 0x03	; 3
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b2 e0       	ldi	r27, 0x02	; 2
     23e:	e2 e0       	ldi	r30, 0x02	; 2
     240:	f2 e4       	ldi	r31, 0x42	; 66
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0b bf       	out	0x3b, r16	; 59
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x14>
     248:	07 90       	elpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	a4 34       	cpi	r26, 0x44	; 68
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0x10>

00000252 <__do_clear_bss>:
     252:	27 e0       	ldi	r18, 0x07	; 7
     254:	a4 e4       	ldi	r26, 0x44	; 68
     256:	b3 e0       	ldi	r27, 0x03	; 3
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
     25c:	ae 30       	cpi	r26, 0x0E	; 14
     25e:	b2 07       	cpc	r27, r18
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>

00000262 <__do_global_ctors>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	c4 e1       	ldi	r28, 0x14	; 20
     266:	d1 e0       	ldi	r29, 0x01	; 1
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	06 c0       	rjmp	.+12     	; 0x278 <__do_global_ctors+0x16>
     26c:	21 97       	sbiw	r28, 0x01	; 1
     26e:	01 09       	sbc	r16, r1
     270:	80 2f       	mov	r24, r16
     272:	fe 01       	movw	r30, r28
     274:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__tablejump2__>
     278:	cf 30       	cpi	r28, 0x0F	; 15
     27a:	d1 07       	cpc	r29, r17
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	08 07       	cpc	r16, r24
     280:	a9 f7       	brne	.-22     	; 0x26c <__do_global_ctors+0xa>
     282:	17 d0       	rcall	.+46     	; 0x2b2 <main>
     284:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <_exit>

00000288 <__bad_interrupt>:
     288:	bb ce       	rjmp	.-650    	; 0x0 <__vectors>

0000028a <setup>:


NexUpload nex_download("nex.tft",10,115200);
void setup() {
  // put your setup code here, to run once:
    nex_download.upload();
     28a:	84 e4       	ldi	r24, 0x44	; 68
     28c:	93 e0       	ldi	r25, 0x03	; 3
     28e:	32 c4       	rjmp	.+2148   	; 0xaf4 <_ZN9NexUpload6uploadEv>

00000290 <loop>:
}

void loop() {
     290:	08 95       	ret

00000292 <_GLOBAL__sub_I_nex_download>:
  // put your main code here, to run repeatedly:
}
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
#include "NexUpload.h"
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio


NexUpload nex_download("nex.tft",10,115200);
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	12 ec       	ldi	r17, 0xC2	; 194
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	4a e0       	ldi	r20, 0x0A	; 10
     2a0:	66 e2       	ldi	r22, 0x26	; 38
     2a2:	72 e0       	ldi	r23, 0x02	; 2
     2a4:	84 e4       	ldi	r24, 0x44	; 68
     2a6:	93 e0       	ldi	r25, 0x03	; 3
     2a8:	26 d1       	rcall	.+588    	; 0x4f6 <_ZN9NexUploadC1EPKchm>
    nex_download.upload();
}

void loop() {
  // put your main code here, to run repeatedly:
}
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	08 95       	ret

000002b0 <initVariant>:
     2b0:	08 95       	ret

000002b2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     2b2:	bf d0       	rcall	.+382    	; 0x432 <init>
     2b4:	fd df       	rcall	.-6      	; 0x2b0 <initVariant>
     2b6:	e9 df       	rcall	.-46     	; 0x28a <setup>
     2b8:	c9 ed       	ldi	r28, 0xD9	; 217
     2ba:	d8 e1       	ldi	r29, 0x18	; 24
     2bc:	e9 df       	rcall	.-46     	; 0x290 <loop>
     2be:	20 97       	sbiw	r28, 0x00	; 0
     2c0:	e9 f3       	breq	.-6      	; 0x2bc <main+0xa>
     2c2:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_Z14serialEventRunv>
     2c6:	fa cf       	rjmp	.-12     	; 0x2bc <main+0xa>

000002c8 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	af 93       	push	r26
     2dc:	bf 93       	push	r27
     2de:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <timer0_millis>
     2e2:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <timer0_millis+0x1>
     2e6:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <timer0_millis+0x2>
     2ea:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <timer0_millis+0x3>
     2ee:	30 91 6e 03 	lds	r19, 0x036E	; 0x80036e <timer0_fract>
     2f2:	23 e0       	ldi	r18, 0x03	; 3
     2f4:	23 0f       	add	r18, r19
     2f6:	2d 37       	cpi	r18, 0x7D	; 125
     2f8:	20 f4       	brcc	.+8      	; 0x302 <__vector_23+0x3a>
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	a1 1d       	adc	r26, r1
     2fe:	b1 1d       	adc	r27, r1
     300:	05 c0       	rjmp	.+10     	; 0x30c <__vector_23+0x44>
     302:	26 e8       	ldi	r18, 0x86	; 134
     304:	23 0f       	add	r18, r19
     306:	02 96       	adiw	r24, 0x02	; 2
     308:	a1 1d       	adc	r26, r1
     30a:	b1 1d       	adc	r27, r1
     30c:	20 93 6e 03 	sts	0x036E, r18	; 0x80036e <timer0_fract>
     310:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <timer0_millis>
     314:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <timer0_millis+0x1>
     318:	a0 93 71 03 	sts	0x0371, r26	; 0x800371 <timer0_millis+0x2>
     31c:	b0 93 72 03 	sts	0x0372, r27	; 0x800372 <timer0_millis+0x3>
     320:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <timer0_overflow_count>
     324:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <timer0_overflow_count+0x1>
     328:	a0 91 75 03 	lds	r26, 0x0375	; 0x800375 <timer0_overflow_count+0x2>
     32c:	b0 91 76 03 	lds	r27, 0x0376	; 0x800376 <timer0_overflow_count+0x3>
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	a1 1d       	adc	r26, r1
     334:	b1 1d       	adc	r27, r1
     336:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <timer0_overflow_count>
     33a:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <timer0_overflow_count+0x1>
     33e:	a0 93 75 03 	sts	0x0375, r26	; 0x800375 <timer0_overflow_count+0x2>
     342:	b0 93 76 03 	sts	0x0376, r27	; 0x800376 <timer0_overflow_count+0x3>
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <millis>:
     35c:	2f b7       	in	r18, 0x3f	; 63
     35e:	f8 94       	cli
     360:	60 91 6f 03 	lds	r22, 0x036F	; 0x80036f <timer0_millis>
     364:	70 91 70 03 	lds	r23, 0x0370	; 0x800370 <timer0_millis+0x1>
     368:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <timer0_millis+0x2>
     36c:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <timer0_millis+0x3>
     370:	2f bf       	out	0x3f, r18	; 63
     372:	08 95       	ret

00000374 <micros>:
     374:	3f b7       	in	r19, 0x3f	; 63
     376:	f8 94       	cli
     378:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <timer0_overflow_count>
     37c:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <timer0_overflow_count+0x1>
     380:	a0 91 75 03 	lds	r26, 0x0375	; 0x800375 <timer0_overflow_count+0x2>
     384:	b0 91 76 03 	lds	r27, 0x0376	; 0x800376 <timer0_overflow_count+0x3>
     388:	26 b5       	in	r18, 0x26	; 38
     38a:	a8 9b       	sbis	0x15, 0	; 21
     38c:	05 c0       	rjmp	.+10     	; 0x398 <micros+0x24>
     38e:	2f 3f       	cpi	r18, 0xFF	; 255
     390:	19 f0       	breq	.+6      	; 0x398 <micros+0x24>
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	a1 1d       	adc	r26, r1
     396:	b1 1d       	adc	r27, r1
     398:	3f bf       	out	0x3f, r19	; 63
     39a:	ba 2f       	mov	r27, r26
     39c:	a9 2f       	mov	r26, r25
     39e:	98 2f       	mov	r25, r24
     3a0:	88 27       	eor	r24, r24
     3a2:	82 0f       	add	r24, r18
     3a4:	91 1d       	adc	r25, r1
     3a6:	a1 1d       	adc	r26, r1
     3a8:	b1 1d       	adc	r27, r1
     3aa:	bc 01       	movw	r22, r24
     3ac:	cd 01       	movw	r24, r26
     3ae:	42 e0       	ldi	r20, 0x02	; 2
     3b0:	66 0f       	add	r22, r22
     3b2:	77 1f       	adc	r23, r23
     3b4:	88 1f       	adc	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	4a 95       	dec	r20
     3ba:	d1 f7       	brne	.-12     	; 0x3b0 <micros+0x3c>
     3bc:	08 95       	ret

000003be <delay>:
     3be:	8f 92       	push	r8
     3c0:	9f 92       	push	r9
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	6b 01       	movw	r12, r22
     3d0:	7c 01       	movw	r14, r24
     3d2:	d0 df       	rcall	.-96     	; 0x374 <micros>
     3d4:	4b 01       	movw	r8, r22
     3d6:	5c 01       	movw	r10, r24
     3d8:	c1 14       	cp	r12, r1
     3da:	d1 04       	cpc	r13, r1
     3dc:	e1 04       	cpc	r14, r1
     3de:	f1 04       	cpc	r15, r1
     3e0:	f9 f0       	breq	.+62     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3e2:	0e 94 29 1b 	call	0x3652	; 0x3652 <yield>
     3e6:	c6 df       	rcall	.-116    	; 0x374 <micros>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	88 19       	sub	r24, r8
     3ee:	99 09       	sbc	r25, r9
     3f0:	aa 09       	sbc	r26, r10
     3f2:	bb 09       	sbc	r27, r11
     3f4:	88 3e       	cpi	r24, 0xE8	; 232
     3f6:	93 40       	sbci	r25, 0x03	; 3
     3f8:	a1 05       	cpc	r26, r1
     3fa:	b1 05       	cpc	r27, r1
     3fc:	68 f3       	brcs	.-38     	; 0x3d8 <delay+0x1a>
     3fe:	21 e0       	ldi	r18, 0x01	; 1
     400:	c2 1a       	sub	r12, r18
     402:	d1 08       	sbc	r13, r1
     404:	e1 08       	sbc	r14, r1
     406:	f1 08       	sbc	r15, r1
     408:	88 ee       	ldi	r24, 0xE8	; 232
     40a:	88 0e       	add	r8, r24
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	98 1e       	adc	r9, r24
     410:	a1 1c       	adc	r10, r1
     412:	b1 1c       	adc	r11, r1
     414:	c1 14       	cp	r12, r1
     416:	d1 04       	cpc	r13, r1
     418:	e1 04       	cpc	r14, r1
     41a:	f1 04       	cpc	r15, r1
     41c:	21 f7       	brne	.-56     	; 0x3e6 <delay+0x28>
     41e:	dc cf       	rjmp	.-72     	; 0x3d8 <delay+0x1a>
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	bf 90       	pop	r11
     42a:	af 90       	pop	r10
     42c:	9f 90       	pop	r9
     42e:	8f 90       	pop	r8
     430:	08 95       	ret

00000432 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     432:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     434:	84 b5       	in	r24, 0x24	; 36
     436:	82 60       	ori	r24, 0x02	; 2
     438:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     43a:	84 b5       	in	r24, 0x24	; 36
     43c:	81 60       	ori	r24, 0x01	; 1
     43e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     440:	85 b5       	in	r24, 0x25	; 37
     442:	82 60       	ori	r24, 0x02	; 2
     444:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     446:	85 b5       	in	r24, 0x25	; 37
     448:	81 60       	ori	r24, 0x01	; 1
     44a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     44c:	ee e6       	ldi	r30, 0x6E	; 110
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	81 60       	ori	r24, 0x01	; 1
     454:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     456:	e1 e8       	ldi	r30, 0x81	; 129
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     45c:	80 81       	ld	r24, Z
     45e:	82 60       	ori	r24, 0x02	; 2
     460:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     462:	80 81       	ld	r24, Z
     464:	81 60       	ori	r24, 0x01	; 1
     466:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     468:	e0 e8       	ldi	r30, 0x80	; 128
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	81 60       	ori	r24, 0x01	; 1
     470:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     472:	e1 eb       	ldi	r30, 0xB1	; 177
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	84 60       	ori	r24, 0x04	; 4
     47a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     47c:	e0 eb       	ldi	r30, 0xB0	; 176
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	81 60       	ori	r24, 0x01	; 1
     484:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     486:	e1 e9       	ldi	r30, 0x91	; 145
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	82 60       	ori	r24, 0x02	; 2
     48e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     490:	80 81       	ld	r24, Z
     492:	81 60       	ori	r24, 0x01	; 1
     494:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     496:	e0 e9       	ldi	r30, 0x90	; 144
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	81 60       	ori	r24, 0x01	; 1
     49e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     4a0:	e1 ea       	ldi	r30, 0xA1	; 161
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	82 60       	ori	r24, 0x02	; 2
     4a8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     4aa:	80 81       	ld	r24, Z
     4ac:	81 60       	ori	r24, 0x01	; 1
     4ae:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     4b0:	e0 ea       	ldi	r30, 0xA0	; 160
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	81 60       	ori	r24, 0x01	; 1
     4b8:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     4ba:	e1 e2       	ldi	r30, 0x21	; 33
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	80 81       	ld	r24, Z
     4c0:	82 60       	ori	r24, 0x02	; 2
     4c2:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     4c4:	80 81       	ld	r24, Z
     4c6:	81 60       	ori	r24, 0x01	; 1
     4c8:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     4ca:	e0 e2       	ldi	r30, 0x20	; 32
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	80 81       	ld	r24, Z
     4d0:	81 60       	ori	r24, 0x01	; 1
     4d2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     4d4:	ea e7       	ldi	r30, 0x7A	; 122
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	84 60       	ori	r24, 0x04	; 4
     4dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     4de:	80 81       	ld	r24, Z
     4e0:	82 60       	ori	r24, 0x02	; 2
     4e2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     4e4:	80 81       	ld	r24, Z
     4e6:	81 60       	ori	r24, 0x01	; 1
     4e8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     4ea:	80 81       	ld	r24, Z
     4ec:	80 68       	ori	r24, 0x80	; 128
     4ee:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     4f0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     4f4:	08 95       	ret

000004f6 <_ZN9NexUploadC1EPKchm>:
}

NexUpload::NexUpload(const String file_Name,const uint8_t SD_chip_select,uint32_t download_baudrate)
{
    NexUpload(file_Name.c_str(),SD_chip_select,download_baudrate);
}
     4f6:	8f 92       	push	r8
     4f8:	9f 92       	push	r9
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	ec 01       	movw	r28, r24
     50e:	4b 01       	movw	r8, r22
     510:	b4 2e       	mov	r11, r20
     512:	68 01       	movw	r12, r16
     514:	79 01       	movw	r14, r18
     516:	06 96       	adiw	r24, 0x06	; 6
     518:	dd d3       	rcall	.+1978   	; 0xcd4 <_ZN5SDLib4FileC1Ev>
     51a:	9d 82       	std	Y+5, r9	; 0x05
     51c:	8c 82       	std	Y+4, r8	; 0x04
     51e:	bd a2       	std	Y+37, r11	; 0x25
     520:	ce a2       	std	Y+38, r12	; 0x26
     522:	df a2       	std	Y+39, r13	; 0x27
     524:	e8 a6       	std	Y+40, r14	; 0x28
     526:	f9 a6       	std	Y+41, r15	; 0x29
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	bf 90       	pop	r11
     53a:	9f 90       	pop	r9
     53c:	8f 90       	pop	r8
     53e:	08 95       	ret

00000540 <_ZN9NexUpload10_checkFileEv>:
    }
    return _baudrate;
}

bool NexUpload::_checkFile(void)
{
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	6b 97       	sbiw	r28, 0x1b	; 27
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	8c 01       	movw	r16, r24
    dbSerialPrintln("start _checkFile");
     55c:	6e e2       	ldi	r22, 0x2E	; 46
     55e:	72 e0       	ldi	r23, 0x02	; 2
     560:	80 ed       	ldi	r24, 0xD0	; 208
     562:	95 e0       	ldi	r25, 0x05	; 5
     564:	0e 94 8b 1b 	call	0x3716	; 0x3716 <_ZN5Print7printlnEPKc>
    if(!SD.begin(_SD_chip_select))
     568:	f8 01       	movw	r30, r16
     56a:	65 a1       	ldd	r22, Z+37	; 0x25
     56c:	87 e7       	ldi	r24, 0x77	; 119
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	2c d5       	rcall	.+2648   	; 0xfca <_ZN5SDLib7SDClass5beginEh>
     572:	f8 2e       	mov	r15, r24
     574:	81 11       	cpse	r24, r1
     576:	03 c0       	rjmp	.+6      	; 0x57e <_ZN9NexUpload10_checkFileEv+0x3e>
    {
        dbSerialPrintln("init sd failed");
     578:	6f e3       	ldi	r22, 0x3F	; 63
     57a:	72 e0       	ldi	r23, 0x02	; 2
     57c:	57 c0       	rjmp	.+174    	; 0x62c <_ZN9NexUpload10_checkFileEv+0xec>
        return 0;
    }
    if(!SD.exists(_file_name))
     57e:	f8 01       	movw	r30, r16
     580:	64 81       	ldd	r22, Z+4	; 0x04
     582:	75 81       	ldd	r23, Z+5	; 0x05
     584:	87 e7       	ldi	r24, 0x77	; 119
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	af d6       	rcall	.+3422   	; 0x12e8 <_ZN5SDLib7SDClass6existsEPKc>
     58a:	81 11       	cpse	r24, r1
     58c:	06 c0       	rjmp	.+12     	; 0x59a <_ZN9NexUpload10_checkFileEv+0x5a>
    {
        dbSerialPrintln("file is not exit");
     58e:	6e e4       	ldi	r22, 0x4E	; 78
     590:	72 e0       	ldi	r23, 0x02	; 2
     592:	80 ed       	ldi	r24, 0xD0	; 208
     594:	95 e0       	ldi	r25, 0x05	; 5
     596:	0e 94 8b 1b 	call	0x3716	; 0x3716 <_ZN5Print7printlnEPKc>
    }
   _myFile = SD.open(_file_name);
     59a:	f8 01       	movw	r30, r16
     59c:	44 81       	ldd	r20, Z+4	; 0x04
     59e:	55 81       	ldd	r21, Z+5	; 0x05
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	67 e7       	ldi	r22, 0x77	; 119
     5a4:	73 e0       	ldi	r23, 0x03	; 3
     5a6:	ce 01       	movw	r24, r28
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	1c d6       	rcall	.+3128   	; 0x11e4 <_ZN5SDLib7SDClass4openEPKch>
     5ac:	c8 01       	movw	r24, r16
     5ae:	06 96       	adiw	r24, 0x06	; 6
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     5b0:	2b 81       	ldd	r18, Y+3	; 0x03
     5b2:	3c 81       	ldd	r19, Y+4	; 0x04
     5b4:	f8 01       	movw	r30, r16
     5b6:	31 87       	std	Z+9, r19	; 0x09
     5b8:	20 87       	std	Z+8, r18	; 0x08
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     5ba:	4d 81       	ldd	r20, Y+5	; 0x05
     5bc:	5e 81       	ldd	r21, Y+6	; 0x06
     5be:	6f 81       	ldd	r22, Y+7	; 0x07
     5c0:	78 85       	ldd	r23, Y+8	; 0x08
     5c2:	42 87       	std	Z+10, r20	; 0x0a
     5c4:	53 87       	std	Z+11, r21	; 0x0b
     5c6:	64 87       	std	Z+12, r22	; 0x0c
     5c8:	75 87       	std	Z+13, r23	; 0x0d
     5ca:	49 85       	ldd	r20, Y+9	; 0x09
     5cc:	5a 85       	ldd	r21, Y+10	; 0x0a
     5ce:	6b 85       	ldd	r22, Y+11	; 0x0b
     5d0:	7c 85       	ldd	r23, Y+12	; 0x0c
     5d2:	46 87       	std	Z+14, r20	; 0x0e
     5d4:	57 87       	std	Z+15, r21	; 0x0f
     5d6:	60 8b       	std	Z+16, r22	; 0x10
     5d8:	71 8b       	std	Z+17, r23	; 0x11
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

namespace SDLib {

class File : public Stream {
     5da:	72 96       	adiw	r30, 0x12	; 18
     5dc:	de 01       	movw	r26, r28
     5de:	1d 96       	adiw	r26, 0x0d	; 13
     5e0:	98 01       	movw	r18, r16
     5e2:	21 5e       	subi	r18, 0xE1	; 225
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	4d 91       	ld	r20, X+
     5e8:	41 93       	st	Z+, r20
     5ea:	e2 17       	cp	r30, r18
     5ec:	f3 07       	cpc	r31, r19
     5ee:	d9 f7       	brne	.-10     	; 0x5e6 <_ZN9NexUpload10_checkFileEv+0xa6>
     5f0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5f2:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5f4:	f8 01       	movw	r30, r16
     5f6:	30 a3       	std	Z+32, r19	; 0x20
    _undownloadByte = _myFile.size();
     5f8:	27 8f       	std	Z+31, r18	; 0x1f
     5fa:	8f d3       	rcall	.+1822   	; 0xd1a <_ZN5SDLib4File4sizeEv>
     5fc:	f8 01       	movw	r30, r16
     5fe:	61 a3       	std	Z+33, r22	; 0x21
     600:	72 a3       	std	Z+34, r23	; 0x22
     602:	83 a3       	std	Z+35, r24	; 0x23
     604:	94 a3       	std	Z+36, r25	; 0x24
    dbSerialPrintln("tft file size is:");
     606:	6f e5       	ldi	r22, 0x5F	; 95
     608:	72 e0       	ldi	r23, 0x02	; 2
     60a:	80 ed       	ldi	r24, 0xD0	; 208
     60c:	95 e0       	ldi	r25, 0x05	; 5
     60e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <_ZN5Print7printlnEPKc>
    dbSerialPrintln(_undownloadByte);
     612:	f8 01       	movw	r30, r16
     614:	41 a1       	ldd	r20, Z+33	; 0x21
     616:	52 a1       	ldd	r21, Z+34	; 0x22
     618:	63 a1       	ldd	r22, Z+35	; 0x23
     61a:	74 a1       	ldd	r23, Z+36	; 0x24
     61c:	2a e0       	ldi	r18, 0x0A	; 10
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	80 ed       	ldi	r24, 0xD0	; 208
     622:	95 e0       	ldi	r25, 0x05	; 5
     624:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <_ZN5Print7printlnEmi>
    dbSerialPrintln("check file ok");
     628:	61 e7       	ldi	r22, 0x71	; 113
     62a:	72 e0       	ldi	r23, 0x02	; 2
     62c:	80 ed       	ldi	r24, 0xD0	; 208
     62e:	95 e0       	ldi	r25, 0x05	; 5
     630:	0e 94 8b 1b 	call	0x3716	; 0x3716 <_ZN5Print7printlnEPKc>
    return 1;
}
     634:	8f 2d       	mov	r24, r15
     636:	6b 96       	adiw	r28, 0x1b	; 27
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	08 95       	ret

0000064e <_ZN9NexUpload13recvRetStringER6Stringmb>:
    nexSerial.write(0xFF);
    nexSerial.write(0xFF);
}

uint16_t NexUpload::recvRetString(String &string, uint32_t timeout,bool recv_flag)
{
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	eb 01       	movw	r28, r22
     668:	49 01       	movw	r8, r18
    uint16_t ret = 0;
    uint8_t c = 0;
    long start;
    bool exit_flag = false;
    start = millis();
     66a:	5a 01       	movw	r10, r20
     66c:	77 de       	rcall	.-786    	; 0x35c <millis>
    while (millis() - start <= timeout)
     66e:	6b 01       	movw	r12, r22
     670:	7c 01       	movw	r14, r24
     672:	74 de       	rcall	.-792    	; 0x35c <millis>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	8c 19       	sub	r24, r12
     67a:	9d 09       	sbc	r25, r13
     67c:	ae 09       	sbc	r26, r14
     67e:	bf 09       	sbc	r27, r15
     680:	88 16       	cp	r8, r24
     682:	99 06       	cpc	r9, r25
     684:	aa 06       	cpc	r10, r26
     686:	bb 06       	cpc	r11, r27
     688:	80 f0       	brcs	.+32     	; 0x6aa <_ZN9NexUpload13recvRetStringER6Stringmb+0x5c>
     68a:	10 e0       	ldi	r17, 0x00	; 0
    {
        while (nexSerial.available())
        {
            c = nexSerial.read(); 
     68c:	06 c0       	rjmp	.+12     	; 0x69a <_ZN9NexUpload13recvRetStringER6Stringmb+0x4c>
     68e:	8d e6       	ldi	r24, 0x6D	; 109
     690:	96 e0       	ldi	r25, 0x06	; 6
     692:	0e 94 b6 18 	call	0x316c	; 0x316c <_ZN14HardwareSerial4readEv>
            if(c == 0)
     696:	81 11       	cpse	r24, r1
    long start;
    bool exit_flag = false;
    start = millis();
    while (millis() - start <= timeout)
    {
        while (nexSerial.available())
     698:	17 c0       	rjmp	.+46     	; 0x6c8 <_ZN9NexUpload13recvRetStringER6Stringmb+0x7a>
     69a:	8d e6       	ldi	r24, 0x6D	; 109
     69c:	96 e0       	ldi	r25, 0x06	; 6
     69e:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN14HardwareSerial9availableEv>
     6a2:	89 2b       	or	r24, r25
                { 
                    exit_flag = true;
                } 
            }
        }
        if(exit_flag)
     6a4:	a1 f7       	brne	.-24     	; 0x68e <_ZN9NexUpload13recvRetStringER6Stringmb+0x40>
     6a6:	11 23       	and	r17, r17
        {
            break;
        }
    }
    ret = string.length();
    return ret;
     6a8:	21 f3       	breq	.-56     	; 0x672 <_ZN9NexUpload13recvRetStringER6Stringmb+0x24>
     6aa:	8c 81       	ldd	r24, Y+4	; 0x04
}
     6ac:	9d 81       	ldd	r25, Y+5	; 0x05
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	bf 90       	pop	r11
     6c0:	af 90       	pop	r10
     6c2:	9f 90       	pop	r9
     6c4:	8f 90       	pop	r8

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     6c6:	08 95       	ret
     6c8:	68 2f       	mov	r22, r24
     6ca:	ce 01       	movw	r24, r28
     6cc:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <_ZN6String6concatEc>
            if(c == 0)
            {
                continue;
            }
            string += (char)c;
            if(recv_flag)
     6d0:	00 23       	and	r16, r16
            {
                if(string.indexOf(0x05) != -1)
     6d2:	19 f3       	breq	.-58     	; 0x69a <_ZN9NexUpload13recvRetStringER6Stringmb+0x4c>
     6d4:	65 e0       	ldi	r22, 0x05	; 5
     6d6:	ce 01       	movw	r24, r28
     6d8:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZNK6String7indexOfEc>
     6dc:	01 96       	adiw	r24, 0x01	; 1
                { 
                    exit_flag = true;
     6de:	e9 f2       	breq	.-70     	; 0x69a <_ZN9NexUpload13recvRetStringER6Stringmb+0x4c>
     6e0:	11 e0       	ldi	r17, 0x01	; 1
     6e2:	db cf       	rjmp	.-74     	; 0x69a <_ZN9NexUpload13recvRetStringER6Stringmb+0x4c>

000006e4 <_ZN9NexUpload11sendCommandEPKc>:
    } 
    return 0;
}

void NexUpload::sendCommand(const char* cmd)
{
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	eb 01       	movw	r28, r22

    while (nexSerial.available())
     6ea:	8d e6       	ldi	r24, 0x6D	; 109
     6ec:	96 e0       	ldi	r25, 0x06	; 6
     6ee:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN14HardwareSerial9availableEv>
     6f2:	89 2b       	or	r24, r25
     6f4:	29 f0       	breq	.+10     	; 0x700 <_ZN9NexUpload11sendCommandEPKc+0x1c>
    {
        nexSerial.read();
     6f6:	8d e6       	ldi	r24, 0x6D	; 109
     6f8:	96 e0       	ldi	r25, 0x06	; 6
     6fa:	0e 94 b6 18 	call	0x316c	; 0x316c <_ZN14HardwareSerial4readEv>
}

void NexUpload::sendCommand(const char* cmd)
{

    while (nexSerial.available())
     6fe:	f5 cf       	rjmp	.-22     	; 0x6ea <_ZN9NexUpload11sendCommandEPKc+0x6>
    {
        nexSerial.read();
    }

    nexSerial.print(cmd);
     700:	be 01       	movw	r22, r28
     702:	8d e6       	ldi	r24, 0x6D	; 109
     704:	96 e0       	ldi	r25, 0x06	; 6
     706:	0e 94 77 1b 	call	0x36ee	; 0x36ee <_ZN5Print5printEPKc>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     70a:	6f ef       	ldi	r22, 0xFF	; 255
     70c:	8d e6       	ldi	r24, 0x6D	; 109
     70e:	96 e0       	ldi	r25, 0x06	; 6
     710:	0e 94 35 19 	call	0x326a	; 0x326a <_ZN14HardwareSerial5writeEh>
     714:	6f ef       	ldi	r22, 0xFF	; 255
     716:	8d e6       	ldi	r24, 0x6D	; 109
     718:	96 e0       	ldi	r25, 0x06	; 6
     71a:	0e 94 35 19 	call	0x326a	; 0x326a <_ZN14HardwareSerial5writeEh>
     71e:	6f ef       	ldi	r22, 0xFF	; 255
     720:	8d e6       	ldi	r24, 0x6D	; 109
     722:	96 e0       	ldi	r25, 0x06	; 6
    nexSerial.write(0xFF);
    nexSerial.write(0xFF);
    nexSerial.write(0xFF);
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	0c 94 35 19 	jmp	0x326a	; 0x326a <_ZN14HardwareSerial5writeEh>

0000072c <_ZN9NexUpload15_searchBaudrateEm>:
    dbSerialPrintln("check file ok");
    return 1;
}

bool NexUpload::_searchBaudrate(uint32_t baudrate)
{
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	2c 97       	sbiw	r28, 0x0c	; 12
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	7c 01       	movw	r14, r24
     750:	4a 01       	movw	r8, r20
     752:	5b 01       	movw	r10, r22
    String string = String("");  
     754:	65 e0       	ldi	r22, 0x05	; 5
     756:	73 e0       	ldi	r23, 0x03	; 3
     758:	ce 01       	movw	r24, r28
     75a:	07 96       	adiw	r24, 0x07	; 7
     75c:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN6StringC1EPKc>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     760:	26 e0       	ldi	r18, 0x06	; 6
     762:	b5 01       	movw	r22, r10
     764:	a4 01       	movw	r20, r8
     766:	8d e6       	ldi	r24, 0x6D	; 109
     768:	96 e0       	ldi	r25, 0x06	; 6
     76a:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN14HardwareSerial5beginEmh>
    nexSerial.begin(baudrate);
    this->sendCommand("");
     76e:	65 e0       	ldi	r22, 0x05	; 5
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	c7 01       	movw	r24, r14
     774:	b7 df       	rcall	.-146    	; 0x6e4 <_ZN9NexUpload11sendCommandEPKc>
    this->sendCommand("connect");
     776:	6f e7       	ldi	r22, 0x7F	; 127
     778:	72 e0       	ldi	r23, 0x02	; 2
     77a:	c7 01       	movw	r24, r14
     77c:	b3 df       	rcall	.-154    	; 0x6e4 <_ZN9NexUpload11sendCommandEPKc>
    this->recvRetString(string);  
     77e:	00 e0       	ldi	r16, 0x00	; 0
     780:	24 e6       	ldi	r18, 0x64	; 100
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	be 01       	movw	r22, r28
     78a:	69 5f       	subi	r22, 0xF9	; 249
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	c7 01       	movw	r24, r14
     790:	5e df       	rcall	.-324    	; 0x64e <_ZN9NexUpload13recvRetStringER6Stringmb>
    if(string.indexOf("comok") != -1)
     792:	67 e8       	ldi	r22, 0x87	; 135
     794:	72 e0       	ldi	r23, 0x02	; 2
     796:	ce 01       	movw	r24, r28
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN6StringC1EPKc>
     79e:	be 01       	movw	r22, r28
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	ce 01       	movw	r24, r28
     7a6:	07 96       	adiw	r24, 0x07	; 7
     7a8:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZNK6String7indexOfERKS_>
     7ac:	7c 01       	movw	r14, r24
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
    return 1;
}

bool NexUpload::_searchBaudrate(uint32_t baudrate)
{
    String string = String("");  
     7b6:	ce 01       	movw	r24, r28
     7b8:	07 96       	adiw	r24, 0x07	; 7
     7ba:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	ef 20       	and	r14, r15
     7c2:	e0 94       	com	r14
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <_ZN9NexUpload15_searchBaudrateEm+0x9c>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
    if(string.indexOf("comok") != -1)
    {
        return 1;
    } 
    return 0;
}
     7c8:	2c 96       	adiw	r28, 0x0c	; 12
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	bf 90       	pop	r11
     7e0:	af 90       	pop	r10
     7e2:	9f 90       	pop	r9
     7e4:	8f 90       	pop	r8
     7e6:	08 95       	ret

000007e8 <_ZN9NexUpload12_getBaudrateEv>:
    }
    dbSerialPrintln("download ok\r\n");
}

uint16_t NexUpload::_getBaudrate(void)
{
     7e8:	8f 92       	push	r8
     7ea:	9f 92       	push	r9
     7ec:	af 92       	push	r10
     7ee:	bf 92       	push	r11
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	6c 97       	sbiw	r28, 0x1c	; 28
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	7c 01       	movw	r14, r24
    uint32_t baudrate_array[7] = {115200,19200,9600,57600,38400,4800,2400};
     812:	8c e1       	ldi	r24, 0x1C	; 28
     814:	ea e0       	ldi	r30, 0x0A	; 10
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	de 01       	movw	r26, r28
     81a:	11 96       	adiw	r26, 0x01	; 1
     81c:	01 90       	ld	r0, Z+
     81e:	0d 92       	st	X+, r0
     820:	8a 95       	dec	r24
     822:	e1 f7       	brne	.-8      	; 0x81c <_ZN9NexUpload12_getBaudrateEv+0x34>
     824:	8e 01       	movw	r16, r28
     826:	0f 5f       	subi	r16, 0xFF	; 255
     828:	1f 4f       	sbci	r17, 0xFF	; 255
     82a:	6e 01       	movw	r12, r28
     82c:	8d e1       	ldi	r24, 0x1D	; 29
     82e:	c8 0e       	add	r12, r24
     830:	d1 1c       	adc	r13, r1
    for(uint8_t i = 0; i < 7; i++)
    {
        if(_searchBaudrate(baudrate_array[i]))
     832:	f8 01       	movw	r30, r16
     834:	81 90       	ld	r8, Z+
     836:	91 90       	ld	r9, Z+
     838:	a1 90       	ld	r10, Z+
     83a:	b1 90       	ld	r11, Z+
     83c:	8f 01       	movw	r16, r30
     83e:	b5 01       	movw	r22, r10
     840:	a4 01       	movw	r20, r8
     842:	c7 01       	movw	r24, r14
     844:	73 df       	rcall	.-282    	; 0x72c <_ZN9NexUpload15_searchBaudrateEm>
     846:	88 23       	and	r24, r24
     848:	61 f0       	breq	.+24     	; 0x862 <_ZN9NexUpload12_getBaudrateEv+0x7a>
        {
            _baudrate = baudrate_array[i];
     84a:	f7 01       	movw	r30, r14
     84c:	80 82       	st	Z, r8
     84e:	91 82       	std	Z+1, r9	; 0x01
     850:	a2 82       	std	Z+2, r10	; 0x02
     852:	b3 82       	std	Z+3, r11	; 0x03
            dbSerialPrintln("get baudrate");
     854:	6d e8       	ldi	r22, 0x8D	; 141
     856:	72 e0       	ldi	r23, 0x02	; 2
     858:	80 ed       	ldi	r24, 0xD0	; 208
     85a:	95 e0       	ldi	r25, 0x05	; 5
     85c:	0e 94 8b 1b 	call	0x3716	; 0x3716 <_ZN5Print7printlnEPKc>
            break;
     860:	03 c0       	rjmp	.+6      	; 0x868 <_ZN9NexUpload12_getBaudrateEv+0x80>
}

uint16_t NexUpload::_getBaudrate(void)
{
    uint32_t baudrate_array[7] = {115200,19200,9600,57600,38400,4800,2400};
    for(uint8_t i = 0; i < 7; i++)
     862:	0c 15       	cp	r16, r12
     864:	1d 05       	cpc	r17, r13
     866:	29 f7       	brne	.-54     	; 0x832 <_ZN9NexUpload12_getBaudrateEv+0x4a>
            dbSerialPrintln("get baudrate");
            break;
        }
    }
    return _baudrate;
}
     868:	f7 01       	movw	r30, r14
     86a:	80 81       	ld	r24, Z
     86c:	91 81       	ldd	r25, Z+1	; 0x01
     86e:	6c 96       	adiw	r28, 0x1c	; 28
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	08 95       	ret

00000894 <_ZN9NexUpload20_setDownloadBaudrateEm>:
    ret = string.length();
    return ret;
}

bool NexUpload::_setDownloadBaudrate(uint32_t baudrate)
{
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	6e 97       	sbiw	r28, 0x1e	; 30
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	7c 01       	movw	r14, r24
     8b8:	4a 01       	movw	r8, r20
     8ba:	5b 01       	movw	r10, r22
    String string = String(""); 
     8bc:	65 e0       	ldi	r22, 0x05	; 5
     8be:	73 e0       	ldi	r23, 0x03	; 3
     8c0:	ce 01       	movw	r24, r28
     8c2:	49 96       	adiw	r24, 0x19	; 25
     8c4:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN6StringC1EPKc>
    String cmd = String("");
     8c8:	65 e0       	ldi	r22, 0x05	; 5
     8ca:	73 e0       	ldi	r23, 0x03	; 3
     8cc:	ce 01       	movw	r24, r28
     8ce:	43 96       	adiw	r24, 0x13	; 19
     8d0:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN6StringC1EPKc>
    
    String filesize_str = String(_undownloadByte,10);
     8d4:	f7 01       	movw	r30, r14
     8d6:	41 a1       	ldd	r20, Z+33	; 0x21
     8d8:	52 a1       	ldd	r21, Z+34	; 0x22
     8da:	63 a1       	ldd	r22, Z+35	; 0x23
     8dc:	74 a1       	ldd	r23, Z+36	; 0x24
     8de:	2a e0       	ldi	r18, 0x0A	; 10
     8e0:	ce 01       	movw	r24, r28
     8e2:	0d 96       	adiw	r24, 0x0d	; 13
     8e4:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <_ZN6StringC1Emh>
    String baudrate_str = String(baudrate,10);
     8e8:	2a e0       	ldi	r18, 0x0A	; 10
     8ea:	b5 01       	movw	r22, r10
     8ec:	a4 01       	movw	r20, r8
     8ee:	ce 01       	movw	r24, r28
     8f0:	07 96       	adiw	r24, 0x07	; 7
     8f2:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <_ZN6StringC1Emh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     8f6:	6a e9       	ldi	r22, 0x9A	; 154
     8f8:	72 e0       	ldi	r23, 0x02	; 2
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN6StringC1EPKc>
    cmd = "whmi-wri " + filesize_str + "," + baudrate_str + ",0";
     902:	be 01       	movw	r22, r28
     904:	63 5f       	subi	r22, 0xF3	; 243
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	ce 01       	movw	r24, r28
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <_ZplRK15StringSumHelperRK6String>
     910:	64 ea       	ldi	r22, 0xA4	; 164
     912:	72 e0       	ldi	r23, 0x02	; 2
     914:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZplRK15StringSumHelperPKc>
     918:	be 01       	movw	r22, r28
     91a:	69 5f       	subi	r22, 0xF9	; 249
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <_ZplRK15StringSumHelperRK6String>
     922:	66 ea       	ldi	r22, 0xA6	; 166
     924:	72 e0       	ldi	r23, 0x02	; 2
     926:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZplRK15StringSumHelperPKc>
     92a:	bc 01       	movw	r22, r24
     92c:	ce 01       	movw	r24, r28
     92e:	43 96       	adiw	r24, 0x13	; 19
     930:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
    
    dbSerialPrintln(cmd);
     93c:	be 01       	movw	r22, r28
     93e:	6d 5e       	subi	r22, 0xED	; 237
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	80 ed       	ldi	r24, 0xD0	; 208
     944:	95 e0       	ldi	r25, 0x05	; 5
     946:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <_ZN5Print7printlnERK6String>
    this->sendCommand("");
     94a:	65 e0       	ldi	r22, 0x05	; 5
     94c:	73 e0       	ldi	r23, 0x03	; 3
     94e:	c7 01       	movw	r24, r14
     950:	c9 de       	rcall	.-622    	; 0x6e4 <_ZN9NexUpload11sendCommandEPKc>
    this->sendCommand(cmd.c_str());
     952:	6b 89       	ldd	r22, Y+19	; 0x13
     954:	7c 89       	ldd	r23, Y+20	; 0x14
     956:	c7 01       	movw	r24, r14
     958:	c5 de       	rcall	.-630    	; 0x6e4 <_ZN9NexUpload11sendCommandEPKc>
    delay(50);
     95a:	62 e3       	ldi	r22, 0x32	; 50
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	2d dd       	rcall	.-1446   	; 0x3be <delay>
     964:	26 e0       	ldi	r18, 0x06	; 6
     966:	b5 01       	movw	r22, r10
     968:	a4 01       	movw	r20, r8
     96a:	8d e6       	ldi	r24, 0x6D	; 109
     96c:	96 e0       	ldi	r25, 0x06	; 6
     96e:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN14HardwareSerial5beginEmh>
    nexSerial.begin(baudrate);
    this->recvRetString(string,500);  
     972:	00 e0       	ldi	r16, 0x00	; 0
     974:	24 ef       	ldi	r18, 0xF4	; 244
     976:	31 e0       	ldi	r19, 0x01	; 1
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	be 01       	movw	r22, r28
     97e:	67 5e       	subi	r22, 0xE7	; 231
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	c7 01       	movw	r24, r14
     984:	64 de       	rcall	.-824    	; 0x64e <_ZN9NexUpload13recvRetStringER6Stringmb>
    if(string.indexOf(0x05) != -1)
     986:	65 e0       	ldi	r22, 0x05	; 5
     988:	ce 01       	movw	r24, r28
     98a:	49 96       	adiw	r24, 0x19	; 25
     98c:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZNK6String7indexOfEc>
     990:	7c 01       	movw	r14, r24
{
    String string = String(""); 
    String cmd = String("");
    
    String filesize_str = String(_undownloadByte,10);
    String baudrate_str = String(baudrate,10);
     992:	ce 01       	movw	r24, r28
     994:	07 96       	adiw	r24, 0x07	; 7
     996:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
bool NexUpload::_setDownloadBaudrate(uint32_t baudrate)
{
    String string = String(""); 
    String cmd = String("");
    
    String filesize_str = String(_undownloadByte,10);
     99a:	ce 01       	movw	r24, r28
     99c:	0d 96       	adiw	r24, 0x0d	; 13
     99e:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
}

bool NexUpload::_setDownloadBaudrate(uint32_t baudrate)
{
    String string = String(""); 
    String cmd = String("");
     9a2:	ce 01       	movw	r24, r28
     9a4:	43 96       	adiw	r24, 0x13	; 19
     9a6:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
    return ret;
}

bool NexUpload::_setDownloadBaudrate(uint32_t baudrate)
{
    String string = String(""); 
     9aa:	ce 01       	movw	r24, r28
     9ac:	49 96       	adiw	r24, 0x19	; 25
     9ae:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	ef 20       	and	r14, r15
     9b6:	e0 94       	com	r14
     9b8:	09 f4       	brne	.+2      	; 0x9bc <_ZN9NexUpload20_setDownloadBaudrateEm+0x128>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
    if(string.indexOf(0x05) != -1)
    { 
        return 1;
    } 
    return 0;
}
     9bc:	6e 96       	adiw	r28, 0x1e	; 30
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	08 95       	ret

000009dc <_ZN9NexUpload16_downloadTftFileEv>:

bool NexUpload::_downloadTftFile(void)
{
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <_ZN9NexUpload16_downloadTftFileEv+0x1a>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <_ZN9NexUpload16_downloadTftFileEv+0x1c>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	5c 01       	movw	r10, r24
    uint8_t c;
    uint16_t send_timer = 0;
    uint16_t last_send_num = 0;
    String string = String("");
     9fe:	65 e0       	ldi	r22, 0x05	; 5
     a00:	73 e0       	ldi	r23, 0x03	; 3
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN6StringC1EPKc>
    send_timer = _undownloadByte / 4096 + 1;
     a0a:	f5 01       	movw	r30, r10
     a0c:	81 a1       	ldd	r24, Z+33	; 0x21
     a0e:	92 a1       	ldd	r25, Z+34	; 0x22
     a10:	a3 a1       	ldd	r26, Z+35	; 0x23
     a12:	b4 a1       	ldd	r27, Z+36	; 0x24
     a14:	ac 01       	movw	r20, r24
     a16:	bd 01       	movw	r22, r26
     a18:	2c e0       	ldi	r18, 0x0C	; 12
     a1a:	76 95       	lsr	r23
     a1c:	67 95       	ror	r22
     a1e:	57 95       	ror	r21
     a20:	47 95       	ror	r20
     a22:	2a 95       	dec	r18
     a24:	d1 f7       	brne	.-12     	; 0xa1a <_ZN9NexUpload16_downloadTftFileEv+0x3e>
     a26:	7a 01       	movw	r14, r20
     a28:	ff ef       	ldi	r31, 0xFF	; 255
     a2a:	ef 1a       	sub	r14, r31
     a2c:	ff 0a       	sbc	r15, r31
    last_send_num = _undownloadByte % 4096;
     a2e:	6c 01       	movw	r12, r24
     a30:	2f e0       	ldi	r18, 0x0F	; 15
     a32:	d2 22       	and	r13, r18

        else
        {
            for(uint16_t i = 1; i <= 4096; i++)
            {
                c = _myFile.read();
     a34:	45 01       	movw	r8, r10
     a36:	86 e0       	ldi	r24, 0x06	; 6
     a38:	88 0e       	add	r8, r24
     a3a:	91 1c       	adc	r9, r1
    uint16_t last_send_num = 0;
    String string = String("");
    send_timer = _undownloadByte / 4096 + 1;
    last_send_num = _undownloadByte % 4096;

    while(send_timer)
     a3c:	e1 14       	cp	r14, r1
     a3e:	f1 04       	cpc	r15, r1
     a40:	09 f4       	brne	.+2      	; 0xa44 <_ZN9NexUpload16_downloadTftFileEv+0x68>
     a42:	41 c0       	rjmp	.+130    	; 0xac6 <_ZN9NexUpload16_downloadTftFileEv+0xea>
    {

        if(send_timer == 1)
     a44:	e1 e0       	ldi	r30, 0x01	; 1
     a46:	ee 16       	cp	r14, r30
     a48:	f1 04       	cpc	r15, r1
     a4a:	51 f5       	brne	.+84     	; 0xaa0 <_ZN9NexUpload16_downloadTftFileEv+0xc4>
     a4c:	01 e0       	ldi	r16, 0x01	; 1
     a4e:	10 e0       	ldi	r17, 0x00	; 0
        {
            for(uint16_t j = 1; j <= 4096; j++)
            {
                if(j <= last_send_num)
     a50:	c0 16       	cp	r12, r16
     a52:	d1 06       	cpc	r13, r17
     a54:	d8 f4       	brcc	.+54     	; 0xa8c <_ZN9NexUpload16_downloadTftFileEv+0xb0>
            {
                c = _myFile.read();
                nexSerial.write(c);
            }
        }
        this->recvRetString(string,500,true);  
     a56:	01 e0       	ldi	r16, 0x01	; 1
     a58:	24 ef       	ldi	r18, 0xF4	; 244
     a5a:	31 e0       	ldi	r19, 0x01	; 1
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	be 01       	movw	r22, r28
     a62:	6f 5f       	subi	r22, 0xFF	; 255
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	c5 01       	movw	r24, r10
     a68:	f2 dd       	rcall	.-1052   	; 0x64e <_ZN9NexUpload13recvRetStringER6Stringmb>
        if(string.indexOf(0x05) != -1)
     a6a:	65 e0       	ldi	r22, 0x05	; 5
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZNK6String7indexOfEc>
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	09 f1       	breq	.+66     	; 0xaba <_ZN9NexUpload16_downloadTftFileEv+0xde>
        { 
            string = "";
     a78:	65 e0       	ldi	r22, 0x05	; 5
     a7a:	73 e0       	ldi	r23, 0x03	; 3
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <_ZN6StringaSEPKc>
        } 
        else
        {
            return 0;
        }
         --send_timer;
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	e2 1a       	sub	r14, r18
     a88:	f1 08       	sbc	r15, r1
        {
            for(uint16_t j = 1; j <= 4096; j++)
            {
                if(j <= last_send_num)
                {
                    c = _myFile.read();
     a8a:	d8 cf       	rjmp	.-80     	; 0xa3c <_ZN9NexUpload16_downloadTftFileEv+0x60>
     a8c:	c4 01       	movw	r24, r8
                    nexSerial.write(c);
     a8e:	bb d0       	rcall	.+374    	; 0xc06 <_ZN5SDLib4File4readEv>
     a90:	68 2f       	mov	r22, r24
     a92:	8d e6       	ldi	r24, 0x6D	; 109
     a94:	96 e0       	ldi	r25, 0x06	; 6
     a96:	0e 94 35 19 	call	0x326a	; 0x326a <_ZN14HardwareSerial5writeEh>
    while(send_timer)
    {

        if(send_timer == 1)
        {
            for(uint16_t j = 1; j <= 4096; j++)
     a9a:	0f 5f       	subi	r16, 0xFF	; 255
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	d8 cf       	rjmp	.-80     	; 0xa50 <_ZN9NexUpload16_downloadTftFileEv+0x74>

        else
        {
            for(uint16_t i = 1; i <= 4096; i++)
            {
                c = _myFile.read();
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	10 e1       	ldi	r17, 0x10	; 16
     aa4:	c4 01       	movw	r24, r8
                nexSerial.write(c);
     aa6:	af d0       	rcall	.+350    	; 0xc06 <_ZN5SDLib4File4readEv>
     aa8:	68 2f       	mov	r22, r24
     aaa:	8d e6       	ldi	r24, 0x6D	; 109
     aac:	96 e0       	ldi	r25, 0x06	; 6
     aae:	0e 94 35 19 	call	0x326a	; 0x326a <_ZN14HardwareSerial5writeEh>
     ab2:	01 50       	subi	r16, 0x01	; 1
            }
        }

        else
        {
            for(uint16_t i = 1; i <= 4096; i++)
     ab4:	11 09       	sbc	r17, r1
     ab6:	b1 f7       	brne	.-20     	; 0xaa4 <_ZN9NexUpload16_downloadTftFileEv+0xc8>
        { 
            string = "";
        } 
        else
        {
            return 0;
     ab8:	ce cf       	rjmp	.-100    	; 0xa56 <_ZN9NexUpload16_downloadTftFileEv+0x7a>
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
bool NexUpload::_downloadTftFile(void)
{
    uint8_t c;
    uint16_t send_timer = 0;
    uint16_t last_send_num = 0;
    String string = String("");
     ac4:	04 c0       	rjmp	.+8      	; 0xace <_ZN9NexUpload16_downloadTftFileEv+0xf2>
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN6StringD1Ev>
        {
            return 0;
        }
         --send_timer;
    }  
}
     ace:	26 96       	adiw	r28, 0x06	; 6
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	08 95       	ret

00000af4 <_ZN9NexUpload6uploadEv>:
{
    NexUpload(file_Name.c_str(),SD_chip_select,download_baudrate);
}

void NexUpload::upload(void)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	ec 01       	movw	r28, r24
     afa:	26 e0       	ldi	r18, 0x06	; 6
     afc:	40 e8       	ldi	r20, 0x80	; 128
     afe:	55 e2       	ldi	r21, 0x25	; 37
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 ed       	ldi	r24, 0xD0	; 208
     b06:	95 e0       	ldi	r25, 0x05	; 5
     b08:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN14HardwareSerial5beginEmh>
    dbSerialBegin(9600);
    if(!_checkFile())
     b0c:	ce 01       	movw	r24, r28
     b0e:	18 dd       	rcall	.-1488   	; 0x540 <_ZN9NexUpload10_checkFileEv>
     b10:	81 11       	cpse	r24, r1
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <_ZN9NexUpload6uploadEv+0x26>
    {
        dbSerialPrintln("the file is error");
     b14:	69 ea       	ldi	r22, 0xA9	; 169
     b16:	72 e0       	ldi	r23, 0x02	; 2
        return;
    }
    if(_getBaudrate() == 0)
     b18:	1b c0       	rjmp	.+54     	; 0xb50 <_ZN9NexUpload6uploadEv+0x5c>
     b1a:	ce 01       	movw	r24, r28
     b1c:	65 de       	rcall	.-822    	; 0x7e8 <_ZN9NexUpload12_getBaudrateEv>
     b1e:	89 2b       	or	r24, r25
    {
        dbSerialPrintln("get baudrate error");
     b20:	19 f4       	brne	.+6      	; 0xb28 <_ZN9NexUpload6uploadEv+0x34>
     b22:	6b eb       	ldi	r22, 0xBB	; 187
     b24:	72 e0       	ldi	r23, 0x02	; 2
        return;
    }
    if(!_setDownloadBaudrate(_download_baudrate))
     b26:	14 c0       	rjmp	.+40     	; 0xb50 <_ZN9NexUpload6uploadEv+0x5c>
     b28:	4e a1       	ldd	r20, Y+38	; 0x26
     b2a:	5f a1       	ldd	r21, Y+39	; 0x27
     b2c:	68 a5       	ldd	r22, Y+40	; 0x28
     b2e:	79 a5       	ldd	r23, Y+41	; 0x29
     b30:	ce 01       	movw	r24, r28
     b32:	b0 de       	rcall	.-672    	; 0x894 <_ZN9NexUpload20_setDownloadBaudrateEm>
     b34:	81 11       	cpse	r24, r1
    {
        dbSerialPrintln("modify baudrate error");
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <_ZN9NexUpload6uploadEv+0x4a>
     b38:	6e ec       	ldi	r22, 0xCE	; 206
        return;
    }
    if(!_downloadTftFile())
     b3a:	72 e0       	ldi	r23, 0x02	; 2
     b3c:	09 c0       	rjmp	.+18     	; 0xb50 <_ZN9NexUpload6uploadEv+0x5c>
     b3e:	ce 01       	movw	r24, r28
     b40:	4d df       	rcall	.-358    	; 0x9dc <_ZN9NexUpload16_downloadTftFileEv>
     b42:	81 11       	cpse	r24, r1
    {
        dbSerialPrintln("download file error");
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <_ZN9NexUpload6uploadEv+0x58>
     b46:	64 ee       	ldi	r22, 0xE4	; 228
     b48:	72 e0       	ldi	r23, 0x02	; 2
        return;
    }
    dbSerialPrintln("download ok\r\n");
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <_ZN9NexUpload6uploadEv+0x5c>
     b4c:	68 ef       	ldi	r22, 0xF8	; 248
     b4e:	72 e0       	ldi	r23, 0x02	; 2
     b50:	80 ed       	ldi	r24, 0xD0	; 208
}
     b52:	95 e0       	ldi	r25, 0x05	; 5
     b54:	df 91       	pop	r29
    if(!_downloadTftFile())
    {
        dbSerialPrintln("download file error");
        return;
    }
    dbSerialPrintln("download ok\r\n");
     b56:	cf 91       	pop	r28
     b58:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <_ZN5Print7printlnEPKc>

00000b5c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	08 95       	ret

00000b62 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     b62:	08 95       	ret

00000b64 <_ZN5SDLib4File5writeEh>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	1f 92       	push	r1
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	69 83       	std	Y+1, r22	; 0x01
     b70:	dc 01       	movw	r26, r24
     b72:	ed 91       	ld	r30, X+
     b74:	fc 91       	ld	r31, X
     b76:	02 80       	ldd	r0, Z+2	; 0x02
     b78:	f3 81       	ldd	r31, Z+3	; 0x03
     b7a:	e0 2d       	mov	r30, r0
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	be 01       	movw	r22, r28
     b82:	6f 5f       	subi	r22, 0xFF	; 255
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	19 95       	eicall
     b88:	0f 90       	pop	r0
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	08 95       	ret

00000b90 <_ZN5SDLib4File5writeEPKhj>:
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
     b96:	89 8d       	ldd	r24, Y+25	; 0x19
     b98:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	39 f4       	brne	.+14     	; 0xbac <_ZN5SDLib4File5writeEPKhj+0x1c>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	9b 83       	std	Y+3, r25	; 0x03
     ba4:	8a 83       	std	Y+2, r24	; 0x02
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0b c0       	rjmp	.+22     	; 0xbc2 <_ZN5SDLib4File5writeEPKhj+0x32>
     bac:	fc 01       	movw	r30, r24
     bae:	13 82       	std	Z+3, r1	; 0x03
     bb0:	12 82       	std	Z+2, r1	; 0x02
     bb2:	0e 94 28 12 	call	0x2450	; 0x2450 <_ZN6SdFile5writeEPKvj>
     bb6:	e9 8d       	ldd	r30, Y+25	; 0x19
     bb8:	fa 8d       	ldd	r31, Y+26	; 0x1a
     bba:	22 81       	ldd	r18, Z+2	; 0x02
     bbc:	33 81       	ldd	r19, Z+3	; 0x03
     bbe:	23 2b       	or	r18, r19
     bc0:	71 f7       	brne	.-36     	; 0xb9e <_ZN5SDLib4File5writeEPKhj+0xe>
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <_ZN5SDLib4File5flushEv>:
     bc8:	fc 01       	movw	r30, r24
     bca:	81 8d       	ldd	r24, Z+25	; 0x19
     bcc:	92 8d       	ldd	r25, Z+26	; 0x1a
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	11 f0       	breq	.+4      	; 0xbd6 <_ZN5SDLib4File5flushEv+0xe>
     bd2:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <_ZN6SdFile4syncEv>
     bd6:	08 95       	ret

00000bd8 <_ZN6SdFile4readEv>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	1f 92       	push	r1
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	be 01       	movw	r22, r28
     be8:	6f 5f       	subi	r22, 0xFF	; 255
     bea:	7f 4f       	sbci	r23, 0xFF	; 255
     bec:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN6SdFile4readEPvj>
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	19 f4       	brne	.+6      	; 0xbfa <_ZN6SdFile4readEv+0x22>
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <_ZN6SdFile4readEv+0x26>
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	9f ef       	ldi	r25, 0xFF	; 255
     bfe:	0f 90       	pop	r0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <_ZN5SDLib4File4readEv>:
     c06:	fc 01       	movw	r30, r24
     c08:	81 8d       	ldd	r24, Z+25	; 0x19
     c0a:	92 8d       	ldd	r25, Z+26	; 0x1a
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	09 f0       	breq	.+2      	; 0xc12 <_ZN5SDLib4File4readEv+0xc>
     c10:	e3 cf       	rjmp	.-58     	; 0xbd8 <_ZN6SdFile4readEv>
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	9f ef       	ldi	r25, 0xFF	; 255
     c16:	08 95       	ret

00000c18 <_ZN5SDLib4File4peekEv>:
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	fc 01       	movw	r30, r24
     c22:	81 8d       	ldd	r24, Z+25	; 0x19
     c24:	92 8d       	ldd	r25, Z+26	; 0x1a
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	b1 f0       	breq	.+44     	; 0xc56 <_ZN5SDLib4File4peekEv+0x3e>
     c2a:	ef 01       	movw	r28, r30
     c2c:	d5 df       	rcall	.-86     	; 0xbd8 <_ZN6SdFile4readEv>
     c2e:	8c 01       	movw	r16, r24
     c30:	0f 3f       	cpi	r16, 0xFF	; 255
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	18 07       	cpc	r17, r24
     c36:	91 f0       	breq	.+36     	; 0xc5c <_ZN5SDLib4File4peekEv+0x44>
     c38:	89 8d       	ldd	r24, Y+25	; 0x19
     c3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c3c:	fc 01       	movw	r30, r24
     c3e:	42 85       	ldd	r20, Z+10	; 0x0a
     c40:	53 85       	ldd	r21, Z+11	; 0x0b
     c42:	64 85       	ldd	r22, Z+12	; 0x0c
     c44:	75 85       	ldd	r23, Z+13	; 0x0d
     c46:	41 50       	subi	r20, 0x01	; 1
     c48:	51 09       	sbc	r21, r1
     c4a:	61 09       	sbc	r22, r1
     c4c:	71 09       	sbc	r23, r1
     c4e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN6SdFile7seekSetEm>
     c52:	c8 01       	movw	r24, r16
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <_ZN5SDLib4File4peekEv+0x48>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <_ZN5SDLib4File4peekEv+0x48>
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	9f ef       	ldi	r25, 0xFF	; 255
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	08 95       	ret

00000c6a <_ZN5SDLib4FileC1E6SdFilePKc>:
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ec 01       	movw	r28, r24
     c78:	7b 01       	movw	r14, r22
     c7a:	8a 01       	movw	r16, r20
     c7c:	1b 82       	std	Y+3, r1	; 0x03
     c7e:	1a 82       	std	Y+2, r1	; 0x02
     c80:	88 ee       	ldi	r24, 0xE8	; 232
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	8c 83       	std	Y+4, r24	; 0x04
     c8a:	9d 83       	std	Y+5, r25	; 0x05
     c8c:	ae 83       	std	Y+6, r26	; 0x06
     c8e:	bf 83       	std	Y+7, r27	; 0x07
     c90:	8a e0       	ldi	r24, 0x0A	; 10
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	99 83       	std	Y+1, r25	; 0x01
     c96:	88 83       	st	Y, r24
     c98:	8d e1       	ldi	r24, 0x1D	; 29
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <malloc>
     ca0:	9a 8f       	std	Y+26, r25	; 0x1a
     ca2:	89 8f       	std	Y+25, r24	; 0x19
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	79 f0       	breq	.+30     	; 0xcc6 <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
     ca8:	2d e1       	ldi	r18, 0x1D	; 29
     caa:	f7 01       	movw	r30, r14
     cac:	dc 01       	movw	r26, r24
     cae:	01 90       	ld	r0, Z+
     cb0:	0d 92       	st	X+, r0
     cb2:	2a 95       	dec	r18
     cb4:	e1 f7       	brne	.-8      	; 0xcae <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
     cb6:	4c e0       	ldi	r20, 0x0C	; 12
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	b8 01       	movw	r22, r16
     cbc:	ce 01       	movw	r24, r28
     cbe:	0c 96       	adiw	r24, 0x0c	; 12
     cc0:	0e 94 9b 20 	call	0x4136	; 0x4136 <strncpy>
     cc4:	18 8e       	std	Y+24, r1	; 0x18
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	08 95       	ret

00000cd4 <_ZN5SDLib4FileC1Ev>:
     cd4:	fc 01       	movw	r30, r24
     cd6:	13 82       	std	Z+3, r1	; 0x03
     cd8:	12 82       	std	Z+2, r1	; 0x02
     cda:	88 ee       	ldi	r24, 0xE8	; 232
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	84 83       	std	Z+4, r24	; 0x04
     ce4:	95 83       	std	Z+5, r25	; 0x05
     ce6:	a6 83       	std	Z+6, r26	; 0x06
     ce8:	b7 83       	std	Z+7, r27	; 0x07
     cea:	8a e0       	ldi	r24, 0x0A	; 10
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24
     cf2:	12 8e       	std	Z+26, r1	; 0x1a
     cf4:	11 8e       	std	Z+25, r1	; 0x19
     cf6:	14 86       	std	Z+12, r1	; 0x0c
     cf8:	08 95       	ret

00000cfa <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
     cfa:	dc 01       	movw	r26, r24
     cfc:	59 96       	adiw	r26, 0x19	; 25
     cfe:	ed 91       	ld	r30, X+
     d00:	fc 91       	ld	r31, X
     d02:	5a 97       	sbiw	r26, 0x1a	; 26
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	29 f0       	breq	.+10     	; 0xd12 <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
     d08:	62 85       	ldd	r22, Z+10	; 0x0a
     d0a:	73 85       	ldd	r23, Z+11	; 0x0b
     d0c:	84 85       	ldd	r24, Z+12	; 0x0c
     d0e:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
     d10:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
     d12:	6f ef       	ldi	r22, 0xFF	; 255
     d14:	7f ef       	ldi	r23, 0xFF	; 255
     d16:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
     d18:	08 95       	ret

00000d1a <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
     d1a:	dc 01       	movw	r26, r24
     d1c:	59 96       	adiw	r26, 0x19	; 25
     d1e:	ed 91       	ld	r30, X+
     d20:	fc 91       	ld	r31, X
     d22:	5a 97       	sbiw	r26, 0x1a	; 26
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	29 f0       	breq	.+10     	; 0xd32 <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
     d28:	63 89       	ldd	r22, Z+19	; 0x13
     d2a:	74 89       	ldd	r23, Z+20	; 0x14
     d2c:	85 89       	ldd	r24, Z+21	; 0x15
     d2e:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
     d30:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
     d38:	08 95       	ret

00000d3a <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
     d3a:	cf 92       	push	r12
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
  if (! _file) return 0;
     d46:	fc 01       	movw	r30, r24
     d48:	21 8d       	ldd	r18, Z+25	; 0x19
     d4a:	32 8d       	ldd	r19, Z+26	; 0x1a
     d4c:	23 2b       	or	r18, r19
     d4e:	c9 f0       	breq	.+50     	; 0xd82 <_ZN5SDLib4File9availableEv+0x48>

  uint32_t n = size() - position();
     d50:	ec 01       	movw	r28, r24
     d52:	e3 df       	rcall	.-58     	; 0xd1a <_ZN5SDLib4File4sizeEv>
     d54:	6b 01       	movw	r12, r22
     d56:	7c 01       	movw	r14, r24
     d58:	ce 01       	movw	r24, r28

  return n > 0X7FFF ? 0X7FFF : n;
     d5a:	cf df       	rcall	.-98     	; 0xcfa <_ZN5SDLib4File8positionEv>
     d5c:	a7 01       	movw	r20, r14
     d5e:	96 01       	movw	r18, r12
     d60:	26 1b       	sub	r18, r22
     d62:	37 0b       	sbc	r19, r23
     d64:	48 0b       	sbc	r20, r24
     d66:	59 0b       	sbc	r21, r25
     d68:	da 01       	movw	r26, r20
     d6a:	c9 01       	movw	r24, r18
     d6c:	81 15       	cp	r24, r1
     d6e:	30 e8       	ldi	r19, 0x80	; 128
     d70:	93 07       	cpc	r25, r19
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	38 f0       	brcs	.+14     	; 0xd86 <_ZN5SDLib4File9availableEv+0x4c>
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	9f e7       	ldi	r25, 0x7F	; 127
     d7c:	a0 e0       	ldi	r26, 0x00	; 0
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <_ZN5SDLib4File9availableEv+0x4c>
     d82:	80 e0       	ldi	r24, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	08 95       	ret

00000d94 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	6d 97       	sbiw	r28, 0x1d	; 29
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	ab 01       	movw	r20, r22
     dac:	1c 82       	std	Y+4, r1	; 0x04
     dae:	1b 82       	std	Y+3, r1	; 0x03
     db0:	2e e1       	ldi	r18, 0x1E	; 30
     db2:	33 e0       	ldi	r19, 0x03	; 3
     db4:	3a 83       	std	Y+2, r19	; 0x02
     db6:	29 83       	std	Y+1, r18	; 0x01
     db8:	1e 82       	std	Y+6, r1	; 0x06
     dba:	21 e0       	ldi	r18, 0x01	; 1
     dbc:	bc 01       	movw	r22, r24
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN6SdFile4openEPS_PKch>
     dc6:	11 e0       	ldi	r17, 0x01	; 1
     dc8:	81 11       	cpse	r24, r1
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x3c>
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	04 c0       	rjmp	.+8      	; 0xdd8 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x44>
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN6SdFile5closeEv>
     dd8:	81 2f       	mov	r24, r17
     dda:	6d 96       	adiw	r28, 0x1d	; 29
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	08 95       	ret

00000dee <_ZN8SdVolume4initEP7Sd2Card>:
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	ec 01       	movw	r28, r24
     df8:	8b 01       	movw	r16, r22
     dfa:	41 e0       	ldi	r20, 0x01	; 1
     dfc:	0e 94 56 17 	call	0x2eac	; 0x2eac <_ZN8SdVolume4initEP7Sd2Cardh>
     e00:	81 11       	cpse	r24, r1
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <_ZN8SdVolume4initEP7Sd2Card+0x28>
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	b8 01       	movw	r22, r16
     e08:	ce 01       	movw	r24, r28
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <_ZN8SdVolume4initEP7Sd2Cardh>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	da 01       	movw	r26, r20
     e30:	eb 01       	movw	r28, r22
     e32:	28 81       	ld	r18, Y
     e34:	39 81       	ldd	r19, Y+1	; 0x01
     e36:	fc 01       	movw	r30, r24
     e38:	e2 0f       	add	r30, r18
     e3a:	f3 1f       	adc	r31, r19
     e3c:	40 81       	ld	r20, Z
     e3e:	4f 32       	cpi	r20, 0x2F	; 47
     e40:	11 f4       	brne	.+4      	; 0xe46 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x24>
     e42:	2f 5f       	subi	r18, 0xFF	; 255
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	8c 01       	movw	r16, r24
     e48:	02 0f       	add	r16, r18
     e4a:	13 1f       	adc	r17, r19
     e4c:	7d 01       	movw	r14, r26
     e4e:	e0 e0       	ldi	r30, 0x00	; 0
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	e8 01       	movw	r28, r16
     e54:	59 91       	ld	r21, Y+
     e56:	8e 01       	movw	r16, r28
     e58:	5f 32       	cpi	r21, 0x2F	; 47
     e5a:	59 f0       	breq	.+22     	; 0xe72 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x50>
     e5c:	55 23       	and	r21, r21
     e5e:	49 f0       	breq	.+18     	; 0xe72 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x50>
     e60:	31 96       	adiw	r30, 0x01	; 1
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	e7 01       	movw	r28, r14
     e68:	59 93       	st	Y+, r21
     e6a:	7e 01       	movw	r14, r28
     e6c:	ec 30       	cpi	r30, 0x0C	; 12
     e6e:	f1 05       	cpc	r31, r1
     e70:	81 f7       	brne	.-32     	; 0xe52 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x30>
     e72:	ea 0f       	add	r30, r26
     e74:	fb 1f       	adc	r31, r27
     e76:	10 82       	st	Z, r1
     e78:	fc 01       	movw	r30, r24
     e7a:	e2 0f       	add	r30, r18
     e7c:	f3 1f       	adc	r31, r19
     e7e:	40 81       	ld	r20, Z
     e80:	4f 32       	cpi	r20, 0x2F	; 47
     e82:	11 f4       	brne	.+4      	; 0xe88 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x66>
     e84:	2f 5f       	subi	r18, 0xFF	; 255
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	fb 01       	movw	r30, r22
     e8a:	31 83       	std	Z+1, r19	; 0x01
     e8c:	20 83       	st	Z, r18
     e8e:	fc 01       	movw	r30, r24
     e90:	e2 0f       	add	r30, r18
     e92:	f3 1f       	adc	r31, r19
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 81       	ld	r25, Z
     e98:	91 11       	cpse	r25, r1
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x7c>
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	08 95       	ret

00000eac <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
     eac:	4f 92       	push	r4
     eae:	5f 92       	push	r5
     eb0:	6f 92       	push	r6
     eb2:	7f 92       	push	r7
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	c9 54       	subi	r28, 0x49	; 73
     ed2:	d1 09       	sbc	r29, r1
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	5c 01       	movw	r10, r24
     ee0:	6b 01       	movw	r12, r22
     ee2:	3a 01       	movw	r6, r20
     ee4:	49 01       	movw	r8, r18
     ee6:	19 a2       	std	Y+33, r1	; 0x21
     ee8:	18 a2       	std	Y+32, r1	; 0x20
     eea:	8e e1       	ldi	r24, 0x1E	; 30
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	9f 8f       	std	Y+31, r25	; 0x1f
     ef0:	8e 8f       	std	Y+30, r24	; 0x1e
     ef2:	1b a2       	std	Y+35, r1	; 0x23
     ef4:	1c 82       	std	Y+4, r1	; 0x04
     ef6:	1b 82       	std	Y+3, r1	; 0x03
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	1e 82       	std	Y+6, r1	; 0x06
     efe:	2a 96       	adiw	r28, 0x0a	; 10
     f00:	1f ae       	std	Y+63, r1	; 0x3f
     f02:	1e ae       	std	Y+62, r1	; 0x3e
     f04:	2a 97       	sbiw	r28, 0x0a	; 10
     f06:	8b 01       	movw	r16, r22
     f08:	7e 01       	movw	r14, r28
     f0a:	8e e1       	ldi	r24, 0x1E	; 30
     f0c:	e8 0e       	add	r14, r24
     f0e:	f1 1c       	adc	r15, r1
     f10:	44 24       	eor	r4, r4
     f12:	43 94       	inc	r4
     f14:	ae 01       	movw	r20, r28
     f16:	45 5c       	subi	r20, 0xC5	; 197
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	be 01       	movw	r22, r28
     f1c:	68 5b       	subi	r22, 0xB8	; 184
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	c5 01       	movw	r24, r10
     f22:	7f df       	rcall	.-258    	; 0xe22 <_ZN5SDLib20getNextPathComponentEPKcPjPc>
     f24:	58 2e       	mov	r5, r24
     f26:	48 2f       	mov	r20, r24
     f28:	44 25       	eor	r20, r4
     f2a:	94 01       	movw	r18, r8
     f2c:	be 01       	movw	r22, r28
     f2e:	65 5c       	subi	r22, 0xC5	; 197
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	c8 01       	movw	r24, r16
     f34:	f3 01       	movw	r30, r6
     f36:	19 95       	eicall
     f38:	81 11       	cpse	r24, r1
     f3a:	08 c0       	rjmp	.+16     	; 0xf4c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xa0>
     f3c:	0c 15       	cp	r16, r12
     f3e:	1d 05       	cpc	r17, r13
     f40:	19 f0       	breq	.+6      	; 0xf48 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9c>
     f42:	c8 01       	movw	r24, r16
     f44:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN6SdFile5closeEv>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	27 c0       	rjmp	.+78     	; 0xf9a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
     f4c:	55 20       	and	r5, r5
     f4e:	b9 f0       	breq	.+46     	; 0xf7e <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd2>
     f50:	21 e0       	ldi	r18, 0x01	; 1
     f52:	ae 01       	movw	r20, r28
     f54:	45 5c       	subi	r20, 0xC5	; 197
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	b8 01       	movw	r22, r16
     f5a:	c7 01       	movw	r24, r14
     f5c:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN6SdFile4openEPS_PKch>
     f60:	58 2e       	mov	r5, r24
     f62:	0c 15       	cp	r16, r12
     f64:	1d 05       	cpc	r17, r13
     f66:	99 f0       	breq	.+38     	; 0xf8e <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe2>
     f68:	c8 01       	movw	r24, r16
     f6a:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN6SdFile5closeEv>
     f6e:	55 20       	and	r5, r5
     f70:	59 f3       	breq	.-42     	; 0xf48 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9c>
     f72:	90 2f       	mov	r25, r16
     f74:	81 2f       	mov	r24, r17
     f76:	87 01       	movw	r16, r14
     f78:	e9 2e       	mov	r14, r25
     f7a:	f8 2e       	mov	r15, r24
     f7c:	cb cf       	rjmp	.-106    	; 0xf14 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x68>
     f7e:	0c 15       	cp	r16, r12
     f80:	1d 05       	cpc	r17, r13
     f82:	19 f0       	breq	.+6      	; 0xf8a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xde>
     f84:	c8 01       	movw	r24, r16
     f86:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN6SdFile5closeEv>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
     f8e:	88 23       	and	r24, r24
     f90:	d9 f2       	breq	.-74     	; 0xf48 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9c>
     f92:	8e 01       	movw	r16, r28
     f94:	0f 5f       	subi	r16, 0xFF	; 255
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	ec cf       	rjmp	.-40     	; 0xf72 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xc6>
     f9a:	c7 5b       	subi	r28, 0xB7	; 183
     f9c:	df 4f       	sbci	r29, 0xFF	; 255
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	9f 90       	pop	r9
     fbe:	8f 90       	pop	r8
     fc0:	7f 90       	pop	r7
     fc2:	6f 90       	pop	r6
     fc4:	5f 90       	pop	r5
     fc6:	4f 90       	pop	r4
     fc8:	08 95       	ret

00000fca <_ZN5SDLib7SDClass5beginEh>:
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
     fd4:	46 2f       	mov	r20, r22
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	f6 d2       	rcall	.+1516   	; 0x15c6 <_ZN7Sd2Card4initEhh>
     fda:	88 23       	and	r24, r24
     fdc:	79 f0       	breq	.+30     	; 0xffc <_ZN5SDLib7SDClass5beginEh+0x32>
     fde:	8e 01       	movw	r16, r28
     fe0:	04 5f       	subi	r16, 0xF4	; 244
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	be 01       	movw	r22, r28
     fe6:	c8 01       	movw	r24, r16
     fe8:	02 df       	rcall	.-508    	; 0xdee <_ZN8SdVolume4initEP7Sd2Card>
     fea:	88 23       	and	r24, r24
     fec:	39 f0       	breq	.+14     	; 0xffc <_ZN5SDLib7SDClass5beginEh+0x32>
     fee:	b8 01       	movw	r22, r16
     ff0:	ce 01       	movw	r24, r28
     ff2:	8a 96       	adiw	r24, 0x2a	; 42
     ff4:	b4 d5       	rcall	.+2920   	; 0x1b5e <_ZN6SdFile8openRootEP8SdVolume>
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	81 11       	cpse	r24, r1
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <_ZN5SDLib7SDClass5beginEh+0x34>
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	89 2f       	mov	r24, r25
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <_ZN6SdFileC1ERKS_>:
    100a:	fc 01       	movw	r30, r24
    100c:	db 01       	movw	r26, r22
    100e:	12 96       	adiw	r26, 0x02	; 2
    1010:	8d 91       	ld	r24, X+
    1012:	9c 91       	ld	r25, X
    1014:	13 97       	sbiw	r26, 0x03	; 3
    1016:	93 83       	std	Z+3, r25	; 0x03
    1018:	82 83       	std	Z+2, r24	; 0x02
    101a:	8e e1       	ldi	r24, 0x1E	; 30
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	80 83       	st	Z, r24
    1022:	14 96       	adiw	r26, 0x04	; 4
    1024:	8c 91       	ld	r24, X
    1026:	14 97       	sbiw	r26, 0x04	; 4
    1028:	84 83       	std	Z+4, r24	; 0x04
    102a:	15 96       	adiw	r26, 0x05	; 5
    102c:	8c 91       	ld	r24, X
    102e:	15 97       	sbiw	r26, 0x05	; 5
    1030:	85 83       	std	Z+5, r24	; 0x05
    1032:	16 96       	adiw	r26, 0x06	; 6
    1034:	4d 91       	ld	r20, X+
    1036:	5d 91       	ld	r21, X+
    1038:	6d 91       	ld	r22, X+
    103a:	7c 91       	ld	r23, X
    103c:	19 97       	sbiw	r26, 0x09	; 9
    103e:	46 83       	std	Z+6, r20	; 0x06
    1040:	57 83       	std	Z+7, r21	; 0x07
    1042:	60 87       	std	Z+8, r22	; 0x08
    1044:	71 87       	std	Z+9, r23	; 0x09
    1046:	1a 96       	adiw	r26, 0x0a	; 10
    1048:	4d 91       	ld	r20, X+
    104a:	5d 91       	ld	r21, X+
    104c:	6d 91       	ld	r22, X+
    104e:	7c 91       	ld	r23, X
    1050:	1d 97       	sbiw	r26, 0x0d	; 13
    1052:	42 87       	std	Z+10, r20	; 0x0a
    1054:	53 87       	std	Z+11, r21	; 0x0b
    1056:	64 87       	std	Z+12, r22	; 0x0c
    1058:	75 87       	std	Z+13, r23	; 0x0d
    105a:	1e 96       	adiw	r26, 0x0e	; 14
    105c:	4d 91       	ld	r20, X+
    105e:	5d 91       	ld	r21, X+
    1060:	6d 91       	ld	r22, X+
    1062:	7c 91       	ld	r23, X
    1064:	51 97       	sbiw	r26, 0x11	; 17
    1066:	46 87       	std	Z+14, r20	; 0x0e
    1068:	57 87       	std	Z+15, r21	; 0x0f
    106a:	60 8b       	std	Z+16, r22	; 0x10
    106c:	71 8b       	std	Z+17, r23	; 0x11
    106e:	52 96       	adiw	r26, 0x12	; 18
    1070:	8c 91       	ld	r24, X
    1072:	52 97       	sbiw	r26, 0x12	; 18
    1074:	82 8b       	std	Z+18, r24	; 0x12
    1076:	53 96       	adiw	r26, 0x13	; 19
    1078:	4d 91       	ld	r20, X+
    107a:	5d 91       	ld	r21, X+
    107c:	6d 91       	ld	r22, X+
    107e:	7c 91       	ld	r23, X
    1080:	56 97       	sbiw	r26, 0x16	; 22
    1082:	43 8b       	std	Z+19, r20	; 0x13
    1084:	54 8b       	std	Z+20, r21	; 0x14
    1086:	65 8b       	std	Z+21, r22	; 0x15
    1088:	76 8b       	std	Z+22, r23	; 0x16
    108a:	57 96       	adiw	r26, 0x17	; 23
    108c:	4d 91       	ld	r20, X+
    108e:	5d 91       	ld	r21, X+
    1090:	6d 91       	ld	r22, X+
    1092:	7c 91       	ld	r23, X
    1094:	5a 97       	sbiw	r26, 0x1a	; 26
    1096:	47 8b       	std	Z+23, r20	; 0x17
    1098:	50 8f       	std	Z+24, r21	; 0x18
    109a:	61 8f       	std	Z+25, r22	; 0x19
    109c:	72 8f       	std	Z+26, r23	; 0x1a
    109e:	5b 96       	adiw	r26, 0x1b	; 27
    10a0:	8d 91       	ld	r24, X+
    10a2:	9c 91       	ld	r25, X
    10a4:	5c 97       	sbiw	r26, 0x1c	; 28
    10a6:	94 8f       	std	Z+28, r25	; 0x1c
    10a8:	83 8f       	std	Z+27, r24	; 0x1b
    10aa:	08 95       	ret

000010ac <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    10ac:	4f 92       	push	r4
    10ae:	5f 92       	push	r5
    10b0:	6f 92       	push	r6
    10b2:	7f 92       	push	r7
    10b4:	8f 92       	push	r8
    10b6:	9f 92       	push	r9
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	c7 54       	subi	r28, 0x47	; 71
    10d2:	d1 09       	sbc	r29, r1
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	5c 01       	movw	r10, r24
    10e0:	4a 01       	movw	r8, r20
    10e2:	39 01       	movw	r6, r18
    10e4:	66 5d       	subi	r22, 0xD6	; 214
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	6e 01       	movw	r12, r28
    10ea:	8e e1       	ldi	r24, 0x1E	; 30
    10ec:	c8 0e       	add	r12, r24
    10ee:	d1 1c       	adc	r13, r1
    10f0:	c6 01       	movw	r24, r12
    10f2:	8b df       	rcall	.-234    	; 0x100a <_ZN6SdFileC1ERKS_>
    10f4:	1c 82       	std	Y+4, r1	; 0x04
    10f6:	1b 82       	std	Y+3, r1	; 0x03
    10f8:	8e e1       	ldi	r24, 0x1E	; 30
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	1e 82       	std	Y+6, r1	; 0x06
    1102:	74 01       	movw	r14, r8
    1104:	8e 01       	movw	r16, r28
    1106:	0f 5f       	subi	r16, 0xFF	; 255
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	5c 2c       	mov	r5, r12
    110c:	4d 2c       	mov	r4, r13
    110e:	6f e2       	ldi	r22, 0x2F	; 47
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	c7 01       	movw	r24, r14
    1114:	0e 94 89 20 	call	0x4112	; 0x4112 <strchr>
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	09 f4       	brne	.+2      	; 0x111e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x72>
    111c:	41 c0       	rjmp	.+130    	; 0x11a0 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf4>
    111e:	f7 01       	movw	r30, r14
    1120:	20 81       	ld	r18, Z
    1122:	2f 32       	cpi	r18, 0x2F	; 47
    1124:	71 f4       	brne	.+28     	; 0x1142 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    1126:	ff ef       	ldi	r31, 0xFF	; 255
    1128:	ef 1a       	sub	r14, r31
    112a:	ff 0a       	sbc	r15, r31
    112c:	90 2f       	mov	r25, r16
    112e:	81 2f       	mov	r24, r17
    1130:	05 2d       	mov	r16, r5
    1132:	14 2d       	mov	r17, r4
    1134:	2c 01       	movw	r4, r24
    1136:	c2 01       	movw	r24, r4
    1138:	50 2e       	mov	r5, r16
    113a:	41 2e       	mov	r4, r17
    113c:	09 2f       	mov	r16, r25
    113e:	18 2f       	mov	r17, r24
    1140:	e6 cf       	rjmp	.-52     	; 0x110e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x62>
    1142:	8e 19       	sub	r24, r14
    1144:	8d 30       	cpi	r24, 0x0D	; 13
    1146:	08 f0       	brcs	.+2      	; 0x114a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x9e>
    1148:	8c e0       	ldi	r24, 0x0C	; 12
    114a:	c8 2e       	mov	r12, r24
    114c:	d1 2c       	mov	r13, r1
    114e:	a6 01       	movw	r20, r12
    1150:	b7 01       	movw	r22, r14
    1152:	ce 01       	movw	r24, r28
    1154:	cb 96       	adiw	r24, 0x3b	; 59
    1156:	0e 94 9b 20 	call	0x4136	; 0x4136 <strncpy>
    115a:	eb e3       	ldi	r30, 0x3B	; 59
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	ec 0f       	add	r30, r28
    1160:	fd 1f       	adc	r31, r29
    1162:	ec 0d       	add	r30, r12
    1164:	fd 1d       	adc	r31, r13
    1166:	10 82       	st	Z, r1
    1168:	c8 01       	movw	r24, r16
    116a:	6e d7       	rcall	.+3804   	; 0x2048 <_ZN6SdFile5closeEv>
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	ae 01       	movw	r20, r28
    1170:	45 5c       	subi	r20, 0xC5	; 197
    1172:	5f 4f       	sbci	r21, 0xFF	; 255
    1174:	65 2d       	mov	r22, r5
    1176:	74 2d       	mov	r23, r4
    1178:	c8 01       	movw	r24, r16
    117a:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN6SdFile4openEPS_PKch>
    117e:	81 11       	cpse	r24, r1
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe8>
    1182:	f5 01       	movw	r30, r10
    1184:	13 82       	std	Z+3, r1	; 0x03
    1186:	12 82       	std	Z+2, r1	; 0x02
    1188:	8e e1       	ldi	r24, 0x1E	; 30
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	80 83       	st	Z, r24
    1190:	15 82       	std	Z+5, r1	; 0x05
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x106>
    1194:	ec 0c       	add	r14, r12
    1196:	fd 1c       	adc	r15, r13
    1198:	85 2d       	mov	r24, r5
    119a:	94 2d       	mov	r25, r4
    119c:	55 d7       	rcall	.+3754   	; 0x2048 <_ZN6SdFile5closeEv>
    119e:	cb cf       	rjmp	.-106    	; 0x1136 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8a>
    11a0:	e8 18       	sub	r14, r8
    11a2:	f9 08       	sbc	r15, r9
    11a4:	f3 01       	movw	r30, r6
    11a6:	f1 82       	std	Z+1, r15	; 0x01
    11a8:	e0 82       	st	Z, r14
    11aa:	65 2d       	mov	r22, r5
    11ac:	74 2d       	mov	r23, r4
    11ae:	c5 01       	movw	r24, r10
    11b0:	2c df       	rcall	.-424    	; 0x100a <_ZN6SdFileC1ERKS_>
    11b2:	c5 01       	movw	r24, r10
    11b4:	c9 5b       	subi	r28, 0xB9	; 185
    11b6:	df 4f       	sbci	r29, 0xFF	; 255
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	cf 90       	pop	r12
    11d2:	bf 90       	pop	r11
    11d4:	af 90       	pop	r10
    11d6:	9f 90       	pop	r9
    11d8:	8f 90       	pop	r8
    11da:	7f 90       	pop	r7
    11dc:	6f 90       	pop	r6
    11de:	5f 90       	pop	r5
    11e0:	4f 90       	pop	r4
    11e2:	08 95       	ret

000011e4 <_ZN5SDLib7SDClass4openEPKch>:
    11e4:	af 92       	push	r10
    11e6:	bf 92       	push	r11
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	c9 55       	subi	r28, 0x59	; 89
    11fc:	d1 09       	sbc	r29, r1
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	6c 01       	movw	r12, r24
    120a:	5b 01       	movw	r10, r22
    120c:	8a 01       	movw	r16, r20
    120e:	f2 2e       	mov	r15, r18
    1210:	9e 01       	movw	r18, r28
    1212:	28 5a       	subi	r18, 0xA8	; 168
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	ce 01       	movw	r24, r28
    1218:	cb 96       	adiw	r24, 0x3b	; 59
    121a:	48 df       	rcall	.-368    	; 0x10ac <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    121c:	6a 96       	adiw	r28, 0x1a	; 26
    121e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1220:	9f ad       	ldd	r25, Y+63	; 0x3f
    1222:	6a 97       	sbiw	r28, 0x1a	; 26
    1224:	08 0f       	add	r16, r24
    1226:	19 1f       	adc	r17, r25
    1228:	f8 01       	movw	r30, r16
    122a:	80 81       	ld	r24, Z
    122c:	81 11       	cpse	r24, r1
    122e:	09 c0       	rjmp	.+18     	; 0x1242 <_ZN5SDLib7SDClass4openEPKch+0x5e>
    1230:	be 01       	movw	r22, r28
    1232:	65 5c       	subi	r22, 0xC5	; 197
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	e7 de       	rcall	.-562    	; 0x100a <_ZN6SdFileC1ERKS_>
    123c:	48 e1       	ldi	r20, 0x18	; 24
    123e:	53 e0       	ldi	r21, 0x03	; 3
    1240:	3c c0       	rjmp	.+120    	; 0x12ba <_ZN5SDLib7SDClass4openEPKch+0xd6>
    1242:	19 a2       	std	Y+33, r1	; 0x21
    1244:	18 a2       	std	Y+32, r1	; 0x20
    1246:	8e e1       	ldi	r24, 0x1E	; 30
    1248:	93 e0       	ldi	r25, 0x03	; 3
    124a:	9f 8f       	std	Y+31, r25	; 0x1f
    124c:	8e 8f       	std	Y+30, r24	; 0x1e
    124e:	1b a2       	std	Y+35, r1	; 0x23
    1250:	21 96       	adiw	r28, 0x01	; 1
    1252:	8f ad       	ldd	r24, Y+63	; 0x3f
    1254:	21 97       	sbiw	r28, 0x01	; 1
    1256:	81 11       	cpse	r24, r1
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <_ZN5SDLib7SDClass4openEPKch+0x7c>
    125a:	c6 01       	movw	r24, r12
    125c:	3b dd       	rcall	.-1418   	; 0xcd4 <_ZN5SDLib4FileC1Ev>
    125e:	32 c0       	rjmp	.+100    	; 0x12c4 <_ZN5SDLib7SDClass4openEPKch+0xe0>
    1260:	82 50       	subi	r24, 0x02	; 2
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	60 f4       	brcc	.+24     	; 0x127e <_ZN5SDLib7SDClass4openEPKch+0x9a>
    1266:	b5 01       	movw	r22, r10
    1268:	66 5d       	subi	r22, 0xD6	; 214
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	2f 2d       	mov	r18, r15
    126e:	a8 01       	movw	r20, r16
    1270:	ce 01       	movw	r24, r28
    1272:	4e 96       	adiw	r24, 0x1e	; 30
    1274:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN6SdFile4openEPS_PKch>
    1278:	81 11       	cpse	r24, r1
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <_ZN5SDLib7SDClass4openEPKch+0xb4>
    127c:	ee cf       	rjmp	.-36     	; 0x125a <_ZN5SDLib7SDClass4openEPKch+0x76>
    127e:	2f 2d       	mov	r18, r15
    1280:	a8 01       	movw	r20, r16
    1282:	be 01       	movw	r22, r28
    1284:	65 5c       	subi	r22, 0xC5	; 197
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	ce 01       	movw	r24, r28
    128a:	4e 96       	adiw	r24, 0x1e	; 30
    128c:	fb d7       	rcall	.+4086   	; 0x2284 <_ZN6SdFile4openEPS_PKch>
    128e:	88 23       	and	r24, r24
    1290:	21 f3       	breq	.-56     	; 0x125a <_ZN5SDLib7SDClass4openEPKch+0x76>
    1292:	ce 01       	movw	r24, r28
    1294:	cb 96       	adiw	r24, 0x3b	; 59
    1296:	d8 d6       	rcall	.+3504   	; 0x2048 <_ZN6SdFile5closeEv>
    1298:	8f 2d       	mov	r24, r15
    129a:	86 70       	andi	r24, 0x06	; 6
    129c:	39 f0       	breq	.+14     	; 0x12ac <_ZN5SDLib7SDClass4openEPKch+0xc8>
    129e:	49 a9       	ldd	r20, Y+49	; 0x31
    12a0:	5a a9       	ldd	r21, Y+50	; 0x32
    12a2:	6b a9       	ldd	r22, Y+51	; 0x33
    12a4:	7c a9       	ldd	r23, Y+52	; 0x34
    12a6:	ce 01       	movw	r24, r28
    12a8:	4e 96       	adiw	r24, 0x1e	; 30
    12aa:	f3 d5       	rcall	.+3046   	; 0x1e92 <_ZN6SdFile7seekSetEm>
    12ac:	be 01       	movw	r22, r28
    12ae:	62 5e       	subi	r22, 0xE2	; 226
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	a9 de       	rcall	.-686    	; 0x100a <_ZN6SdFileC1ERKS_>
    12b8:	a8 01       	movw	r20, r16
    12ba:	be 01       	movw	r22, r28
    12bc:	6f 5f       	subi	r22, 0xFF	; 255
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	c6 01       	movw	r24, r12
    12c2:	d3 dc       	rcall	.-1626   	; 0xc6a <_ZN5SDLib4FileC1E6SdFilePKc>
    12c4:	c6 01       	movw	r24, r12
    12c6:	c7 5a       	subi	r28, 0xA7	; 167
    12c8:	df 4f       	sbci	r29, 0xFF	; 255
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	df 90       	pop	r13
    12e0:	cf 90       	pop	r12
    12e2:	bf 90       	pop	r11
    12e4:	af 90       	pop	r10
    12e6:	08 95       	ret

000012e8 <_ZN5SDLib7SDClass6existsEPKc>:
    12e8:	fb 01       	movw	r30, r22
    12ea:	bc 01       	movw	r22, r24
    12ec:	66 5d       	subi	r22, 0xD6	; 214
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	4a ec       	ldi	r20, 0xCA	; 202
    12f6:	56 e0       	ldi	r21, 0x06	; 6
    12f8:	cf 01       	movw	r24, r30
    12fa:	d8 cd       	rjmp	.-1104   	; 0xeac <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>

000012fc <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    12fc:	e7 e7       	ldi	r30, 0x77	; 119
    12fe:	f3 e0       	ldi	r31, 0x03	; 3
    1300:	15 82       	std	Z+5, r1	; 0x05
    1302:	16 82       	std	Z+6, r1	; 0x06
    1304:	11 86       	std	Z+9, r1	; 0x09
    1306:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e0       	ldi	r26, 0x00	; 0
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	84 87       	std	Z+12, r24	; 0x0c
    1312:	95 87       	std	Z+13, r25	; 0x0d
    1314:	a6 87       	std	Z+14, r26	; 0x0e
    1316:	b7 87       	std	Z+15, r27	; 0x0f
    1318:	13 a2       	std	Z+35, r1	; 0x23
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    131a:	15 a6       	std	Z+45, r1	; 0x2d
    131c:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    131e:	8e e1       	ldi	r24, 0x1E	; 30
    1320:	93 e0       	ldi	r25, 0x03	; 3
    1322:	93 a7       	std	Z+43, r25	; 0x2b
    1324:	82 a7       	std	Z+42, r24	; 0x2a
    1326:	17 a6       	std	Z+47, r1	; 0x2f
    1328:	08 95       	ret

0000132a <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    132a:	9f b7       	in	r25, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
    1332:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <_ZN8SPIClass13interruptSaveE>
    1336:	21 30       	cpi	r18, 0x01	; 1
    1338:	19 f4       	brne	.+6      	; 0x1340 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    133a:	8d bb       	out	0x1d, r24	; 29
    133c:	9f bf       	out	0x3f, r25	; 63
    133e:	08 95       	ret
    1340:	8f bf       	out	0x3f, r24	; 63
    1342:	08 95       	ret

00001344 <_ZN11SPISettingsC1Emhh>:
    1344:	0f 93       	push	r16
    1346:	fc 01       	movw	r30, r24
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	92 e1       	ldi	r25, 0x12	; 18
    134c:	aa e7       	ldi	r26, 0x7A	; 122
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	48 17       	cp	r20, r24
    1354:	59 07       	cpc	r21, r25
    1356:	6a 07       	cpc	r22, r26
    1358:	7b 07       	cpc	r23, r27
    135a:	40 f4       	brcc	.+16     	; 0x136c <_ZN11SPISettingsC1Emhh+0x28>
    135c:	b6 95       	lsr	r27
    135e:	a7 95       	ror	r26
    1360:	97 95       	ror	r25
    1362:	87 95       	ror	r24
    1364:	3f 5f       	subi	r19, 0xFF	; 255
    1366:	36 30       	cpi	r19, 0x06	; 6
    1368:	a1 f7       	brne	.-24     	; 0x1352 <_ZN11SPISettingsC1Emhh+0xe>
    136a:	37 e0       	ldi	r19, 0x07	; 7
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	93 27       	eor	r25, r19
    1370:	22 23       	and	r18, r18
    1372:	11 f0       	breq	.+4      	; 0x1378 <_ZN11SPISettingsC1Emhh+0x34>
    1374:	20 e5       	ldi	r18, 0x50	; 80
    1376:	01 c0       	rjmp	.+2      	; 0x137a <_ZN11SPISettingsC1Emhh+0x36>
    1378:	20 e7       	ldi	r18, 0x70	; 112
    137a:	0c 70       	andi	r16, 0x0C	; 12
    137c:	89 2f       	mov	r24, r25
    137e:	86 95       	lsr	r24
    1380:	08 2b       	or	r16, r24
    1382:	02 2b       	or	r16, r18
    1384:	00 83       	st	Z, r16
    1386:	91 70       	andi	r25, 0x01	; 1
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <_ZN8SPIClass16beginTransactionE11SPISettings>:
    138e:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
    1392:	22 23       	and	r18, r18
    1394:	99 f0       	breq	.+38     	; 0x13bc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1396:	4f b7       	in	r20, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
    139e:	21 30       	cpi	r18, 0x01	; 1
    13a0:	59 f4       	brne	.+22     	; 0x13b8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    13a2:	2d b3       	in	r18, 0x1d	; 29
    13a4:	20 93 cc 05 	sts	0x05CC, r18	; 0x8005cc <_ZN8SPIClass13interruptSaveE>
    13a8:	3d b3       	in	r19, 0x1d	; 29
    13aa:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <_ZN8SPIClass13interruptMaskE>
    13ae:	20 95       	com	r18
    13b0:	23 23       	and	r18, r19
    13b2:	2d bb       	out	0x1d, r18	; 29
    13b4:	4f bf       	out	0x3f, r20	; 63
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    13b8:	40 93 cc 05 	sts	0x05CC, r20	; 0x8005cc <_ZN8SPIClass13interruptSaveE>
    13bc:	8c bd       	out	0x2c, r24	; 44
    13be:	9d bd       	out	0x2d, r25	; 45
    13c0:	08 95       	ret

000013c2 <_ZN8SPIClass8transferEh>:
    13c2:	8e bd       	out	0x2e, r24	; 46
    13c4:	00 00       	nop
    13c6:	0d b4       	in	r0, 0x2d	; 45
    13c8:	07 fe       	sbrs	r0, 7
    13ca:	fd cf       	rjmp	.-6      	; 0x13c6 <_ZN8SPIClass8transferEh+0x4>
    13cc:	8e b5       	in	r24, 0x2e	; 46
    13ce:	08 95       	ret

000013d0 <_ZL6spiRecv>:
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	f7 cf       	rjmp	.-18     	; 0x13c2 <_ZN8SPIClass8transferEh>

000013d4 <_ZN7Sd2Card14chipSelectHighEv>:
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	fc 01       	movw	r30, r24
    13d8:	84 81       	ldd	r24, Z+4	; 0x04
    13da:	0e 94 8f 1c 	call	0x391e	; 0x391e <digitalWrite>
    13de:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_ZL20chip_select_asserted>
    13e2:	88 23       	and	r24, r24
    13e4:	31 f0       	breq	.+12     	; 0x13f2 <_ZN7Sd2Card14chipSelectHighEv+0x1e>
    13e6:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <_ZL20chip_select_asserted>
    13ea:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
    13ee:	81 11       	cpse	r24, r1
    13f0:	9c cf       	rjmp	.-200    	; 0x132a <_ZN8SPIClass14endTransactionEv.part.3>
    13f2:	08 95       	ret

000013f4 <_ZN7Sd2Card13chipSelectLowEv>:
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
    13fa:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_ZL20chip_select_asserted>
    13fe:	81 11       	cpse	r24, r1
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <_ZN7Sd2Card13chipSelectLowEv+0x1e>
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <_ZL20chip_select_asserted>
    1408:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_ZL8settings>
    140c:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_ZL8settings+0x1>
    1410:	be df       	rcall	.-132    	; 0x138e <_ZN8SPIClass16beginTransactionE11SPISettings>
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <digitalWrite>

0000141e <_ZN7Sd2Card7readEndEv>:
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	ec 01       	movw	r28, r24
    1424:	8e 81       	ldd	r24, Y+6	; 0x06
    1426:	88 23       	and	r24, r24
    1428:	79 f0       	breq	.+30     	; 0x1448 <_ZN7Sd2Card7readEndEv+0x2a>
    142a:	8f 81       	ldd	r24, Y+7	; 0x07
    142c:	98 85       	ldd	r25, Y+8	; 0x08
    142e:	9c 01       	movw	r18, r24
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	38 87       	std	Y+8, r19	; 0x08
    1436:	2f 83       	std	Y+7, r18	; 0x07
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	92 40       	sbci	r25, 0x02	; 2
    143c:	10 f4       	brcc	.+4      	; 0x1442 <_ZN7Sd2Card7readEndEv+0x24>
    143e:	c8 df       	rcall	.-112    	; 0x13d0 <_ZL6spiRecv>
    1440:	f4 cf       	rjmp	.-24     	; 0x142a <_ZN7Sd2Card7readEndEv+0xc>
    1442:	ce 01       	movw	r24, r28
    1444:	c7 df       	rcall	.-114    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1446:	1e 82       	std	Y+6, r1	; 0x06
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <_ZN7Sd2Card10setSckRateEh>:
    144e:	0f 93       	push	r16
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	1f 92       	push	r1
    1456:	1f 92       	push	r1
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	67 30       	cpi	r22, 0x07	; 7
    145e:	28 f0       	brcs	.+10     	; 0x146a <_ZN7Sd2Card10setSckRateEh+0x1c>
    1460:	26 e1       	ldi	r18, 0x16	; 22
    1462:	fc 01       	movw	r30, r24
    1464:	25 83       	std	Z+5, r18	; 0x05
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	46 c0       	rjmp	.+140    	; 0x14f6 <_ZN7Sd2Card10setSckRateEh+0xa8>
    146a:	62 30       	cpi	r22, 0x02	; 2
    146c:	f9 f0       	breq	.+62     	; 0x14ac <_ZN7Sd2Card10setSckRateEh+0x5e>
    146e:	58 f4       	brcc	.+22     	; 0x1486 <_ZN7Sd2Card10setSckRateEh+0x38>
    1470:	66 23       	and	r22, r22
    1472:	a9 f0       	breq	.+42     	; 0x149e <_ZN7Sd2Card10setSckRateEh+0x50>
    1474:	61 30       	cpi	r22, 0x01	; 1
    1476:	79 f5       	brne	.+94     	; 0x14d6 <_ZN7Sd2Card10setSckRateEh+0x88>
    1478:	00 e0       	ldi	r16, 0x00	; 0
    147a:	21 e0       	ldi	r18, 0x01	; 1
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	59 e0       	ldi	r21, 0x09	; 9
    1480:	6d e3       	ldi	r22, 0x3D	; 61
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	2e c0       	rjmp	.+92     	; 0x14e2 <_ZN7Sd2Card10setSckRateEh+0x94>
    1486:	64 30       	cpi	r22, 0x04	; 4
    1488:	f9 f0       	breq	.+62     	; 0x14c8 <_ZN7Sd2Card10setSckRateEh+0x7a>
    148a:	b8 f0       	brcs	.+46     	; 0x14ba <_ZN7Sd2Card10setSckRateEh+0x6c>
    148c:	65 30       	cpi	r22, 0x05	; 5
    148e:	19 f5       	brne	.+70     	; 0x14d6 <_ZN7Sd2Card10setSckRateEh+0x88>
    1490:	00 e0       	ldi	r16, 0x00	; 0
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	40 e9       	ldi	r20, 0x90	; 144
    1496:	50 ed       	ldi	r21, 0xD0	; 208
    1498:	63 e0       	ldi	r22, 0x03	; 3
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	22 c0       	rjmp	.+68     	; 0x14e2 <_ZN7Sd2Card10setSckRateEh+0x94>
    149e:	00 e0       	ldi	r16, 0x00	; 0
    14a0:	21 e0       	ldi	r18, 0x01	; 1
    14a2:	40 e4       	ldi	r20, 0x40	; 64
    14a4:	58 e7       	ldi	r21, 0x78	; 120
    14a6:	6d e7       	ldi	r22, 0x7D	; 125
    14a8:	71 e0       	ldi	r23, 0x01	; 1
    14aa:	1b c0       	rjmp	.+54     	; 0x14e2 <_ZN7Sd2Card10setSckRateEh+0x94>
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	21 e0       	ldi	r18, 0x01	; 1
    14b0:	40 e8       	ldi	r20, 0x80	; 128
    14b2:	54 e8       	ldi	r21, 0x84	; 132
    14b4:	6e e1       	ldi	r22, 0x1E	; 30
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <_ZN7Sd2Card10setSckRateEh+0x94>
    14ba:	00 e0       	ldi	r16, 0x00	; 0
    14bc:	21 e0       	ldi	r18, 0x01	; 1
    14be:	40 e4       	ldi	r20, 0x40	; 64
    14c0:	52 e4       	ldi	r21, 0x42	; 66
    14c2:	6f e0       	ldi	r22, 0x0F	; 15
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	0d c0       	rjmp	.+26     	; 0x14e2 <_ZN7Sd2Card10setSckRateEh+0x94>
    14c8:	00 e0       	ldi	r16, 0x00	; 0
    14ca:	21 e0       	ldi	r18, 0x01	; 1
    14cc:	40 e2       	ldi	r20, 0x20	; 32
    14ce:	51 ea       	ldi	r21, 0xA1	; 161
    14d0:	67 e0       	ldi	r22, 0x07	; 7
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <_ZN7Sd2Card10setSckRateEh+0x94>
    14d6:	00 e0       	ldi	r16, 0x00	; 0
    14d8:	21 e0       	ldi	r18, 0x01	; 1
    14da:	48 e4       	ldi	r20, 0x48	; 72
    14dc:	58 ee       	ldi	r21, 0xE8	; 232
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	ce 01       	movw	r24, r28
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	2e df       	rcall	.-420    	; 0x1344 <_ZN11SPISettingsC1Emhh>
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <_ZL8settings+0x1>
    14f0:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <_ZL8settings>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	0f 91       	pop	r16
    1500:	08 95       	ret

00001502 <_ZN7Sd2Card11waitNotBusyEj>:
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	eb 01       	movw	r28, r22
    150c:	0e 94 ae 01 	call	0x35c	; 0x35c <millis>
    1510:	8b 01       	movw	r16, r22
    1512:	5e df       	rcall	.-324    	; 0x13d0 <_ZL6spiRecv>
    1514:	8f 3f       	cpi	r24, 0xFF	; 255
    1516:	49 f0       	breq	.+18     	; 0x152a <_ZN7Sd2Card11waitNotBusyEj+0x28>
    1518:	0e 94 ae 01 	call	0x35c	; 0x35c <millis>
    151c:	60 1b       	sub	r22, r16
    151e:	71 0b       	sbc	r23, r17
    1520:	6c 17       	cp	r22, r28
    1522:	7d 07       	cpc	r23, r29
    1524:	b0 f3       	brcs	.-20     	; 0x1512 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	01 c0       	rjmp	.+2      	; 0x152c <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	08 95       	ret

00001536 <_ZN7Sd2Card11cardCommandEhm>:
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
    154a:	f6 2e       	mov	r15, r22
    154c:	49 01       	movw	r8, r18
    154e:	5a 01       	movw	r10, r20
    1550:	66 df       	rcall	.-308    	; 0x141e <_ZN7Sd2Card7readEndEv>
    1552:	ce 01       	movw	r24, r28
    1554:	4f df       	rcall	.-354    	; 0x13f4 <_ZN7Sd2Card13chipSelectLowEv>
    1556:	6c e2       	ldi	r22, 0x2C	; 44
    1558:	71 e0       	ldi	r23, 0x01	; 1
    155a:	ce 01       	movw	r24, r28
    155c:	d2 df       	rcall	.-92     	; 0x1502 <_ZN7Sd2Card11waitNotBusyEj>
    155e:	8f 2d       	mov	r24, r15
    1560:	80 64       	ori	r24, 0x40	; 64
    1562:	2f df       	rcall	.-418    	; 0x13c2 <_ZN8SPIClass8transferEh>
    1564:	08 e1       	ldi	r16, 0x18	; 24
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	d5 01       	movw	r26, r10
    156a:	c4 01       	movw	r24, r8
    156c:	00 2e       	mov	r0, r16
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <_ZN7Sd2Card11cardCommandEhm+0x42>
    1570:	b6 95       	lsr	r27
    1572:	a7 95       	ror	r26
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	0a 94       	dec	r0
    157a:	d2 f7       	brpl	.-12     	; 0x1570 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    157c:	22 df       	rcall	.-444    	; 0x13c2 <_ZN8SPIClass8transferEh>
    157e:	08 50       	subi	r16, 0x08	; 8
    1580:	11 09       	sbc	r17, r1
    1582:	08 3f       	cpi	r16, 0xF8	; 248
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	18 07       	cpc	r17, r24
    1588:	79 f7       	brne	.-34     	; 0x1568 <_ZN7Sd2Card11cardCommandEhm+0x32>
    158a:	ff 20       	and	r15, r15
    158c:	29 f0       	breq	.+10     	; 0x1598 <_ZN7Sd2Card11cardCommandEhm+0x62>
    158e:	88 e0       	ldi	r24, 0x08	; 8
    1590:	f8 12       	cpse	r15, r24
    1592:	04 c0       	rjmp	.+8      	; 0x159c <_ZN7Sd2Card11cardCommandEhm+0x66>
    1594:	87 e8       	ldi	r24, 0x87	; 135
    1596:	03 c0       	rjmp	.+6      	; 0x159e <_ZN7Sd2Card11cardCommandEhm+0x68>
    1598:	85 e9       	ldi	r24, 0x95	; 149
    159a:	01 c0       	rjmp	.+2      	; 0x159e <_ZN7Sd2Card11cardCommandEhm+0x68>
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	11 df       	rcall	.-478    	; 0x13c2 <_ZN8SPIClass8transferEh>
    15a0:	10 e0       	ldi	r17, 0x00	; 0
    15a2:	16 df       	rcall	.-468    	; 0x13d0 <_ZL6spiRecv>
    15a4:	8a 87       	std	Y+10, r24	; 0x0a
    15a6:	87 ff       	sbrs	r24, 7
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    15aa:	1f 3f       	cpi	r17, 0xFF	; 255
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    15ae:	1f 5f       	subi	r17, 0xFF	; 255
    15b0:	f8 cf       	rjmp	.-16     	; 0x15a2 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	bf 90       	pop	r11
    15be:	af 90       	pop	r10
    15c0:	9f 90       	pop	r9
    15c2:	8f 90       	pop	r8
    15c4:	08 95       	ret

000015c6 <_ZN7Sd2Card4initEhh>:
    15c6:	7f 92       	push	r7
    15c8:	8f 92       	push	r8
    15ca:	9f 92       	push	r9
    15cc:	af 92       	push	r10
    15ce:	bf 92       	push	r11
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	1f 92       	push	r1
    15e2:	1f 92       	push	r1
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	7c 01       	movw	r14, r24
    15ea:	76 2e       	mov	r7, r22
    15ec:	fc 01       	movw	r30, r24
    15ee:	13 86       	std	Z+11, r1	; 0x0b
    15f0:	11 86       	std	Z+9, r1	; 0x09
    15f2:	16 82       	std	Z+6, r1	; 0x06
    15f4:	15 82       	std	Z+5, r1	; 0x05
    15f6:	44 83       	std	Z+4, r20	; 0x04
    15f8:	0e 94 ae 01 	call	0x35c	; 0x35c <millis>
    15fc:	6b 01       	movw	r12, r22
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	f7 01       	movw	r30, r14
    1602:	84 81       	ldd	r24, Z+4	; 0x04
    1604:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <pinMode>
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	f7 01       	movw	r30, r14
    160c:	84 81       	ldd	r24, Z+4	; 0x04
    160e:	0e 94 8f 1c 	call	0x391e	; 0x391e <digitalWrite>
    1612:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <_ZN8SPIClass5beginEv>
    1616:	00 e0       	ldi	r16, 0x00	; 0
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	40 e9       	ldi	r20, 0x90	; 144
    161c:	50 ed       	ldi	r21, 0xD0	; 208
    161e:	63 e0       	ldi	r22, 0x03	; 3
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	8e de       	rcall	.-740    	; 0x1344 <_ZN11SPISettingsC1Emhh>
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <_ZL8settings+0x1>
    1630:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <_ZL8settings>
    1634:	ac de       	rcall	.-680    	; 0x138e <_ZN8SPIClass16beginTransactionE11SPISettings>
    1636:	1a e0       	ldi	r17, 0x0A	; 10
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	c3 de       	rcall	.-634    	; 0x13c2 <_ZN8SPIClass8transferEh>
    163c:	11 50       	subi	r17, 0x01	; 1
    163e:	e1 f7       	brne	.-8      	; 0x1638 <_ZN7Sd2Card4initEhh+0x72>
    1640:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
    1644:	81 11       	cpse	r24, r1
    1646:	71 de       	rcall	.-798    	; 0x132a <_ZN8SPIClass14endTransactionEv.part.3>
    1648:	c7 01       	movw	r24, r14
    164a:	d4 de       	rcall	.-600    	; 0x13f4 <_ZN7Sd2Card13chipSelectLowEv>
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	c7 01       	movw	r24, r14
    1656:	6f df       	rcall	.-290    	; 0x1536 <_ZN7Sd2Card11cardCommandEhm>
    1658:	08 2f       	mov	r16, r24
    165a:	f7 01       	movw	r30, r14
    165c:	82 87       	std	Z+10, r24	; 0x0a
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	49 f0       	breq	.+18     	; 0x1674 <_ZN7Sd2Card4initEhh+0xae>
    1662:	0e 94 ae 01 	call	0x35c	; 0x35c <millis>
    1666:	6c 19       	sub	r22, r12
    1668:	7d 09       	sbc	r23, r13
    166a:	61 3d       	cpi	r22, 0xD1	; 209
    166c:	77 40       	sbci	r23, 0x07	; 7
    166e:	70 f3       	brcs	.-36     	; 0x164c <_ZN7Sd2Card4initEhh+0x86>
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	4b c0       	rjmp	.+150    	; 0x170a <_ZN7Sd2Card4initEhh+0x144>
    1674:	2a ea       	ldi	r18, 0xAA	; 170
    1676:	31 e0       	ldi	r19, 0x01	; 1
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	68 e0       	ldi	r22, 0x08	; 8
    167e:	c7 01       	movw	r24, r14
    1680:	5a df       	rcall	.-332    	; 0x1536 <_ZN7Sd2Card11cardCommandEhm>
    1682:	82 ff       	sbrs	r24, 2
    1684:	03 c0       	rjmp	.+6      	; 0x168c <_ZN7Sd2Card4initEhh+0xc6>
    1686:	f7 01       	movw	r30, r14
    1688:	03 87       	std	Z+11, r16	; 0x0b
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <_ZN7Sd2Card4initEhh+0xe0>
    168c:	04 e0       	ldi	r16, 0x04	; 4
    168e:	a0 de       	rcall	.-704    	; 0x13d0 <_ZL6spiRecv>
    1690:	f7 01       	movw	r30, r14
    1692:	82 87       	std	Z+10, r24	; 0x0a
    1694:	01 50       	subi	r16, 0x01	; 1
    1696:	d9 f7       	brne	.-10     	; 0x168e <_ZN7Sd2Card4initEhh+0xc8>
    1698:	8a 3a       	cpi	r24, 0xAA	; 170
    169a:	11 f0       	breq	.+4      	; 0x16a0 <_ZN7Sd2Card4initEhh+0xda>
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	36 c0       	rjmp	.+108    	; 0x170c <_ZN7Sd2Card4initEhh+0x146>
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	f7 01       	movw	r30, r14
    16a4:	83 87       	std	Z+11, r24	; 0x0b
    16a6:	f7 01       	movw	r30, r14
    16a8:	83 85       	ldd	r24, Z+11	; 0x0b
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	21 f0       	breq	.+8      	; 0x16b6 <_ZN7Sd2Card4initEhh+0xf0>
    16ae:	81 2c       	mov	r8, r1
    16b0:	91 2c       	mov	r9, r1
    16b2:	54 01       	movw	r10, r8
    16b4:	05 c0       	rjmp	.+10     	; 0x16c0 <_ZN7Sd2Card4initEhh+0xfa>
    16b6:	81 2c       	mov	r8, r1
    16b8:	91 2c       	mov	r9, r1
    16ba:	a1 2c       	mov	r10, r1
    16bc:	80 e4       	ldi	r24, 0x40	; 64
    16be:	b8 2e       	mov	r11, r24
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	a9 01       	movw	r20, r18
    16c6:	67 e3       	ldi	r22, 0x37	; 55
    16c8:	c7 01       	movw	r24, r14
    16ca:	35 df       	rcall	.-406    	; 0x1536 <_ZN7Sd2Card11cardCommandEhm>
    16cc:	a5 01       	movw	r20, r10
    16ce:	94 01       	movw	r18, r8
    16d0:	69 e2       	ldi	r22, 0x29	; 41
    16d2:	c7 01       	movw	r24, r14
    16d4:	30 df       	rcall	.-416    	; 0x1536 <_ZN7Sd2Card11cardCommandEhm>
    16d6:	f7 01       	movw	r30, r14
    16d8:	82 87       	std	Z+10, r24	; 0x0a
    16da:	88 23       	and	r24, r24
    16dc:	49 f0       	breq	.+18     	; 0x16f0 <_ZN7Sd2Card4initEhh+0x12a>
    16de:	0e 94 ae 01 	call	0x35c	; 0x35c <millis>
    16e2:	6c 19       	sub	r22, r12
    16e4:	7d 09       	sbc	r23, r13
    16e6:	61 3d       	cpi	r22, 0xD1	; 209
    16e8:	77 40       	sbci	r23, 0x07	; 7
    16ea:	50 f3       	brcs	.-44     	; 0x16c0 <_ZN7Sd2Card4initEhh+0xfa>
    16ec:	88 e0       	ldi	r24, 0x08	; 8
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <_ZN7Sd2Card4initEhh+0x144>
    16f0:	f7 01       	movw	r30, r14
    16f2:	83 85       	ldd	r24, Z+11	; 0x0b
    16f4:	82 30       	cpi	r24, 0x02	; 2
    16f6:	c1 f4       	brne	.+48     	; 0x1728 <_ZN7Sd2Card4initEhh+0x162>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	6a e3       	ldi	r22, 0x3A	; 58
    1700:	c7 01       	movw	r24, r14
    1702:	19 df       	rcall	.-462    	; 0x1536 <_ZN7Sd2Card11cardCommandEhm>
    1704:	88 23       	and	r24, r24
    1706:	31 f0       	breq	.+12     	; 0x1714 <_ZN7Sd2Card4initEhh+0x14e>
    1708:	86 e0       	ldi	r24, 0x06	; 6
    170a:	f7 01       	movw	r30, r14
    170c:	85 83       	std	Z+5, r24	; 0x05
    170e:	c7 01       	movw	r24, r14
    1710:	61 de       	rcall	.-830    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1712:	10 c0       	rjmp	.+32     	; 0x1734 <_ZN7Sd2Card4initEhh+0x16e>
    1714:	5d de       	rcall	.-838    	; 0x13d0 <_ZL6spiRecv>
    1716:	80 7c       	andi	r24, 0xC0	; 192
    1718:	80 3c       	cpi	r24, 0xC0	; 192
    171a:	19 f4       	brne	.+6      	; 0x1722 <_ZN7Sd2Card4initEhh+0x15c>
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	f7 01       	movw	r30, r14
    1720:	83 87       	std	Z+11, r24	; 0x0b
    1722:	56 de       	rcall	.-852    	; 0x13d0 <_ZL6spiRecv>
    1724:	55 de       	rcall	.-854    	; 0x13d0 <_ZL6spiRecv>
    1726:	54 de       	rcall	.-856    	; 0x13d0 <_ZL6spiRecv>
    1728:	c7 01       	movw	r24, r14
    172a:	54 de       	rcall	.-856    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    172c:	67 2d       	mov	r22, r7
    172e:	c7 01       	movw	r24, r14
    1730:	8e de       	rcall	.-740    	; 0x144e <_ZN7Sd2Card10setSckRateEh>
    1732:	18 2f       	mov	r17, r24
    1734:	81 2f       	mov	r24, r17
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	7f 90       	pop	r7
    1754:	08 95       	ret

00001756 <_ZN7Sd2Card14waitStartBlockEv>:
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	ec 01       	movw	r28, r24
    1760:	0e 94 ae 01 	call	0x35c	; 0x35c <millis>
    1764:	8b 01       	movw	r16, r22
    1766:	34 de       	rcall	.-920    	; 0x13d0 <_ZL6spiRecv>
    1768:	8a 87       	std	Y+10, r24	; 0x0a
    176a:	8f 3f       	cpi	r24, 0xFF	; 255
    176c:	49 f4       	brne	.+18     	; 0x1780 <_ZN7Sd2Card14waitStartBlockEv+0x2a>
    176e:	0e 94 ae 01 	call	0x35c	; 0x35c <millis>
    1772:	60 1b       	sub	r22, r16
    1774:	71 0b       	sbc	r23, r17
    1776:	6d 32       	cpi	r22, 0x2D	; 45
    1778:	71 40       	sbci	r23, 0x01	; 1
    177a:	a8 f3       	brcs	.-22     	; 0x1766 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    177c:	8f e0       	ldi	r24, 0x0F	; 15
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <_ZN7Sd2Card14waitStartBlockEv+0x30>
    1780:	8e 3f       	cpi	r24, 0xFE	; 254
    1782:	31 f0       	breq	.+12     	; 0x1790 <_ZN7Sd2Card14waitStartBlockEv+0x3a>
    1784:	8d e0       	ldi	r24, 0x0D	; 13
    1786:	8d 83       	std	Y+5, r24	; 0x05
    1788:	ce 01       	movw	r24, r28
    178a:	24 de       	rcall	.-952    	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <_ZN7Sd2Card14waitStartBlockEv+0x3c>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	ec 01       	movw	r28, r24
    17ae:	69 01       	movw	r12, r18
    17b0:	c8 01       	movw	r24, r16
    17b2:	82 0f       	add	r24, r18
    17b4:	93 1f       	adc	r25, r19
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	92 40       	sbci	r25, 0x02	; 2
    17ba:	08 f0       	brcs	.+2      	; 0x17be <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    17bc:	57 c0       	rjmp	.+174    	; 0x186c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    17be:	8e 81       	ldd	r24, Y+6	; 0x06
    17c0:	88 23       	and	r24, r24
    17c2:	71 f0       	breq	.+28     	; 0x17e0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    17c4:	88 81       	ld	r24, Y
    17c6:	99 81       	ldd	r25, Y+1	; 0x01
    17c8:	aa 81       	ldd	r26, Y+2	; 0x02
    17ca:	bb 81       	ldd	r27, Y+3	; 0x03
    17cc:	84 17       	cp	r24, r20
    17ce:	95 07       	cpc	r25, r21
    17d0:	a6 07       	cpc	r26, r22
    17d2:	b7 07       	cpc	r27, r23
    17d4:	29 f4       	brne	.+10     	; 0x17e0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    17d6:	8f 81       	ldd	r24, Y+7	; 0x07
    17d8:	98 85       	ldd	r25, Y+8	; 0x08
    17da:	c8 16       	cp	r12, r24
    17dc:	d9 06       	cpc	r13, r25
    17de:	00 f5       	brcc	.+64     	; 0x1820 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    17e0:	48 83       	st	Y, r20
    17e2:	59 83       	std	Y+1, r21	; 0x01
    17e4:	6a 83       	std	Y+2, r22	; 0x02
    17e6:	7b 83       	std	Y+3, r23	; 0x03
    17e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	39 f0       	breq	.+14     	; 0x17fc <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    17ee:	89 e0       	ldi	r24, 0x09	; 9
    17f0:	44 0f       	add	r20, r20
    17f2:	55 1f       	adc	r21, r21
    17f4:	66 1f       	adc	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	8a 95       	dec	r24
    17fa:	d1 f7       	brne	.-12     	; 0x17f0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    17fc:	9a 01       	movw	r18, r20
    17fe:	ab 01       	movw	r20, r22
    1800:	61 e1       	ldi	r22, 0x11	; 17
    1802:	ce 01       	movw	r24, r28
    1804:	98 de       	rcall	.-720    	; 0x1536 <_ZN7Sd2Card11cardCommandEhm>
    1806:	88 23       	and	r24, r24
    1808:	19 f0       	breq	.+6      	; 0x1810 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x74>
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	2e c0       	rjmp	.+92     	; 0x186c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    1810:	ce 01       	movw	r24, r28
    1812:	a1 df       	rcall	.-190    	; 0x1756 <_ZN7Sd2Card14waitStartBlockEv>
    1814:	88 23       	and	r24, r24
    1816:	51 f1       	breq	.+84     	; 0x186c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd0>
    1818:	18 86       	std	Y+8, r1	; 0x08
    181a:	1f 82       	std	Y+7, r1	; 0x07
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	8e 83       	std	Y+6, r24	; 0x06
    1820:	8f 81       	ldd	r24, Y+7	; 0x07
    1822:	98 85       	ldd	r25, Y+8	; 0x08
    1824:	8c 15       	cp	r24, r12
    1826:	9d 05       	cpc	r25, r13
    1828:	38 f4       	brcc	.+14     	; 0x1838 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x9c>
    182a:	d2 dd       	rcall	.-1116   	; 0x13d0 <_ZL6spiRecv>
    182c:	8f 81       	ldd	r24, Y+7	; 0x07
    182e:	98 85       	ldd	r25, Y+8	; 0x08
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	98 87       	std	Y+8, r25	; 0x08
    1834:	8f 83       	std	Y+7, r24	; 0x07
    1836:	f4 cf       	rjmp	.-24     	; 0x1820 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x84>
    1838:	67 01       	movw	r12, r14
    183a:	e0 0e       	add	r14, r16
    183c:	f1 1e       	adc	r15, r17
    183e:	ce 14       	cp	r12, r14
    1840:	df 04       	cpc	r13, r15
    1842:	29 f0       	breq	.+10     	; 0x184e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xb2>
    1844:	c5 dd       	rcall	.-1142   	; 0x13d0 <_ZL6spiRecv>
    1846:	f6 01       	movw	r30, r12
    1848:	81 93       	st	Z+, r24
    184a:	6f 01       	movw	r12, r30
    184c:	f8 cf       	rjmp	.-16     	; 0x183e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    184e:	8f 81       	ldd	r24, Y+7	; 0x07
    1850:	98 85       	ldd	r25, Y+8	; 0x08
    1852:	08 0f       	add	r16, r24
    1854:	19 1f       	adc	r17, r25
    1856:	18 87       	std	Y+8, r17	; 0x08
    1858:	0f 83       	std	Y+7, r16	; 0x07
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	88 23       	and	r24, r24
    185e:	19 f0       	breq	.+6      	; 0x1866 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xca>
    1860:	01 15       	cp	r16, r1
    1862:	12 40       	sbci	r17, 0x02	; 2
    1864:	38 f0       	brcs	.+14     	; 0x1874 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    1866:	ce 01       	movw	r24, r28
    1868:	da dd       	rcall	.-1100   	; 0x141e <_ZN7Sd2Card7readEndEv>
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd8>
    186c:	ce 01       	movw	r24, r28
    186e:	b2 dd       	rcall	.-1180   	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	08 95       	ret

00001888 <_ZN7Sd2Card8readDataEmjjPh>:
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	01 15       	cp	r16, r1
    1892:	11 05       	cpc	r17, r1
    1894:	11 f0       	breq	.+4      	; 0x189a <_ZN7Sd2Card8readDataEmjjPh+0x12>
    1896:	82 df       	rcall	.-252    	; 0x179c <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1898:	01 c0       	rjmp	.+2      	; 0x189c <_ZN7Sd2Card8readDataEmjjPh+0x14>
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	08 95       	ret

000018a6 <_ZN7Sd2Card9readBlockEmPh>:
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	79 01       	movw	r14, r18
    18b0:	00 e0       	ldi	r16, 0x00	; 0
    18b2:	12 e0       	ldi	r17, 0x02	; 2
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	71 df       	rcall	.-286    	; 0x179c <_ZN7Sd2Card8readDataEmjjPh.part.6>
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	08 95       	ret

000018c4 <_ZN7Sd2Card9writeDataEhPKh>:
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	8c 01       	movw	r16, r24
    18d2:	86 2f       	mov	r24, r22
    18d4:	7a 01       	movw	r14, r20
    18d6:	75 dd       	rcall	.-1302   	; 0x13c2 <_ZN8SPIClass8transferEh>
    18d8:	e7 01       	movw	r28, r14
    18da:	8e ef       	ldi	r24, 0xFE	; 254
    18dc:	f8 1a       	sub	r15, r24
    18de:	89 91       	ld	r24, Y+
    18e0:	70 dd       	rcall	.-1312   	; 0x13c2 <_ZN8SPIClass8transferEh>
    18e2:	ce 15       	cp	r28, r14
    18e4:	df 05       	cpc	r29, r15
    18e6:	d9 f7       	brne	.-10     	; 0x18de <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	6b dd       	rcall	.-1322   	; 0x13c2 <_ZN8SPIClass8transferEh>
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	69 dd       	rcall	.-1326   	; 0x13c2 <_ZN8SPIClass8transferEh>
    18f0:	6f dd       	rcall	.-1314   	; 0x13d0 <_ZL6spiRecv>
    18f2:	f8 01       	movw	r30, r16
    18f4:	82 87       	std	Z+10, r24	; 0x0a
    18f6:	8f 71       	andi	r24, 0x1F	; 31
    18f8:	85 30       	cpi	r24, 0x05	; 5
    18fa:	31 f0       	breq	.+12     	; 0x1908 <_ZN7Sd2Card9writeDataEhPKh+0x44>
    18fc:	81 e1       	ldi	r24, 0x11	; 17
    18fe:	85 83       	std	Z+5, r24	; 0x05
    1900:	c8 01       	movw	r24, r16
    1902:	68 dd       	rcall	.-1328   	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	01 c0       	rjmp	.+2      	; 0x190a <_ZN7Sd2Card9writeDataEhPKh+0x46>
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	08 95       	ret

00001918 <_ZN7Sd2Card10writeBlockEmPKh>:
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	ec 01       	movw	r28, r24
    1922:	89 01       	movw	r16, r18
    1924:	41 15       	cp	r20, r1
    1926:	51 05       	cpc	r21, r1
    1928:	61 05       	cpc	r22, r1
    192a:	71 05       	cpc	r23, r1
    192c:	11 f4       	brne	.+4      	; 0x1932 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    192e:	82 e1       	ldi	r24, 0x12	; 18
    1930:	2d c0       	rjmp	.+90     	; 0x198c <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    1932:	8b 85       	ldd	r24, Y+11	; 0x0b
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	39 f0       	breq	.+14     	; 0x1946 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    1938:	89 e0       	ldi	r24, 0x09	; 9
    193a:	44 0f       	add	r20, r20
    193c:	55 1f       	adc	r21, r21
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	8a 95       	dec	r24
    1944:	d1 f7       	brne	.-12     	; 0x193a <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    1946:	9a 01       	movw	r18, r20
    1948:	ab 01       	movw	r20, r22
    194a:	68 e1       	ldi	r22, 0x18	; 24
    194c:	ce 01       	movw	r24, r28
    194e:	f3 dd       	rcall	.-1050   	; 0x1536 <_ZN7Sd2Card11cardCommandEhm>
    1950:	88 23       	and	r24, r24
    1952:	11 f0       	breq	.+4      	; 0x1958 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    1954:	84 e0       	ldi	r24, 0x04	; 4
    1956:	1a c0       	rjmp	.+52     	; 0x198c <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    1958:	a8 01       	movw	r20, r16
    195a:	6e ef       	ldi	r22, 0xFE	; 254
    195c:	ce 01       	movw	r24, r28
    195e:	b2 df       	rcall	.-156    	; 0x18c4 <_ZN7Sd2Card9writeDataEhPKh>
    1960:	88 23       	and	r24, r24
    1962:	a9 f0       	breq	.+42     	; 0x198e <_ZN7Sd2Card10writeBlockEmPKh+0x76>
    1964:	68 e5       	ldi	r22, 0x58	; 88
    1966:	72 e0       	ldi	r23, 0x02	; 2
    1968:	ce 01       	movw	r24, r28
    196a:	cb dd       	rcall	.-1130   	; 0x1502 <_ZN7Sd2Card11waitNotBusyEj>
    196c:	81 11       	cpse	r24, r1
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    1970:	85 e1       	ldi	r24, 0x15	; 21
    1972:	0c c0       	rjmp	.+24     	; 0x198c <_ZN7Sd2Card10writeBlockEmPKh+0x74>
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	a9 01       	movw	r20, r18
    197a:	6d e0       	ldi	r22, 0x0D	; 13
    197c:	ce 01       	movw	r24, r28
    197e:	db dd       	rcall	.-1098   	; 0x1536 <_ZN7Sd2Card11cardCommandEhm>
    1980:	81 11       	cpse	r24, r1
    1982:	03 c0       	rjmp	.+6      	; 0x198a <_ZN7Sd2Card10writeBlockEmPKh+0x72>
    1984:	25 dd       	rcall	.-1462   	; 0x13d0 <_ZL6spiRecv>
    1986:	88 23       	and	r24, r24
    1988:	31 f0       	breq	.+12     	; 0x1996 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    198a:	84 e1       	ldi	r24, 0x14	; 20
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	ce 01       	movw	r24, r28
    1990:	21 dd       	rcall	.-1470   	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	03 c0       	rjmp	.+6      	; 0x199c <_ZN7Sd2Card10writeBlockEmPKh+0x84>
    1996:	ce 01       	movw	r24, r28
    1998:	1d dd       	rcall	.-1478   	; 0x13d4 <_ZN7Sd2Card14chipSelectHighEv>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    19a6:	e1 ec       	ldi	r30, 0xC1	; 193
    19a8:	f3 e0       	ldi	r31, 0x03	; 3
    19aa:	80 e5       	ldi	r24, 0x50	; 80
    19ac:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    19ae:	11 82       	std	Z+1, r1	; 0x01
    19b0:	08 95       	ret

000019b2 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	ec 01       	movw	r28, r24
    19b8:	9c 01       	movw	r18, r24
    19ba:	2a 5f       	subi	r18, 0xFA	; 250
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ca:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_ZN8SdVolume15allocContiguousEmPm>
    19ce:	88 23       	and	r24, r24
    19d0:	a1 f0       	breq	.+40     	; 0x19fa <_ZN6SdFile10addClusterEv+0x48>
    19d2:	8f 89       	ldd	r24, Y+23	; 0x17
    19d4:	98 8d       	ldd	r25, Y+24	; 0x18
    19d6:	a9 8d       	ldd	r26, Y+25	; 0x19
    19d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    19da:	89 2b       	or	r24, r25
    19dc:	8a 2b       	or	r24, r26
    19de:	8b 2b       	or	r24, r27
    19e0:	59 f4       	brne	.+22     	; 0x19f8 <_ZN6SdFile10addClusterEv+0x46>
    19e2:	8e 81       	ldd	r24, Y+6	; 0x06
    19e4:	9f 81       	ldd	r25, Y+7	; 0x07
    19e6:	a8 85       	ldd	r26, Y+8	; 0x08
    19e8:	b9 85       	ldd	r27, Y+9	; 0x09
    19ea:	8f 8b       	std	Y+23, r24	; 0x17
    19ec:	98 8f       	std	Y+24, r25	; 0x18
    19ee:	a9 8f       	std	Y+25, r26	; 0x19
    19f0:	ba 8f       	std	Y+26, r27	; 0x1a
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	80 68       	ori	r24, 0x80	; 128
    19f6:	8c 83       	std	Y+4, r24	; 0x04
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <_ZN6SdFile13addDirClusterEv>:
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ec 01       	movw	r28, r24
    1a10:	d0 df       	rcall	.-96     	; 0x19b2 <_ZN6SdFile10addClusterEv>
    1a12:	81 11       	cpse	r24, r1
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <_ZN6SdFile13addDirClusterEv+0x1a>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	49 c0       	rjmp	.+146    	; 0x1aac <_ZN6SdFile13addDirClusterEv+0xac>
    1a1a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a1c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a1e:	ce 80       	ldd	r12, Y+6	; 0x06
    1a20:	df 80       	ldd	r13, Y+7	; 0x07
    1a22:	e8 84       	ldd	r14, Y+8	; 0x08
    1a24:	f9 84       	ldd	r15, Y+9	; 0x09
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	c8 1a       	sub	r12, r24
    1a2a:	d1 08       	sbc	r13, r1
    1a2c:	e1 08       	sbc	r14, r1
    1a2e:	f1 08       	sbc	r15, r1
    1a30:	05 84       	ldd	r0, Z+13	; 0x0d
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <_ZN6SdFile13addDirClusterEv+0x3c>
    1a34:	cc 0c       	add	r12, r12
    1a36:	dd 1c       	adc	r13, r13
    1a38:	ee 1c       	adc	r14, r14
    1a3a:	ff 1c       	adc	r15, r15
    1a3c:	0a 94       	dec	r0
    1a3e:	d2 f7       	brpl	.-12     	; 0x1a34 <_ZN6SdFile13addDirClusterEv+0x34>
    1a40:	86 85       	ldd	r24, Z+14	; 0x0e
    1a42:	97 85       	ldd	r25, Z+15	; 0x0f
    1a44:	a0 89       	ldd	r26, Z+16	; 0x10
    1a46:	b1 89       	ldd	r27, Z+17	; 0x11
    1a48:	c8 0e       	add	r12, r24
    1a4a:	d9 1e       	adc	r13, r25
    1a4c:	ea 1e       	adc	r14, r26
    1a4e:	fb 1e       	adc	r15, r27
    1a50:	14 81       	ldd	r17, Z+4	; 0x04
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	c8 1a       	sub	r12, r24
    1a56:	d1 08       	sbc	r13, r1
    1a58:	e1 08       	sbc	r14, r1
    1a5a:	f1 08       	sbc	r15, r1
    1a5c:	11 23       	and	r17, r17
    1a5e:	59 f0       	breq	.+22     	; 0x1a76 <_ZN6SdFile13addDirClusterEv+0x76>
    1a60:	c7 01       	movw	r24, r14
    1a62:	b6 01       	movw	r22, r12
    1a64:	61 0f       	add	r22, r17
    1a66:	71 1d       	adc	r23, r1
    1a68:	81 1d       	adc	r24, r1
    1a6a:	91 1d       	adc	r25, r1
    1a6c:	0d d7       	rcall	.+3610   	; 0x2888 <_ZN8SdVolume14cacheZeroBlockEm>
    1a6e:	88 23       	and	r24, r24
    1a70:	91 f2       	breq	.-92     	; 0x1a16 <_ZN6SdFile13addDirClusterEv+0x16>
    1a72:	11 50       	subi	r17, 0x01	; 1
    1a74:	f3 cf       	rjmp	.-26     	; 0x1a5c <_ZN6SdFile13addDirClusterEv+0x5c>
    1a76:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a78:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	92 e0       	ldi	r25, 0x02	; 2
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	05 84       	ldd	r0, Z+13	; 0x0d
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <_ZN6SdFile13addDirClusterEv+0x8e>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	aa 1f       	adc	r26, r26
    1a8c:	bb 1f       	adc	r27, r27
    1a8e:	0a 94       	dec	r0
    1a90:	d2 f7       	brpl	.-12     	; 0x1a86 <_ZN6SdFile13addDirClusterEv+0x86>
    1a92:	4b 89       	ldd	r20, Y+19	; 0x13
    1a94:	5c 89       	ldd	r21, Y+20	; 0x14
    1a96:	6d 89       	ldd	r22, Y+21	; 0x15
    1a98:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9a:	84 0f       	add	r24, r20
    1a9c:	95 1f       	adc	r25, r21
    1a9e:	a6 1f       	adc	r26, r22
    1aa0:	b7 1f       	adc	r27, r23
    1aa2:	8b 8b       	std	Y+19, r24	; 0x13
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	ad 8b       	std	Y+21, r26	; 0x15
    1aa8:	be 8b       	std	Y+22, r27	; 0x16
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	08 95       	ret

00001abc <_ZN6SdFile13cacheDirEntryEh>:
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	ec 01       	movw	r28, r24
    1ac2:	46 2f       	mov	r20, r22
    1ac4:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ac6:	7f 85       	ldd	r23, Y+15	; 0x0f
    1ac8:	88 89       	ldd	r24, Y+16	; 0x10
    1aca:	99 89       	ldd	r25, Y+17	; 0x11
    1acc:	a4 d6       	rcall	.+3400   	; 0x2816 <_ZN8SdVolume13cacheRawBlockEmh>
    1ace:	88 23       	and	r24, r24
    1ad0:	41 f0       	breq	.+16     	; 0x1ae2 <_ZN6SdFile13cacheDirEntryEh+0x26>
    1ad2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ad4:	20 e2       	ldi	r18, 0x20	; 32
    1ad6:	82 9f       	mul	r24, r18
    1ad8:	c0 01       	movw	r24, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	84 53       	subi	r24, 0x34	; 52
    1ade:	9c 4f       	sbci	r25, 0xFC	; 252
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <_ZN6SdFile13cacheDirEntryEh+0x2a>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <_ZN6SdFile10make83NameEPKcPh>:
    1aec:	fb 01       	movw	r30, r22
    1aee:	9b 01       	movw	r18, r22
    1af0:	25 5f       	subi	r18, 0xF5	; 245
    1af2:	3f 4f       	sbci	r19, 0xFF	; 255
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	41 93       	st	Z+, r20
    1af8:	e2 17       	cp	r30, r18
    1afa:	f3 07       	cpc	r31, r19
    1afc:	e1 f7       	brne	.-8      	; 0x1af6 <_ZN6SdFile10make83NameEPKcPh+0xa>
    1afe:	dc 01       	movw	r26, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	27 e0       	ldi	r18, 0x07	; 7
    1b04:	8d 91       	ld	r24, X+
    1b06:	88 23       	and	r24, r24
    1b08:	19 f1       	breq	.+70     	; 0x1b50 <_ZN6SdFile10make83NameEPKcPh+0x64>
    1b0a:	8e 32       	cpi	r24, 0x2E	; 46
    1b0c:	29 f4       	brne	.+10     	; 0x1b18 <_ZN6SdFile10make83NameEPKcPh+0x2c>
    1b0e:	2a 30       	cpi	r18, 0x0A	; 10
    1b10:	21 f1       	breq	.+72     	; 0x1b5a <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1b12:	98 e0       	ldi	r25, 0x08	; 8
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	f6 cf       	rjmp	.-20     	; 0x1b04 <_ZN6SdFile10make83NameEPKcPh+0x18>
    1b18:	e8 e0       	ldi	r30, 0x08	; 8
    1b1a:	f1 e0       	ldi	r31, 0x01	; 1
    1b1c:	34 91       	lpm	r19, Z
    1b1e:	33 23       	and	r19, r19
    1b20:	21 f0       	breq	.+8      	; 0x1b2a <_ZN6SdFile10make83NameEPKcPh+0x3e>
    1b22:	31 96       	adiw	r30, 0x01	; 1
    1b24:	83 13       	cpse	r24, r19
    1b26:	fa cf       	rjmp	.-12     	; 0x1b1c <_ZN6SdFile10make83NameEPKcPh+0x30>
    1b28:	18 c0       	rjmp	.+48     	; 0x1b5a <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1b2a:	29 17       	cp	r18, r25
    1b2c:	b0 f0       	brcs	.+44     	; 0x1b5a <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1b2e:	3f ed       	ldi	r19, 0xDF	; 223
    1b30:	38 0f       	add	r19, r24
    1b32:	3e 35       	cpi	r19, 0x5E	; 94
    1b34:	90 f4       	brcc	.+36     	; 0x1b5a <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1b36:	31 e0       	ldi	r19, 0x01	; 1
    1b38:	39 0f       	add	r19, r25
    1b3a:	fb 01       	movw	r30, r22
    1b3c:	e9 0f       	add	r30, r25
    1b3e:	f1 1d       	adc	r31, r1
    1b40:	9f e9       	ldi	r25, 0x9F	; 159
    1b42:	98 0f       	add	r25, r24
    1b44:	9a 31       	cpi	r25, 0x1A	; 26
    1b46:	08 f4       	brcc	.+2      	; 0x1b4a <_ZN6SdFile10make83NameEPKcPh+0x5e>
    1b48:	80 52       	subi	r24, 0x20	; 32
    1b4a:	80 83       	st	Z, r24
    1b4c:	93 2f       	mov	r25, r19
    1b4e:	da cf       	rjmp	.-76     	; 0x1b04 <_ZN6SdFile10make83NameEPKcPh+0x18>
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	fb 01       	movw	r30, r22
    1b54:	90 81       	ld	r25, Z
    1b56:	90 32       	cpi	r25, 0x20	; 32
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <_ZN6SdFile10make83NameEPKcPh+0x70>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	08 95       	ret

00001b5e <_ZN6SdFile8openRootEP8SdVolume>:
    1b5e:	0f 93       	push	r16
    1b60:	1f 93       	push	r17
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	fc 01       	movw	r30, r24
    1b68:	25 81       	ldd	r18, Z+5	; 0x05
    1b6a:	22 23       	and	r18, r18
    1b6c:	11 f0       	breq	.+4      	; 0x1b72 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	41 c0       	rjmp	.+130    	; 0x1bf4 <_ZN6SdFile8openRootEP8SdVolume+0x96>
    1b72:	8b 01       	movw	r16, r22
    1b74:	ec 01       	movw	r28, r24
    1b76:	fb 01       	movw	r30, r22
    1b78:	87 89       	ldd	r24, Z+23	; 0x17
    1b7a:	80 31       	cpi	r24, 0x10	; 16
    1b7c:	b1 f4       	brne	.+44     	; 0x1baa <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    1b82:	1f 8a       	std	Y+23, r1	; 0x17
    1b84:	18 8e       	std	Y+24, r1	; 0x18
    1b86:	19 8e       	std	Y+25, r1	; 0x19
    1b88:	1a 8e       	std	Y+26, r1	; 0x1a
    1b8a:	80 8d       	ldd	r24, Z+24	; 0x18
    1b8c:	91 8d       	ldd	r25, Z+25	; 0x19
    1b8e:	a0 e0       	ldi	r26, 0x00	; 0
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	25 e0       	ldi	r18, 0x05	; 5
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	aa 1f       	adc	r26, r26
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	2a 95       	dec	r18
    1b9e:	d1 f7       	brne	.-12     	; 0x1b94 <_ZN6SdFile8openRootEP8SdVolume+0x36>
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
    1ba2:	9c 8b       	std	Y+20, r25	; 0x14
    1ba4:	ad 8b       	std	Y+21, r26	; 0x15
    1ba6:	be 8b       	std	Y+22, r27	; 0x16
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <_ZN6SdFile8openRootEP8SdVolume+0x74>
    1baa:	80 32       	cpi	r24, 0x20	; 32
    1bac:	01 f7       	brne	.-64     	; 0x1b6e <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	fb 01       	movw	r30, r22
    1bb4:	42 8d       	ldd	r20, Z+26	; 0x1a
    1bb6:	53 8d       	ldd	r21, Z+27	; 0x1b
    1bb8:	64 8d       	ldd	r22, Z+28	; 0x1c
    1bba:	75 8d       	ldd	r23, Z+29	; 0x1d
    1bbc:	4f 8b       	std	Y+23, r20	; 0x17
    1bbe:	58 8f       	std	Y+24, r21	; 0x18
    1bc0:	69 8f       	std	Y+25, r22	; 0x19
    1bc2:	7a 8f       	std	Y+26, r23	; 0x1a
    1bc4:	9e 01       	movw	r18, r28
    1bc6:	2d 5e       	subi	r18, 0xED	; 237
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	c8 01       	movw	r24, r16
    1bcc:	02 d7       	rcall	.+3588   	; 0x29d2 <_ZNK8SdVolume9chainSizeEmPm>
    1bce:	88 23       	and	r24, r24
    1bd0:	71 f2       	breq	.-100    	; 0x1b6e <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1bd2:	1c 8f       	std	Y+28, r17	; 0x1c
    1bd4:	0b 8f       	std	Y+27, r16	; 0x1b
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	8c 83       	std	Y+4, r24	; 0x04
    1bda:	1e 82       	std	Y+6, r1	; 0x06
    1bdc:	1f 82       	std	Y+7, r1	; 0x07
    1bde:	18 86       	std	Y+8, r1	; 0x08
    1be0:	19 86       	std	Y+9, r1	; 0x09
    1be2:	1a 86       	std	Y+10, r1	; 0x0a
    1be4:	1b 86       	std	Y+11, r1	; 0x0b
    1be6:	1c 86       	std	Y+12, r1	; 0x0c
    1be8:	1d 86       	std	Y+13, r1	; 0x0d
    1bea:	1e 86       	std	Y+14, r1	; 0x0e
    1bec:	1f 86       	std	Y+15, r1	; 0x0f
    1bee:	18 8a       	std	Y+16, r1	; 0x10
    1bf0:	19 8a       	std	Y+17, r1	; 0x11
    1bf2:	1a 8a       	std	Y+18, r1	; 0x12
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	08 95       	ret

00001bfe <_ZN6SdFile4readEPvj>:
    1bfe:	2f 92       	push	r2
    1c00:	3f 92       	push	r3
    1c02:	4f 92       	push	r4
    1c04:	5f 92       	push	r5
    1c06:	6f 92       	push	r6
    1c08:	7f 92       	push	r7
    1c0a:	8f 92       	push	r8
    1c0c:	9f 92       	push	r9
    1c0e:	af 92       	push	r10
    1c10:	bf 92       	push	r11
    1c12:	cf 92       	push	r12
    1c14:	df 92       	push	r13
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	ec 01       	movw	r28, r24
    1c24:	5b 01       	movw	r10, r22
    1c26:	4a 01       	movw	r8, r20
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <_ZN6SdFile4readEPvj+0x36>
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	9f ef       	ldi	r25, 0xFF	; 255
    1c32:	d4 c0       	rjmp	.+424    	; 0x1ddc <_ZN6SdFile4readEPvj+0x1de>
    1c34:	8c 81       	ldd	r24, Y+4	; 0x04
    1c36:	80 ff       	sbrs	r24, 0
    1c38:	fa cf       	rjmp	.-12     	; 0x1c2e <_ZN6SdFile4readEPvj+0x30>
    1c3a:	4b 88       	ldd	r4, Y+19	; 0x13
    1c3c:	5c 88       	ldd	r5, Y+20	; 0x14
    1c3e:	6d 88       	ldd	r6, Y+21	; 0x15
    1c40:	7e 88       	ldd	r7, Y+22	; 0x16
    1c42:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c44:	5b 85       	ldd	r21, Y+11	; 0x0b
    1c46:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c48:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c4a:	c4 01       	movw	r24, r8
    1c4c:	a0 e0       	ldi	r26, 0x00	; 0
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	93 01       	movw	r18, r6
    1c52:	82 01       	movw	r16, r4
    1c54:	04 1b       	sub	r16, r20
    1c56:	15 0b       	sbc	r17, r21
    1c58:	26 0b       	sbc	r18, r22
    1c5a:	37 0b       	sbc	r19, r23
    1c5c:	08 17       	cp	r16, r24
    1c5e:	19 07       	cpc	r17, r25
    1c60:	2a 07       	cpc	r18, r26
    1c62:	3b 07       	cpc	r19, r27
    1c64:	18 f4       	brcc	.+6      	; 0x1c6c <_ZN6SdFile4readEPvj+0x6e>
    1c66:	42 01       	movw	r8, r4
    1c68:	84 1a       	sub	r8, r20
    1c6a:	95 0a       	sbc	r9, r21
    1c6c:	24 01       	movw	r4, r8
    1c6e:	1e 01       	movw	r2, r28
    1c70:	26 e0       	ldi	r18, 0x06	; 6
    1c72:	22 0e       	add	r2, r18
    1c74:	31 1c       	adc	r3, r1
    1c76:	41 14       	cp	r4, r1
    1c78:	51 04       	cpc	r5, r1
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <_ZN6SdFile4readEPvj+0x80>
    1c7c:	7d c0       	rjmp	.+250    	; 0x1d78 <_ZN6SdFile4readEPvj+0x17a>
    1c7e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c80:	5b 85       	ldd	r21, Y+11	; 0x0b
    1c82:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c84:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c86:	6a 01       	movw	r12, r20
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	d8 22       	and	r13, r24
    1c8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c92:	8a 01       	movw	r16, r20
    1c94:	9b 01       	movw	r18, r22
    1c96:	f9 e0       	ldi	r31, 0x09	; 9
    1c98:	36 95       	lsr	r19
    1c9a:	27 95       	ror	r18
    1c9c:	17 95       	ror	r17
    1c9e:	07 95       	ror	r16
    1ca0:	fa 95       	dec	r31
    1ca2:	d1 f7       	brne	.-12     	; 0x1c98 <_ZN6SdFile4readEPvj+0x9a>
    1ca4:	e2 30       	cpi	r30, 0x02	; 2
    1ca6:	61 f4       	brne	.+24     	; 0x1cc0 <_ZN6SdFile4readEPvj+0xc2>
    1ca8:	fc 01       	movw	r30, r24
    1caa:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cac:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cae:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1cb0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	60 0f       	add	r22, r16
    1cb8:	71 1f       	adc	r23, r17
    1cba:	82 1f       	adc	r24, r18
    1cbc:	93 1f       	adc	r25, r19
    1cbe:	3e c0       	rjmp	.+124    	; 0x1d3c <_ZN6SdFile4readEPvj+0x13e>
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	74 80       	ldd	r7, Z+4	; 0x04
    1cc4:	7a 94       	dec	r7
    1cc6:	70 22       	and	r7, r16
    1cc8:	c1 14       	cp	r12, r1
    1cca:	d1 04       	cpc	r13, r1
    1ccc:	c1 f4       	brne	.+48     	; 0x1cfe <_ZN6SdFile4readEPvj+0x100>
    1cce:	71 10       	cpse	r7, r1
    1cd0:	16 c0       	rjmp	.+44     	; 0x1cfe <_ZN6SdFile4readEPvj+0x100>
    1cd2:	45 2b       	or	r20, r21
    1cd4:	46 2b       	or	r20, r22
    1cd6:	47 2b       	or	r20, r23
    1cd8:	49 f4       	brne	.+18     	; 0x1cec <_ZN6SdFile4readEPvj+0xee>
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ce0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ce2:	8e 83       	std	Y+6, r24	; 0x06
    1ce4:	9f 83       	std	Y+7, r25	; 0x07
    1ce6:	a8 87       	std	Y+8, r26	; 0x08
    1ce8:	b9 87       	std	Y+9, r27	; 0x09
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <_ZN6SdFile4readEPvj+0x100>
    1cec:	4e 81       	ldd	r20, Y+6	; 0x06
    1cee:	5f 81       	ldd	r21, Y+7	; 0x07
    1cf0:	68 85       	ldd	r22, Y+8	; 0x08
    1cf2:	79 85       	ldd	r23, Y+9	; 0x09
    1cf4:	91 01       	movw	r18, r2
    1cf6:	eb d5       	rcall	.+3030   	; 0x28ce <_ZNK8SdVolume6fatGetEmPm>
    1cf8:	88 23       	and	r24, r24
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <_ZN6SdFile4readEPvj+0x100>
    1cfc:	98 cf       	rjmp	.-208    	; 0x1c2e <_ZN6SdFile4readEPvj+0x30>
    1cfe:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1d00:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1d02:	8e 81       	ldd	r24, Y+6	; 0x06
    1d04:	9f 81       	ldd	r25, Y+7	; 0x07
    1d06:	a8 85       	ldd	r26, Y+8	; 0x08
    1d08:	b9 85       	ldd	r27, Y+9	; 0x09
    1d0a:	02 97       	sbiw	r24, 0x02	; 2
    1d0c:	a1 09       	sbc	r26, r1
    1d0e:	b1 09       	sbc	r27, r1
    1d10:	05 84       	ldd	r0, Z+13	; 0x0d
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <_ZN6SdFile4readEPvj+0x11e>
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	aa 1f       	adc	r26, r26
    1d1a:	bb 1f       	adc	r27, r27
    1d1c:	0a 94       	dec	r0
    1d1e:	d2 f7       	brpl	.-12     	; 0x1d14 <_ZN6SdFile4readEPvj+0x116>
    1d20:	46 85       	ldd	r20, Z+14	; 0x0e
    1d22:	57 85       	ldd	r21, Z+15	; 0x0f
    1d24:	60 89       	ldd	r22, Z+16	; 0x10
    1d26:	71 89       	ldd	r23, Z+17	; 0x11
    1d28:	84 0f       	add	r24, r20
    1d2a:	95 1f       	adc	r25, r21
    1d2c:	a6 1f       	adc	r26, r22
    1d2e:	b7 1f       	adc	r27, r23
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	67 0d       	add	r22, r7
    1d36:	71 1d       	adc	r23, r1
    1d38:	81 1d       	adc	r24, r1
    1d3a:	91 1d       	adc	r25, r1
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	32 e0       	ldi	r19, 0x02	; 2
    1d40:	2c 19       	sub	r18, r12
    1d42:	3d 09       	sbc	r19, r13
    1d44:	32 01       	movw	r6, r4
    1d46:	24 15       	cp	r18, r4
    1d48:	35 05       	cpc	r19, r5
    1d4a:	08 f4       	brcc	.+2      	; 0x1d4e <_ZN6SdFile4readEPvj+0x150>
    1d4c:	39 01       	movw	r6, r18
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	26 fd       	sbrc	r18, 6
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <_ZN6SdFile4readEPvj+0x15e>
    1d54:	61 14       	cp	r6, r1
    1d56:	f2 e0       	ldi	r31, 0x02	; 2
    1d58:	7f 06       	cpc	r7, r31
    1d5a:	71 f5       	brne	.+92     	; 0x1db8 <_ZN6SdFile4readEPvj+0x1ba>
    1d5c:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    1d60:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1d64:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1d68:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1d6c:	60 17       	cp	r22, r16
    1d6e:	71 07       	cpc	r23, r17
    1d70:	82 07       	cpc	r24, r18
    1d72:	93 07       	cpc	r25, r19
    1d74:	19 f4       	brne	.+6      	; 0x1d7c <_ZN6SdFile4readEPvj+0x17e>
    1d76:	20 c0       	rjmp	.+64     	; 0x1db8 <_ZN6SdFile4readEPvj+0x1ba>
    1d78:	c4 01       	movw	r24, r8
    1d7a:	30 c0       	rjmp	.+96     	; 0x1ddc <_ZN6SdFile4readEPvj+0x1de>
    1d7c:	75 01       	movw	r14, r10
    1d7e:	83 01       	movw	r16, r6
    1d80:	96 01       	movw	r18, r12
    1d82:	ab 01       	movw	r20, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_ZN8SdVolume7sdCard_E>
    1d8a:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_ZN8SdVolume7sdCard_E+0x1>
    1d8e:	7c dd       	rcall	.-1288   	; 0x1888 <_ZN7Sd2Card8readDataEmjjPh>
    1d90:	88 23       	and	r24, r24
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <_ZN6SdFile4readEPvj+0x198>
    1d94:	4c cf       	rjmp	.-360    	; 0x1c2e <_ZN6SdFile4readEPvj+0x30>
    1d96:	a6 0c       	add	r10, r6
    1d98:	b7 1c       	adc	r11, r7
    1d9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d9e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1da0:	bd 85       	ldd	r27, Y+13	; 0x0d
    1da2:	86 0d       	add	r24, r6
    1da4:	97 1d       	adc	r25, r7
    1da6:	a1 1d       	adc	r26, r1
    1da8:	b1 1d       	adc	r27, r1
    1daa:	8a 87       	std	Y+10, r24	; 0x0a
    1dac:	9b 87       	std	Y+11, r25	; 0x0b
    1dae:	ac 87       	std	Y+12, r26	; 0x0c
    1db0:	bd 87       	std	Y+13, r27	; 0x0d
    1db2:	46 18       	sub	r4, r6
    1db4:	57 08       	sbc	r5, r7
    1db6:	5f cf       	rjmp	.-322    	; 0x1c76 <_ZN6SdFile4readEPvj+0x78>
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	2d d5       	rcall	.+2650   	; 0x2816 <_ZN8SdVolume13cacheRawBlockEmh>
    1dbc:	88 23       	and	r24, r24
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <_ZN6SdFile4readEPvj+0x1c4>
    1dc0:	36 cf       	rjmp	.-404    	; 0x1c2e <_ZN6SdFile4readEPvj+0x30>
    1dc2:	f6 01       	movw	r30, r12
    1dc4:	e4 53       	subi	r30, 0x34	; 52
    1dc6:	fc 4f       	sbci	r31, 0xFC	; 252
    1dc8:	d5 01       	movw	r26, r10
    1dca:	cf 01       	movw	r24, r30
    1dcc:	86 0d       	add	r24, r6
    1dce:	97 1d       	adc	r25, r7
    1dd0:	8e 17       	cp	r24, r30
    1dd2:	9f 07       	cpc	r25, r31
    1dd4:	01 f3       	breq	.-64     	; 0x1d96 <_ZN6SdFile4readEPvj+0x198>
    1dd6:	21 91       	ld	r18, Z+
    1dd8:	2d 93       	st	X+, r18
    1dda:	fa cf       	rjmp	.-12     	; 0x1dd0 <_ZN6SdFile4readEPvj+0x1d2>
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	bf 90       	pop	r11
    1dee:	af 90       	pop	r10
    1df0:	9f 90       	pop	r9
    1df2:	8f 90       	pop	r8
    1df4:	7f 90       	pop	r7
    1df6:	6f 90       	pop	r6
    1df8:	5f 90       	pop	r5
    1dfa:	4f 90       	pop	r4
    1dfc:	3f 90       	pop	r3
    1dfe:	2f 90       	pop	r2
    1e00:	08 95       	ret

00001e02 <_ZN6SdFile12readDirCacheEv>:
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	1f 92       	push	r1
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	fc 01       	movw	r30, r24
    1e14:	25 81       	ldd	r18, Z+5	; 0x05
    1e16:	22 30       	cpi	r18, 0x02	; 2
    1e18:	18 f4       	brcc	.+6      	; 0x1e20 <_ZN6SdFile12readDirCacheEv+0x1e>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	32 c0       	rjmp	.+100    	; 0x1e84 <_ZN6SdFile12readDirCacheEv+0x82>
    1e20:	8c 01       	movw	r16, r24
    1e22:	fc 01       	movw	r30, r24
    1e24:	42 85       	ldd	r20, Z+10	; 0x0a
    1e26:	53 85       	ldd	r21, Z+11	; 0x0b
    1e28:	64 85       	ldd	r22, Z+12	; 0x0c
    1e2a:	75 85       	ldd	r23, Z+13	; 0x0d
    1e2c:	85 e0       	ldi	r24, 0x05	; 5
    1e2e:	76 95       	lsr	r23
    1e30:	67 95       	ror	r22
    1e32:	57 95       	ror	r21
    1e34:	47 95       	ror	r20
    1e36:	8a 95       	dec	r24
    1e38:	d1 f7       	brne	.-12     	; 0x1e2e <_ZN6SdFile12readDirCacheEv+0x2c>
    1e3a:	f4 2f       	mov	r31, r20
    1e3c:	ff 70       	andi	r31, 0x0F	; 15
    1e3e:	ff 2e       	mov	r15, r31
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	be 01       	movw	r22, r28
    1e46:	6f 5f       	subi	r22, 0xFF	; 255
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	c8 01       	movw	r24, r16
    1e4c:	d8 de       	rcall	.-592    	; 0x1bfe <_ZN6SdFile4readEPvj>
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	19 f4       	brne	.+6      	; 0x1e58 <_ZN6SdFile12readDirCacheEv+0x56>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <_ZN6SdFile12readDirCacheEv+0x5a>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	e9 f2       	breq	.-70     	; 0x1e1a <_ZN6SdFile12readDirCacheEv+0x18>
    1e60:	f8 01       	movw	r30, r16
    1e62:	82 85       	ldd	r24, Z+10	; 0x0a
    1e64:	93 85       	ldd	r25, Z+11	; 0x0b
    1e66:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e68:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e6a:	4f 96       	adiw	r24, 0x1f	; 31
    1e6c:	a1 1d       	adc	r26, r1
    1e6e:	b1 1d       	adc	r27, r1
    1e70:	82 87       	std	Z+10, r24	; 0x0a
    1e72:	93 87       	std	Z+11, r25	; 0x0b
    1e74:	a4 87       	std	Z+12, r26	; 0x0c
    1e76:	b5 87       	std	Z+13, r27	; 0x0d
    1e78:	f0 e2       	ldi	r31, 0x20	; 32
    1e7a:	ff 9e       	mul	r15, r31
    1e7c:	c0 01       	movw	r24, r0
    1e7e:	11 24       	eor	r1, r1
    1e80:	84 53       	subi	r24, 0x34	; 52
    1e82:	9c 4f       	sbci	r25, 0xFC	; 252
    1e84:	0f 90       	pop	r0
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	08 95       	ret

00001e92 <_ZN6SdFile7seekSetEm>:
    1e92:	8f 92       	push	r8
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	ec 01       	movw	r28, r24
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	81 11       	cpse	r24, r1
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <_ZN6SdFile7seekSetEm+0x24>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	77 c0       	rjmp	.+238    	; 0x1fa4 <_ZN6SdFile7seekSetEm+0x112>
    1eb6:	0b 89       	ldd	r16, Y+19	; 0x13
    1eb8:	1c 89       	ldd	r17, Y+20	; 0x14
    1eba:	2d 89       	ldd	r18, Y+21	; 0x15
    1ebc:	3e 89       	ldd	r19, Y+22	; 0x16
    1ebe:	04 17       	cp	r16, r20
    1ec0:	15 07       	cpc	r17, r21
    1ec2:	26 07       	cpc	r18, r22
    1ec4:	37 07       	cpc	r19, r23
    1ec6:	a8 f3       	brcs	.-22     	; 0x1eb2 <_ZN6SdFile7seekSetEm+0x20>
    1ec8:	6a 01       	movw	r12, r20
    1eca:	7b 01       	movw	r14, r22
    1ecc:	82 30       	cpi	r24, 0x02	; 2
    1ece:	29 f4       	brne	.+10     	; 0x1eda <_ZN6SdFile7seekSetEm+0x48>
    1ed0:	ca 86       	std	Y+10, r12	; 0x0a
    1ed2:	db 86       	std	Y+11, r13	; 0x0b
    1ed4:	ec 86       	std	Y+12, r14	; 0x0c
    1ed6:	fd 86       	std	Y+13, r15	; 0x0d
    1ed8:	0d c0       	rjmp	.+26     	; 0x1ef4 <_ZN6SdFile7seekSetEm+0x62>
    1eda:	c1 14       	cp	r12, r1
    1edc:	d1 04       	cpc	r13, r1
    1ede:	e1 04       	cpc	r14, r1
    1ee0:	f1 04       	cpc	r15, r1
    1ee2:	51 f4       	brne	.+20     	; 0x1ef8 <_ZN6SdFile7seekSetEm+0x66>
    1ee4:	1e 82       	std	Y+6, r1	; 0x06
    1ee6:	1f 82       	std	Y+7, r1	; 0x07
    1ee8:	18 86       	std	Y+8, r1	; 0x08
    1eea:	19 86       	std	Y+9, r1	; 0x09
    1eec:	1a 86       	std	Y+10, r1	; 0x0a
    1eee:	1b 86       	std	Y+11, r1	; 0x0b
    1ef0:	1c 86       	std	Y+12, r1	; 0x0c
    1ef2:	1d 86       	std	Y+13, r1	; 0x0d
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	56 c0       	rjmp	.+172    	; 0x1fa4 <_ZN6SdFile7seekSetEm+0x112>
    1ef8:	8a 84       	ldd	r8, Y+10	; 0x0a
    1efa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1efc:	ac 84       	ldd	r10, Y+12	; 0x0c
    1efe:	bd 84       	ldd	r11, Y+13	; 0x0d
    1f00:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f02:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1f04:	25 85       	ldd	r18, Z+13	; 0x0d
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	27 5f       	subi	r18, 0xF7	; 247
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	b5 01       	movw	r22, r10
    1f0e:	a4 01       	movw	r20, r8
    1f10:	41 50       	subi	r20, 0x01	; 1
    1f12:	51 09       	sbc	r21, r1
    1f14:	61 09       	sbc	r22, r1
    1f16:	71 09       	sbc	r23, r1
    1f18:	02 2e       	mov	r0, r18
    1f1a:	04 c0       	rjmp	.+8      	; 0x1f24 <_ZN6SdFile7seekSetEm+0x92>
    1f1c:	76 95       	lsr	r23
    1f1e:	67 95       	ror	r22
    1f20:	57 95       	ror	r21
    1f22:	47 95       	ror	r20
    1f24:	0a 94       	dec	r0
    1f26:	d2 f7       	brpl	.-12     	; 0x1f1c <_ZN6SdFile7seekSetEm+0x8a>
    1f28:	d7 01       	movw	r26, r14
    1f2a:	c6 01       	movw	r24, r12
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	a1 09       	sbc	r26, r1
    1f30:	b1 09       	sbc	r27, r1
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <_ZN6SdFile7seekSetEm+0xaa>
    1f34:	b6 95       	lsr	r27
    1f36:	a7 95       	ror	r26
    1f38:	97 95       	ror	r25
    1f3a:	87 95       	ror	r24
    1f3c:	2a 95       	dec	r18
    1f3e:	d2 f7       	brpl	.-12     	; 0x1f34 <_ZN6SdFile7seekSetEm+0xa2>
    1f40:	84 17       	cp	r24, r20
    1f42:	95 07       	cpc	r25, r21
    1f44:	a6 07       	cpc	r26, r22
    1f46:	b7 07       	cpc	r27, r23
    1f48:	20 f0       	brcs	.+8      	; 0x1f52 <_ZN6SdFile7seekSetEm+0xc0>
    1f4a:	89 28       	or	r8, r9
    1f4c:	8a 28       	or	r8, r10
    1f4e:	8b 28       	or	r8, r11
    1f50:	71 f4       	brne	.+28     	; 0x1f6e <_ZN6SdFile7seekSetEm+0xdc>
    1f52:	4f 89       	ldd	r20, Y+23	; 0x17
    1f54:	58 8d       	ldd	r21, Y+24	; 0x18
    1f56:	69 8d       	ldd	r22, Y+25	; 0x19
    1f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5a:	4e 83       	std	Y+6, r20	; 0x06
    1f5c:	5f 83       	std	Y+7, r21	; 0x07
    1f5e:	68 87       	std	Y+8, r22	; 0x08
    1f60:	79 87       	std	Y+9, r23	; 0x09
    1f62:	4c 01       	movw	r8, r24
    1f64:	5d 01       	movw	r10, r26
    1f66:	8e 01       	movw	r16, r28
    1f68:	0a 5f       	subi	r16, 0xFA	; 250
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	15 c0       	rjmp	.+42     	; 0x1f98 <_ZN6SdFile7seekSetEm+0x106>
    1f6e:	84 1b       	sub	r24, r20
    1f70:	95 0b       	sbc	r25, r21
    1f72:	a6 0b       	sbc	r26, r22
    1f74:	b7 0b       	sbc	r27, r23
    1f76:	f5 cf       	rjmp	.-22     	; 0x1f62 <_ZN6SdFile7seekSetEm+0xd0>
    1f78:	4e 81       	ldd	r20, Y+6	; 0x06
    1f7a:	5f 81       	ldd	r21, Y+7	; 0x07
    1f7c:	68 85       	ldd	r22, Y+8	; 0x08
    1f7e:	79 85       	ldd	r23, Y+9	; 0x09
    1f80:	98 01       	movw	r18, r16
    1f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f86:	a3 d4       	rcall	.+2374   	; 0x28ce <_ZNK8SdVolume6fatGetEmPm>
    1f88:	91 e0       	ldi	r25, 0x01	; 1
    1f8a:	89 1a       	sub	r8, r25
    1f8c:	91 08       	sbc	r9, r1
    1f8e:	a1 08       	sbc	r10, r1
    1f90:	b1 08       	sbc	r11, r1
    1f92:	88 23       	and	r24, r24
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <_ZN6SdFile7seekSetEm+0x106>
    1f96:	8d cf       	rjmp	.-230    	; 0x1eb2 <_ZN6SdFile7seekSetEm+0x20>
    1f98:	81 14       	cp	r8, r1
    1f9a:	91 04       	cpc	r9, r1
    1f9c:	a1 04       	cpc	r10, r1
    1f9e:	b1 04       	cpc	r11, r1
    1fa0:	59 f7       	brne	.-42     	; 0x1f78 <_ZN6SdFile7seekSetEm+0xe6>
    1fa2:	96 cf       	rjmp	.-212    	; 0x1ed0 <_ZN6SdFile7seekSetEm+0x3e>
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	ff 90       	pop	r15
    1fae:	ef 90       	pop	r14
    1fb0:	df 90       	pop	r13
    1fb2:	cf 90       	pop	r12
    1fb4:	bf 90       	pop	r11
    1fb6:	af 90       	pop	r10
    1fb8:	9f 90       	pop	r9
    1fba:	8f 90       	pop	r8
    1fbc:	08 95       	ret

00001fbe <_ZN6SdFile4syncEv>:
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	ec 01       	movw	r28, r24
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	88 23       	and	r24, r24
    1fcc:	b9 f1       	breq	.+110    	; 0x203c <_ZN6SdFile4syncEv+0x7e>
    1fce:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd0:	87 ff       	sbrs	r24, 7
    1fd2:	2f c0       	rjmp	.+94     	; 0x2032 <_ZN6SdFile4syncEv+0x74>
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	71 dd       	rcall	.-1310   	; 0x1abc <_ZN6SdFile13cacheDirEntryEh>
    1fda:	8c 01       	movw	r16, r24
    1fdc:	89 2b       	or	r24, r25
    1fde:	71 f1       	breq	.+92     	; 0x203c <_ZN6SdFile4syncEv+0x7e>
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	48 f4       	brcc	.+18     	; 0x1ff8 <_ZN6SdFile4syncEv+0x3a>
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	ad 89       	ldd	r26, Y+21	; 0x15
    1fec:	be 89       	ldd	r27, Y+22	; 0x16
    1fee:	f8 01       	movw	r30, r16
    1ff0:	84 8f       	std	Z+28, r24	; 0x1c
    1ff2:	95 8f       	std	Z+29, r25	; 0x1d
    1ff4:	a6 8f       	std	Z+30, r26	; 0x1e
    1ff6:	b7 8f       	std	Z+31, r27	; 0x1f
    1ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffc:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ffe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2000:	f8 01       	movw	r30, r16
    2002:	93 8f       	std	Z+27, r25	; 0x1b
    2004:	82 8f       	std	Z+26, r24	; 0x1a
    2006:	b5 8b       	std	Z+21, r27	; 0x15
    2008:	a4 8b       	std	Z+20, r26	; 0x14
    200a:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <_ZN6SdFile9dateTime_E>
    200e:	f0 91 c4 03 	lds	r31, 0x03C4	; 0x8003c4 <_ZN6SdFile9dateTime_E+0x1>
    2012:	30 97       	sbiw	r30, 0x00	; 0
    2014:	59 f0       	breq	.+22     	; 0x202c <_ZN6SdFile4syncEv+0x6e>
    2016:	b8 01       	movw	r22, r16
    2018:	6a 5e       	subi	r22, 0xEA	; 234
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	c8 01       	movw	r24, r16
    201e:	48 96       	adiw	r24, 0x18	; 24
    2020:	19 95       	eicall
    2022:	f8 01       	movw	r30, r16
    2024:	80 8d       	ldd	r24, Z+24	; 0x18
    2026:	91 8d       	ldd	r25, Z+25	; 0x19
    2028:	93 8b       	std	Z+19, r25	; 0x13
    202a:	82 8b       	std	Z+18, r24	; 0x12
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	8f 77       	andi	r24, 0x7F	; 127
    2030:	8c 83       	std	Y+4, r24	; 0x04
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	b4 c3       	rjmp	.+1896   	; 0x27a4 <_ZN8SdVolume10cacheFlushEv>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <_ZN6SdFile5closeEv>:
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	ec 01       	movw	r28, r24
    204e:	b7 df       	rcall	.-146    	; 0x1fbe <_ZN6SdFile4syncEv>
    2050:	88 23       	and	r24, r24
    2052:	11 f0       	breq	.+4      	; 0x2058 <_ZN6SdFile5closeEv+0x10>
    2054:	1d 82       	std	Y+5, r1	; 0x05
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	08 95       	ret

0000205e <_ZN6SdFile8truncateEm>:
    205e:	4f 92       	push	r4
    2060:	5f 92       	push	r5
    2062:	6f 92       	push	r6
    2064:	7f 92       	push	r7
    2066:	8f 92       	push	r8
    2068:	9f 92       	push	r9
    206a:	af 92       	push	r10
    206c:	bf 92       	push	r11
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	00 d0       	rcall	.+0      	; 0x207c <_ZN6SdFile8truncateEm+0x1e>
    207c:	1f 92       	push	r1
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	fc 01       	movw	r30, r24
    2084:	85 81       	ldd	r24, Z+5	; 0x05
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	e1 f4       	brne	.+56     	; 0x20c2 <_ZN6SdFile8truncateEm+0x64>
    208a:	84 81       	ldd	r24, Z+4	; 0x04
    208c:	81 ff       	sbrs	r24, 1
    208e:	19 c0       	rjmp	.+50     	; 0x20c2 <_ZN6SdFile8truncateEm+0x64>
    2090:	83 89       	ldd	r24, Z+19	; 0x13
    2092:	94 89       	ldd	r25, Z+20	; 0x14
    2094:	a5 89       	ldd	r26, Z+21	; 0x15
    2096:	b6 89       	ldd	r27, Z+22	; 0x16
    2098:	84 17       	cp	r24, r20
    209a:	95 07       	cpc	r25, r21
    209c:	a6 07       	cpc	r26, r22
    209e:	b7 07       	cpc	r27, r23
    20a0:	80 f0       	brcs	.+32     	; 0x20c2 <_ZN6SdFile8truncateEm+0x64>
    20a2:	89 2b       	or	r24, r25
    20a4:	8a 2b       	or	r24, r26
    20a6:	8b 2b       	or	r24, r27
    20a8:	09 f4       	brne	.+2      	; 0x20ac <_ZN6SdFile8truncateEm+0x4e>
    20aa:	72 c0       	rjmp	.+228    	; 0x2190 <_ZN6SdFile8truncateEm+0x132>
    20ac:	4a 01       	movw	r8, r20
    20ae:	5b 01       	movw	r10, r22
    20b0:	7f 01       	movw	r14, r30
    20b2:	42 84       	ldd	r4, Z+10	; 0x0a
    20b4:	53 84       	ldd	r5, Z+11	; 0x0b
    20b6:	64 84       	ldd	r6, Z+12	; 0x0c
    20b8:	75 84       	ldd	r7, Z+13	; 0x0d
    20ba:	cf 01       	movw	r24, r30
    20bc:	ea de       	rcall	.-556    	; 0x1e92 <_ZN6SdFile7seekSetEm>
    20be:	81 11       	cpse	r24, r1
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <_ZN6SdFile8truncateEm+0x68>
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	66 c0       	rjmp	.+204    	; 0x2192 <_ZN6SdFile8truncateEm+0x134>
    20c6:	f7 01       	movw	r30, r14
    20c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    20ca:	94 8d       	ldd	r25, Z+28	; 0x1c
    20cc:	81 14       	cp	r8, r1
    20ce:	91 04       	cpc	r9, r1
    20d0:	a1 04       	cpc	r10, r1
    20d2:	b1 04       	cpc	r11, r1
    20d4:	69 f4       	brne	.+26     	; 0x20f0 <_ZN6SdFile8truncateEm+0x92>
    20d6:	47 89       	ldd	r20, Z+23	; 0x17
    20d8:	50 8d       	ldd	r21, Z+24	; 0x18
    20da:	61 8d       	ldd	r22, Z+25	; 0x19
    20dc:	72 8d       	ldd	r23, Z+26	; 0x1a
    20de:	92 d6       	rcall	.+3364   	; 0x2e04 <_ZN8SdVolume9freeChainEm>
    20e0:	88 23       	and	r24, r24
    20e2:	79 f3       	breq	.-34     	; 0x20c2 <_ZN6SdFile8truncateEm+0x64>
    20e4:	f7 01       	movw	r30, r14
    20e6:	17 8a       	std	Z+23, r1	; 0x17
    20e8:	10 8e       	std	Z+24, r1	; 0x18
    20ea:	11 8e       	std	Z+25, r1	; 0x19
    20ec:	12 8e       	std	Z+26, r1	; 0x1a
    20ee:	37 c0       	rjmp	.+110    	; 0x215e <_ZN6SdFile8truncateEm+0x100>
    20f0:	f7 01       	movw	r30, r14
    20f2:	46 81       	ldd	r20, Z+6	; 0x06
    20f4:	57 81       	ldd	r21, Z+7	; 0x07
    20f6:	60 85       	ldd	r22, Z+8	; 0x08
    20f8:	71 85       	ldd	r23, Z+9	; 0x09
    20fa:	9e 01       	movw	r18, r28
    20fc:	2f 5f       	subi	r18, 0xFF	; 255
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	e6 d3       	rcall	.+1996   	; 0x28ce <_ZNK8SdVolume6fatGetEmPm>
    2102:	88 23       	and	r24, r24
    2104:	f1 f2       	breq	.-68     	; 0x20c2 <_ZN6SdFile8truncateEm+0x64>
    2106:	49 81       	ldd	r20, Y+1	; 0x01
    2108:	5a 81       	ldd	r21, Y+2	; 0x02
    210a:	6b 81       	ldd	r22, Y+3	; 0x03
    210c:	7c 81       	ldd	r23, Y+4	; 0x04
    210e:	f7 01       	movw	r30, r14
    2110:	83 8d       	ldd	r24, Z+27	; 0x1b
    2112:	94 8d       	ldd	r25, Z+28	; 0x1c
    2114:	fc 01       	movw	r30, r24
    2116:	27 89       	ldd	r18, Z+23	; 0x17
    2118:	20 31       	cpi	r18, 0x10	; 16
    211a:	29 f0       	breq	.+10     	; 0x2126 <_ZN6SdFile8truncateEm+0xc8>
    211c:	08 ef       	ldi	r16, 0xF8	; 248
    211e:	1f ef       	ldi	r17, 0xFF	; 255
    2120:	2f ef       	ldi	r18, 0xFF	; 255
    2122:	3f e0       	ldi	r19, 0x0F	; 15
    2124:	04 c0       	rjmp	.+8      	; 0x212e <_ZN6SdFile8truncateEm+0xd0>
    2126:	08 ef       	ldi	r16, 0xF8	; 248
    2128:	1f ef       	ldi	r17, 0xFF	; 255
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 17       	cp	r20, r16
    2130:	51 07       	cpc	r21, r17
    2132:	62 07       	cpc	r22, r18
    2134:	73 07       	cpc	r23, r19
    2136:	98 f4       	brcc	.+38     	; 0x215e <_ZN6SdFile8truncateEm+0x100>
    2138:	65 d6       	rcall	.+3274   	; 0x2e04 <_ZN8SdVolume9freeChainEm>
    213a:	88 23       	and	r24, r24
    213c:	09 f4       	brne	.+2      	; 0x2140 <_ZN6SdFile8truncateEm+0xe2>
    213e:	c1 cf       	rjmp	.-126    	; 0x20c2 <_ZN6SdFile8truncateEm+0x64>
    2140:	f7 01       	movw	r30, r14
    2142:	46 81       	ldd	r20, Z+6	; 0x06
    2144:	57 81       	ldd	r21, Z+7	; 0x07
    2146:	60 85       	ldd	r22, Z+8	; 0x08
    2148:	71 85       	ldd	r23, Z+9	; 0x09
    214a:	0f ef       	ldi	r16, 0xFF	; 255
    214c:	1f ef       	ldi	r17, 0xFF	; 255
    214e:	2f ef       	ldi	r18, 0xFF	; 255
    2150:	3f e0       	ldi	r19, 0x0F	; 15
    2152:	83 8d       	ldd	r24, Z+27	; 0x1b
    2154:	94 8d       	ldd	r25, Z+28	; 0x1c
    2156:	a5 d4       	rcall	.+2378   	; 0x2aa2 <_ZN8SdVolume6fatPutEmm>
    2158:	88 23       	and	r24, r24
    215a:	09 f4       	brne	.+2      	; 0x215e <_ZN6SdFile8truncateEm+0x100>
    215c:	b2 cf       	rjmp	.-156    	; 0x20c2 <_ZN6SdFile8truncateEm+0x64>
    215e:	f7 01       	movw	r30, r14
    2160:	83 8a       	std	Z+19, r8	; 0x13
    2162:	94 8a       	std	Z+20, r9	; 0x14
    2164:	a5 8a       	std	Z+21, r10	; 0x15
    2166:	b6 8a       	std	Z+22, r11	; 0x16
    2168:	84 81       	ldd	r24, Z+4	; 0x04
    216a:	80 68       	ori	r24, 0x80	; 128
    216c:	84 83       	std	Z+4, r24	; 0x04
    216e:	c7 01       	movw	r24, r14
    2170:	26 df       	rcall	.-436    	; 0x1fbe <_ZN6SdFile4syncEv>
    2172:	88 23       	and	r24, r24
    2174:	09 f4       	brne	.+2      	; 0x2178 <_ZN6SdFile8truncateEm+0x11a>
    2176:	a5 cf       	rjmp	.-182    	; 0x20c2 <_ZN6SdFile8truncateEm+0x64>
    2178:	b5 01       	movw	r22, r10
    217a:	a4 01       	movw	r20, r8
    217c:	48 14       	cp	r4, r8
    217e:	59 04       	cpc	r5, r9
    2180:	6a 04       	cpc	r6, r10
    2182:	7b 04       	cpc	r7, r11
    2184:	10 f4       	brcc	.+4      	; 0x218a <_ZN6SdFile8truncateEm+0x12c>
    2186:	b3 01       	movw	r22, r6
    2188:	a2 01       	movw	r20, r4
    218a:	c7 01       	movw	r24, r14
    218c:	82 de       	rcall	.-764    	; 0x1e92 <_ZN6SdFile7seekSetEm>
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <_ZN6SdFile8truncateEm+0x134>
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	bf 90       	pop	r11
    21a8:	af 90       	pop	r10
    21aa:	9f 90       	pop	r9
    21ac:	8f 90       	pop	r8
    21ae:	7f 90       	pop	r7
    21b0:	6f 90       	pop	r6
    21b2:	5f 90       	pop	r5
    21b4:	4f 90       	pop	r4
    21b6:	08 95       	ret

000021b8 <_ZN6SdFile15openCachedEntryEhh>:
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	ec 01       	movw	r28, r24
    21c0:	80 e2       	ldi	r24, 0x20	; 32
    21c2:	68 9f       	mul	r22, r24
    21c4:	f0 01       	movw	r30, r0
    21c6:	11 24       	eor	r1, r1
    21c8:	e4 53       	subi	r30, 0x34	; 52
    21ca:	fc 4f       	sbci	r31, 0xFC	; 252
    21cc:	93 85       	ldd	r25, Z+11	; 0x0b
    21ce:	91 71       	andi	r25, 0x11	; 17
    21d0:	29 f0       	breq	.+10     	; 0x21dc <_ZN6SdFile15openCachedEntryEhh+0x24>
    21d2:	84 2f       	mov	r24, r20
    21d4:	82 74       	andi	r24, 0x42	; 66
    21d6:	11 f0       	breq	.+4      	; 0x21dc <_ZN6SdFile15openCachedEntryEhh+0x24>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	50 c0       	rjmp	.+160    	; 0x227c <__stack+0x7d>
    21dc:	14 2f       	mov	r17, r20
    21de:	6a 8b       	std	Y+18, r22	; 0x12
    21e0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    21e4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    21e8:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    21ec:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    21f0:	8e 87       	std	Y+14, r24	; 0x0e
    21f2:	9f 87       	std	Y+15, r25	; 0x0f
    21f4:	a8 8b       	std	Y+16, r26	; 0x10
    21f6:	b9 8b       	std	Y+17, r27	; 0x11
    21f8:	44 89       	ldd	r20, Z+20	; 0x14
    21fa:	55 89       	ldd	r21, Z+21	; 0x15
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	ba 01       	movw	r22, r20
    2202:	55 27       	eor	r21, r21
    2204:	44 27       	eor	r20, r20
    2206:	82 8d       	ldd	r24, Z+26	; 0x1a
    2208:	93 8d       	ldd	r25, Z+27	; 0x1b
    220a:	a0 e0       	ldi	r26, 0x00	; 0
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	48 2b       	or	r20, r24
    2210:	59 2b       	or	r21, r25
    2212:	6a 2b       	or	r22, r26
    2214:	7b 2b       	or	r23, r27
    2216:	4f 8b       	std	Y+23, r20	; 0x17
    2218:	58 8f       	std	Y+24, r21	; 0x18
    221a:	69 8f       	std	Y+25, r22	; 0x19
    221c:	7a 8f       	std	Y+26, r23	; 0x1a
    221e:	83 85       	ldd	r24, Z+11	; 0x0b
    2220:	88 71       	andi	r24, 0x18	; 24
    2222:	51 f4       	brne	.+20     	; 0x2238 <__stack+0x39>
    2224:	84 8d       	ldd	r24, Z+28	; 0x1c
    2226:	95 8d       	ldd	r25, Z+29	; 0x1d
    2228:	a6 8d       	ldd	r26, Z+30	; 0x1e
    222a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    222c:	8b 8b       	std	Y+19, r24	; 0x13
    222e:	9c 8b       	std	Y+20, r25	; 0x14
    2230:	ad 8b       	std	Y+21, r26	; 0x15
    2232:	be 8b       	std	Y+22, r27	; 0x16
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	0b c0       	rjmp	.+22     	; 0x224e <__stack+0x4f>
    2238:	80 31       	cpi	r24, 0x10	; 16
    223a:	71 f6       	brne	.-100    	; 0x21d8 <_ZN6SdFile15openCachedEntryEhh+0x20>
    223c:	9e 01       	movw	r18, r28
    223e:	2d 5e       	subi	r18, 0xED	; 237
    2240:	3f 4f       	sbci	r19, 0xFF	; 255
    2242:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2244:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2246:	c5 d3       	rcall	.+1930   	; 0x29d2 <_ZNK8SdVolume9chainSizeEmPm>
    2248:	88 23       	and	r24, r24
    224a:	31 f2       	breq	.-116    	; 0x21d8 <_ZN6SdFile15openCachedEntryEhh+0x20>
    224c:	84 e0       	ldi	r24, 0x04	; 4
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	81 2f       	mov	r24, r17
    2252:	8f 70       	andi	r24, 0x0F	; 15
    2254:	8c 83       	std	Y+4, r24	; 0x04
    2256:	1e 82       	std	Y+6, r1	; 0x06
    2258:	1f 82       	std	Y+7, r1	; 0x07
    225a:	18 86       	std	Y+8, r1	; 0x08
    225c:	19 86       	std	Y+9, r1	; 0x09
    225e:	1a 86       	std	Y+10, r1	; 0x0a
    2260:	1b 86       	std	Y+11, r1	; 0x0b
    2262:	1c 86       	std	Y+12, r1	; 0x0c
    2264:	1d 86       	std	Y+13, r1	; 0x0d
    2266:	16 ff       	sbrs	r17, 6
    2268:	08 c0       	rjmp	.+16     	; 0x227a <__stack+0x7b>
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	ba 01       	movw	r22, r20
    2270:	ce 01       	movw	r24, r28
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	f2 ce       	rjmp	.-540    	; 0x205e <_ZN6SdFile8truncateEm>
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	08 95       	ret

00002284 <_ZN6SdFile4openEPS_PKch>:
    2284:	bf 92       	push	r11
    2286:	cf 92       	push	r12
    2288:	df 92       	push	r13
    228a:	ef 92       	push	r14
    228c:	ff 92       	push	r15
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	2b 97       	sbiw	r28, 0x0b	; 11
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	fc 01       	movw	r30, r24
    22a8:	35 81       	ldd	r19, Z+5	; 0x05
    22aa:	31 11       	cpse	r19, r1
    22ac:	b9 c0       	rjmp	.+370    	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    22ae:	c2 2e       	mov	r12, r18
    22b0:	8b 01       	movw	r16, r22
    22b2:	7c 01       	movw	r14, r24
    22b4:	be 01       	movw	r22, r28
    22b6:	6f 5f       	subi	r22, 0xFF	; 255
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	ca 01       	movw	r24, r20
    22bc:	17 dc       	rcall	.-2002   	; 0x1aec <_ZN6SdFile10make83NameEPKcPh>
    22be:	88 23       	and	r24, r24
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <_ZN6SdFile4openEPS_PKch+0x40>
    22c2:	ae c0       	rjmp	.+348    	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    22c4:	f8 01       	movw	r30, r16
    22c6:	83 8d       	ldd	r24, Z+27	; 0x1b
    22c8:	94 8d       	ldd	r25, Z+28	; 0x1c
    22ca:	f7 01       	movw	r30, r14
    22cc:	94 8f       	std	Z+28, r25	; 0x1c
    22ce:	83 8f       	std	Z+27, r24	; 0x1b
    22d0:	f8 01       	movw	r30, r16
    22d2:	16 82       	std	Z+6, r1	; 0x06
    22d4:	17 82       	std	Z+7, r1	; 0x07
    22d6:	10 86       	std	Z+8, r1	; 0x08
    22d8:	11 86       	std	Z+9, r1	; 0x09
    22da:	12 86       	std	Z+10, r1	; 0x0a
    22dc:	13 86       	std	Z+11, r1	; 0x0b
    22de:	14 86       	std	Z+12, r1	; 0x0c
    22e0:	15 86       	std	Z+13, r1	; 0x0d
    22e2:	d1 2c       	mov	r13, r1
    22e4:	f8 01       	movw	r30, r16
    22e6:	82 85       	ldd	r24, Z+10	; 0x0a
    22e8:	93 85       	ldd	r25, Z+11	; 0x0b
    22ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    22ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    22ee:	43 89       	ldd	r20, Z+19	; 0x13
    22f0:	54 89       	ldd	r21, Z+20	; 0x14
    22f2:	65 89       	ldd	r22, Z+21	; 0x15
    22f4:	76 89       	ldd	r23, Z+22	; 0x16
    22f6:	84 17       	cp	r24, r20
    22f8:	95 07       	cpc	r25, r21
    22fa:	a6 07       	cpc	r26, r22
    22fc:	b7 07       	cpc	r27, r23
    22fe:	08 f0       	brcs	.+2      	; 0x2302 <_ZN6SdFile4openEPS_PKch+0x7e>
    2300:	3d c0       	rjmp	.+122    	; 0x237c <_ZN6SdFile4openEPS_PKch+0xf8>
    2302:	25 e0       	ldi	r18, 0x05	; 5
    2304:	b6 95       	lsr	r27
    2306:	a7 95       	ror	r26
    2308:	97 95       	ror	r25
    230a:	87 95       	ror	r24
    230c:	2a 95       	dec	r18
    230e:	d1 f7       	brne	.-12     	; 0x2304 <_ZN6SdFile4openEPS_PKch+0x80>
    2310:	f8 2f       	mov	r31, r24
    2312:	ff 70       	andi	r31, 0x0F	; 15
    2314:	bf 2e       	mov	r11, r31
    2316:	c8 01       	movw	r24, r16
    2318:	74 dd       	rcall	.-1304   	; 0x1e02 <_ZN6SdFile12readDirCacheEv>
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	09 f4       	brne	.+2      	; 0x2320 <_ZN6SdFile4openEPS_PKch+0x9c>
    231e:	80 c0       	rjmp	.+256    	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    2320:	fc 01       	movw	r30, r24
    2322:	20 81       	ld	r18, Z
    2324:	22 23       	and	r18, r18
    2326:	a1 f0       	breq	.+40     	; 0x2350 <_ZN6SdFile4openEPS_PKch+0xcc>
    2328:	25 3e       	cpi	r18, 0xE5	; 229
    232a:	09 f4       	brne	.+2      	; 0x232e <_ZN6SdFile4openEPS_PKch+0xaa>
    232c:	7b c0       	rjmp	.+246    	; 0x2424 <_ZN6SdFile4openEPS_PKch+0x1a0>
    232e:	4b e0       	ldi	r20, 0x0B	; 11
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	bc 01       	movw	r22, r24
    2334:	ce 01       	movw	r24, r28
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	0e 94 73 20 	call	0x40e6	; 0x40e6 <memcmp>
    233c:	89 2b       	or	r24, r25
    233e:	91 f6       	brne	.-92     	; 0x22e4 <_ZN6SdFile4openEPS_PKch+0x60>
    2340:	8c 2d       	mov	r24, r12
    2342:	80 73       	andi	r24, 0x30	; 48
    2344:	80 33       	cpi	r24, 0x30	; 48
    2346:	09 f4       	brne	.+2      	; 0x234a <_ZN6SdFile4openEPS_PKch+0xc6>
    2348:	6b c0       	rjmp	.+214    	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    234a:	4c 2d       	mov	r20, r12
    234c:	6b 2d       	mov	r22, r11
    234e:	65 c0       	rjmp	.+202    	; 0x241a <_ZN6SdFile4openEPS_PKch+0x196>
    2350:	d1 10       	cpse	r13, r1
    2352:	12 c0       	rjmp	.+36     	; 0x2378 <_ZN6SdFile4openEPS_PKch+0xf4>
    2354:	f7 01       	movw	r30, r14
    2356:	b2 8a       	std	Z+18, r11	; 0x12
    2358:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    235c:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2360:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2364:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2368:	46 87       	std	Z+14, r20	; 0x0e
    236a:	57 87       	std	Z+15, r21	; 0x0f
    236c:	60 8b       	std	Z+16, r22	; 0x10
    236e:	71 8b       	std	Z+17, r23	; 0x11
    2370:	fc 01       	movw	r30, r24
    2372:	80 81       	ld	r24, Z
    2374:	81 11       	cpse	r24, r1
    2376:	59 c0       	rjmp	.+178    	; 0x242a <_ZN6SdFile4openEPS_PKch+0x1a6>
    2378:	dd 24       	eor	r13, r13
    237a:	d3 94       	inc	r13
    237c:	8c 2d       	mov	r24, r12
    237e:	82 71       	andi	r24, 0x12	; 18
    2380:	82 31       	cpi	r24, 0x12	; 18
    2382:	09 f0       	breq	.+2      	; 0x2386 <_ZN6SdFile4openEPS_PKch+0x102>
    2384:	4d c0       	rjmp	.+154    	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    2386:	dd 20       	and	r13, r13
    2388:	39 f0       	breq	.+14     	; 0x2398 <_ZN6SdFile4openEPS_PKch+0x114>
    238a:	61 e0       	ldi	r22, 0x01	; 1
    238c:	c7 01       	movw	r24, r14
    238e:	96 db       	rcall	.-2260   	; 0x1abc <_ZN6SdFile13cacheDirEntryEh>
    2390:	8c 01       	movw	r16, r24
    2392:	89 2b       	or	r24, r25
    2394:	71 f4       	brne	.+28     	; 0x23b2 <_ZN6SdFile4openEPS_PKch+0x12e>
    2396:	44 c0       	rjmp	.+136    	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    2398:	f8 01       	movw	r30, r16
    239a:	85 81       	ldd	r24, Z+5	; 0x05
    239c:	82 30       	cpi	r24, 0x02	; 2
    239e:	09 f4       	brne	.+2      	; 0x23a2 <_ZN6SdFile4openEPS_PKch+0x11e>
    23a0:	3f c0       	rjmp	.+126    	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    23a2:	c8 01       	movw	r24, r16
    23a4:	2d db       	rcall	.-2470   	; 0x1a00 <_ZN6SdFile13addDirClusterEv>
    23a6:	88 23       	and	r24, r24
    23a8:	d9 f1       	breq	.+118    	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    23aa:	f7 01       	movw	r30, r14
    23ac:	12 8a       	std	Z+18, r1	; 0x12
    23ae:	0c ec       	ldi	r16, 0xCC	; 204
    23b0:	13 e0       	ldi	r17, 0x03	; 3
    23b2:	80 e2       	ldi	r24, 0x20	; 32
    23b4:	f8 01       	movw	r30, r16
    23b6:	11 92       	st	Z+, r1
    23b8:	8a 95       	dec	r24
    23ba:	e9 f7       	brne	.-6      	; 0x23b6 <_ZN6SdFile4openEPS_PKch+0x132>
    23bc:	8b e0       	ldi	r24, 0x0B	; 11
    23be:	fe 01       	movw	r30, r28
    23c0:	31 96       	adiw	r30, 0x01	; 1
    23c2:	d8 01       	movw	r26, r16
    23c4:	01 90       	ld	r0, Z+
    23c6:	0d 92       	st	X+, r0
    23c8:	8a 95       	dec	r24
    23ca:	e1 f7       	brne	.-8      	; 0x23c4 <_ZN6SdFile4openEPS_PKch+0x140>
    23cc:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <_ZN6SdFile9dateTime_E>
    23d0:	f0 91 c4 03 	lds	r31, 0x03C4	; 0x8003c4 <_ZN6SdFile9dateTime_E+0x1>
    23d4:	30 97       	sbiw	r30, 0x00	; 0
    23d6:	39 f0       	breq	.+14     	; 0x23e6 <_ZN6SdFile4openEPS_PKch+0x162>
    23d8:	b8 01       	movw	r22, r16
    23da:	62 5f       	subi	r22, 0xF2	; 242
    23dc:	7f 4f       	sbci	r23, 0xFF	; 255
    23de:	c8 01       	movw	r24, r16
    23e0:	40 96       	adiw	r24, 0x10	; 16
    23e2:	19 95       	eicall
    23e4:	09 c0       	rjmp	.+18     	; 0x23f8 <_ZN6SdFile4openEPS_PKch+0x174>
    23e6:	81 e2       	ldi	r24, 0x21	; 33
    23e8:	98 e2       	ldi	r25, 0x28	; 40
    23ea:	f8 01       	movw	r30, r16
    23ec:	91 8b       	std	Z+17, r25	; 0x11
    23ee:	80 8b       	std	Z+16, r24	; 0x10
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	98 e0       	ldi	r25, 0x08	; 8
    23f4:	97 87       	std	Z+15, r25	; 0x0f
    23f6:	86 87       	std	Z+14, r24	; 0x0e
    23f8:	f8 01       	movw	r30, r16
    23fa:	80 89       	ldd	r24, Z+16	; 0x10
    23fc:	91 89       	ldd	r25, Z+17	; 0x11
    23fe:	93 8b       	std	Z+19, r25	; 0x13
    2400:	82 8b       	std	Z+18, r24	; 0x12
    2402:	91 8f       	std	Z+25, r25	; 0x19
    2404:	80 8f       	std	Z+24, r24	; 0x18
    2406:	86 85       	ldd	r24, Z+14	; 0x0e
    2408:	97 85       	ldd	r25, Z+15	; 0x0f
    240a:	97 8b       	std	Z+23, r25	; 0x17
    240c:	86 8b       	std	Z+22, r24	; 0x16
    240e:	ca d1       	rcall	.+916    	; 0x27a4 <_ZN8SdVolume10cacheFlushEv>
    2410:	88 23       	and	r24, r24
    2412:	31 f0       	breq	.+12     	; 0x2420 <_ZN6SdFile4openEPS_PKch+0x19c>
    2414:	4c 2d       	mov	r20, r12
    2416:	f7 01       	movw	r30, r14
    2418:	62 89       	ldd	r22, Z+18	; 0x12
    241a:	c7 01       	movw	r24, r14
    241c:	cd de       	rcall	.-614    	; 0x21b8 <_ZN6SdFile15openCachedEntryEhh>
    241e:	08 c0       	rjmp	.+16     	; 0x2430 <_ZN6SdFile4openEPS_PKch+0x1ac>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	06 c0       	rjmp	.+12     	; 0x2430 <_ZN6SdFile4openEPS_PKch+0x1ac>
    2424:	dd 20       	and	r13, r13
    2426:	09 f4       	brne	.+2      	; 0x242a <_ZN6SdFile4openEPS_PKch+0x1a6>
    2428:	95 cf       	rjmp	.-214    	; 0x2354 <_ZN6SdFile4openEPS_PKch+0xd0>
    242a:	dd 24       	eor	r13, r13
    242c:	d3 94       	inc	r13
    242e:	5a cf       	rjmp	.-332    	; 0x22e4 <_ZN6SdFile4openEPS_PKch+0x60>
    2430:	2b 96       	adiw	r28, 0x0b	; 11
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	bf 90       	pop	r11
    244e:	08 95       	ret

00002450 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2450:	2f 92       	push	r2
    2452:	3f 92       	push	r3
    2454:	4f 92       	push	r4
    2456:	5f 92       	push	r5
    2458:	6f 92       	push	r6
    245a:	7f 92       	push	r7
    245c:	8f 92       	push	r8
    245e:	9f 92       	push	r9
    2460:	af 92       	push	r10
    2462:	bf 92       	push	r11
    2464:	cf 92       	push	r12
    2466:	df 92       	push	r13
    2468:	ef 92       	push	r14
    246a:	ff 92       	push	r15
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	00 d0       	rcall	.+0      	; 0x2476 <_ZN6SdFile5writeEPKvj+0x26>
    2476:	1f 92       	push	r1
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	8c 01       	movw	r16, r24
    247e:	6b 01       	movw	r12, r22
    2480:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2482:	dc 01       	movw	r26, r24
    2484:	15 96       	adiw	r26, 0x05	; 5
    2486:	8c 91       	ld	r24, X
    2488:	15 97       	sbiw	r26, 0x05	; 5
    248a:	81 30       	cpi	r24, 0x01	; 1
    248c:	c1 f4       	brne	.+48     	; 0x24be <_ZN6SdFile5writeEPKvj+0x6e>
    248e:	14 96       	adiw	r26, 0x04	; 4
    2490:	8c 91       	ld	r24, X
    2492:	81 ff       	sbrs	r24, 1
    2494:	14 c0       	rjmp	.+40     	; 0x24be <_ZN6SdFile5writeEPKvj+0x6e>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2496:	82 ff       	sbrs	r24, 2
    2498:	1c c0       	rjmp	.+56     	; 0x24d2 <_ZN6SdFile5writeEPKvj+0x82>
    249a:	f8 01       	movw	r30, r16
    249c:	43 89       	ldd	r20, Z+19	; 0x13
    249e:	54 89       	ldd	r21, Z+20	; 0x14
    24a0:	65 89       	ldd	r22, Z+21	; 0x15
    24a2:	76 89       	ldd	r23, Z+22	; 0x16
    24a4:	82 85       	ldd	r24, Z+10	; 0x0a
    24a6:	93 85       	ldd	r25, Z+11	; 0x0b
    24a8:	a4 85       	ldd	r26, Z+12	; 0x0c
    24aa:	b5 85       	ldd	r27, Z+13	; 0x0d
    24ac:	84 17       	cp	r24, r20
    24ae:	95 07       	cpc	r25, r21
    24b0:	a6 07       	cpc	r26, r22
    24b2:	b7 07       	cpc	r27, r23
    24b4:	71 f0       	breq	.+28     	; 0x24d2 <_ZN6SdFile5writeEPKvj+0x82>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    24b6:	c8 01       	movw	r24, r16
    24b8:	ec dc       	rcall	.-1576   	; 0x1e92 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    24ba:	81 11       	cpse	r24, r1
    24bc:	0a c0       	rjmp	.+20     	; 0x24d2 <_ZN6SdFile5writeEPKvj+0x82>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	d8 01       	movw	r26, r16
    24c4:	13 96       	adiw	r26, 0x03	; 3
    24c6:	9c 93       	st	X, r25
    24c8:	8e 93       	st	-X, r24
    24ca:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	42 c1       	rjmp	.+644    	; 0x2756 <_ZN6SdFile5writeEPKvj+0x306>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    24d2:	41 01       	movw	r8, r2
    24d4:	82 c0       	rjmp	.+260    	; 0x25da <_ZN6SdFile5writeEPKvj+0x18a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    24d6:	5b 96       	adiw	r26, 0x1b	; 27
    24d8:	8d 91       	ld	r24, X+
    24da:	9c 91       	ld	r25, X
    24dc:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    24de:	fc 01       	movw	r30, r24
    24e0:	74 80       	ldd	r7, Z+4	; 0x04
    24e2:	2f ef       	ldi	r18, 0xFF	; 255
    24e4:	27 0d       	add	r18, r7
    24e6:	2a 01       	movw	r4, r20
    24e8:	3b 01       	movw	r6, r22
    24ea:	39 e0       	ldi	r19, 0x09	; 9
    24ec:	76 94       	lsr	r7
    24ee:	67 94       	ror	r6
    24f0:	57 94       	ror	r5
    24f2:	47 94       	ror	r4
    24f4:	3a 95       	dec	r19
    24f6:	d1 f7       	brne	.-12     	; 0x24ec <_ZN6SdFile5writeEPKvj+0x9c>
    24f8:	72 2e       	mov	r7, r18
    24fa:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    24fc:	7a 01       	movw	r14, r20
    24fe:	f1 e0       	ldi	r31, 0x01	; 1
    2500:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    2502:	77 20       	and	r7, r7
    2504:	09 f4       	brne	.+2      	; 0x2508 <_ZN6SdFile5writeEPKvj+0xb8>
    2506:	75 c0       	rjmp	.+234    	; 0x25f2 <_ZN6SdFile5writeEPKvj+0x1a2>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	92 e0       	ldi	r25, 0x02	; 2
    250c:	8e 19       	sub	r24, r14
    250e:	9f 09       	sbc	r25, r15
    2510:	54 01       	movw	r10, r8
    2512:	88 15       	cp	r24, r8
    2514:	99 05       	cpc	r25, r9
    2516:	08 f4       	brcc	.+2      	; 0x251a <_ZN6SdFile5writeEPKvj+0xca>
    2518:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    251a:	d8 01       	movw	r26, r16
    251c:	5b 96       	adiw	r26, 0x1b	; 27
    251e:	2d 91       	ld	r18, X+
    2520:	3c 91       	ld	r19, X
    2522:	5c 97       	sbiw	r26, 0x1c	; 28
    2524:	16 96       	adiw	r26, 0x06	; 6
    2526:	8d 91       	ld	r24, X+
    2528:	9d 91       	ld	r25, X+
    252a:	0d 90       	ld	r0, X+
    252c:	bc 91       	ld	r27, X
    252e:	a0 2d       	mov	r26, r0
    2530:	02 97       	sbiw	r24, 0x02	; 2
    2532:	a1 09       	sbc	r26, r1
    2534:	b1 09       	sbc	r27, r1
    2536:	f9 01       	movw	r30, r18
    2538:	05 84       	ldd	r0, Z+13	; 0x0d
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <_ZN6SdFile5writeEPKvj+0xf4>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	aa 1f       	adc	r26, r26
    2542:	bb 1f       	adc	r27, r27
    2544:	0a 94       	dec	r0
    2546:	d2 f7       	brpl	.-12     	; 0x253c <_ZN6SdFile5writeEPKvj+0xec>
    2548:	46 85       	ldd	r20, Z+14	; 0x0e
    254a:	57 85       	ldd	r21, Z+15	; 0x0f
    254c:	60 89       	ldd	r22, Z+16	; 0x10
    254e:	71 89       	ldd	r23, Z+17	; 0x11
    2550:	84 0f       	add	r24, r20
    2552:	95 1f       	adc	r25, r21
    2554:	a6 1f       	adc	r26, r22
    2556:	b7 1f       	adc	r27, r23
    2558:	9c 01       	movw	r18, r24
    255a:	ad 01       	movw	r20, r26
    255c:	27 0d       	add	r18, r7
    255e:	31 1d       	adc	r19, r1
    2560:	41 1d       	adc	r20, r1
    2562:	51 1d       	adc	r21, r1
    2564:	29 01       	movw	r4, r18
    2566:	3a 01       	movw	r6, r20
    if (n == 512) {
    2568:	a1 14       	cp	r10, r1
    256a:	32 e0       	ldi	r19, 0x02	; 2
    256c:	b3 06       	cpc	r11, r19
    256e:	09 f0       	breq	.+2      	; 0x2572 <_ZN6SdFile5writeEPKvj+0x122>
    2570:	85 c0       	rjmp	.+266    	; 0x267c <_ZN6SdFile5writeEPKvj+0x22c>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2572:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2576:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    257a:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    257e:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2582:	48 16       	cp	r4, r24
    2584:	59 06       	cpc	r5, r25
    2586:	6a 06       	cpc	r6, r26
    2588:	7b 06       	cpc	r7, r27
    258a:	59 f4       	brne	.+22     	; 0x25a2 <_ZN6SdFile5writeEPKvj+0x152>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    258c:	8f ef       	ldi	r24, 0xFF	; 255
    258e:	9f ef       	ldi	r25, 0xFF	; 255
    2590:	dc 01       	movw	r26, r24
    2592:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2596:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    259a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    259e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    25a2:	96 01       	movw	r18, r12
    25a4:	b3 01       	movw	r22, r6
    25a6:	a2 01       	movw	r20, r4
    25a8:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_ZN8SdVolume7sdCard_E>
    25ac:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_ZN8SdVolume7sdCard_E+0x1>
    25b0:	b3 d9       	rcall	.-3226   	; 0x1918 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    25b2:	88 23       	and	r24, r24
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <_ZN6SdFile5writeEPKvj+0x168>
    25b6:	83 cf       	rjmp	.-250    	; 0x24be <_ZN6SdFile5writeEPKvj+0x6e>
      src += 512;
    25b8:	9e ef       	ldi	r25, 0xFE	; 254
    25ba:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    25bc:	8a 18       	sub	r8, r10
    25be:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    25c0:	f8 01       	movw	r30, r16
    25c2:	82 85       	ldd	r24, Z+10	; 0x0a
    25c4:	93 85       	ldd	r25, Z+11	; 0x0b
    25c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    25c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    25ca:	8a 0d       	add	r24, r10
    25cc:	9b 1d       	adc	r25, r11
    25ce:	a1 1d       	adc	r26, r1
    25d0:	b1 1d       	adc	r27, r1
    25d2:	82 87       	std	Z+10, r24	; 0x0a
    25d4:	93 87       	std	Z+11, r25	; 0x0b
    25d6:	a4 87       	std	Z+12, r26	; 0x0c
    25d8:	b5 87       	std	Z+13, r27	; 0x0d
    25da:	d8 01       	movw	r26, r16
    25dc:	1a 96       	adiw	r26, 0x0a	; 10
    25de:	4d 91       	ld	r20, X+
    25e0:	5d 91       	ld	r21, X+
    25e2:	6d 91       	ld	r22, X+
    25e4:	7c 91       	ld	r23, X
    25e6:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    25e8:	81 14       	cp	r8, r1
    25ea:	91 04       	cpc	r9, r1
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <_ZN6SdFile5writeEPKvj+0x1a0>
    25ee:	73 cf       	rjmp	.-282    	; 0x24d6 <_ZN6SdFile5writeEPKvj+0x86>
    25f0:	83 c0       	rjmp	.+262    	; 0x26f8 <_ZN6SdFile5writeEPKvj+0x2a8>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    25f2:	e1 14       	cp	r14, r1
    25f4:	f1 04       	cpc	r15, r1
    25f6:	09 f0       	breq	.+2      	; 0x25fa <_ZN6SdFile5writeEPKvj+0x1aa>
    25f8:	87 cf       	rjmp	.-242    	; 0x2508 <_ZN6SdFile5writeEPKvj+0xb8>
      // start of new cluster
      if (curCluster_ == 0) {
    25fa:	16 96       	adiw	r26, 0x06	; 6
    25fc:	4d 91       	ld	r20, X+
    25fe:	5d 91       	ld	r21, X+
    2600:	6d 91       	ld	r22, X+
    2602:	7c 91       	ld	r23, X
    2604:	19 97       	sbiw	r26, 0x09	; 9
    2606:	41 15       	cp	r20, r1
    2608:	51 05       	cpc	r21, r1
    260a:	61 05       	cpc	r22, r1
    260c:	71 05       	cpc	r23, r1
    260e:	59 f4       	brne	.+22     	; 0x2626 <_ZN6SdFile5writeEPKvj+0x1d6>
        if (firstCluster_ == 0) {
    2610:	57 96       	adiw	r26, 0x17	; 23
    2612:	8d 91       	ld	r24, X+
    2614:	9d 91       	ld	r25, X+
    2616:	0d 90       	ld	r0, X+
    2618:	bc 91       	ld	r27, X
    261a:	a0 2d       	mov	r26, r0
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	a1 05       	cpc	r26, r1
    2620:	b1 05       	cpc	r27, r1
    2622:	31 f5       	brne	.+76     	; 0x2670 <_ZN6SdFile5writeEPKvj+0x220>
    2624:	20 c0       	rjmp	.+64     	; 0x2666 <_ZN6SdFile5writeEPKvj+0x216>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2626:	9e 01       	movw	r18, r28
    2628:	2f 5f       	subi	r18, 0xFF	; 255
    262a:	3f 4f       	sbci	r19, 0xFF	; 255
    262c:	50 d1       	rcall	.+672    	; 0x28ce <_ZNK8SdVolume6fatGetEmPm>
    262e:	88 23       	and	r24, r24
    2630:	09 f4       	brne	.+2      	; 0x2634 <_ZN6SdFile5writeEPKvj+0x1e4>
    2632:	4d cf       	rjmp	.-358    	; 0x24ce <_ZN6SdFile5writeEPKvj+0x7e>
        if (vol_->isEOC(next)) {
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	ab 81       	ldd	r26, Y+3	; 0x03
    263a:	bc 81       	ldd	r27, Y+4	; 0x04
    263c:	f8 01       	movw	r30, r16
    263e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2640:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2642:	f9 01       	movw	r30, r18
    2644:	27 89       	ldd	r18, Z+23	; 0x17
    2646:	20 31       	cpi	r18, 0x10	; 16
    2648:	29 f0       	breq	.+10     	; 0x2654 <_ZN6SdFile5writeEPKvj+0x204>
    264a:	48 ef       	ldi	r20, 0xF8	; 248
    264c:	5f ef       	ldi	r21, 0xFF	; 255
    264e:	6f ef       	ldi	r22, 0xFF	; 255
    2650:	7f e0       	ldi	r23, 0x0F	; 15
    2652:	04 c0       	rjmp	.+8      	; 0x265c <_ZN6SdFile5writeEPKvj+0x20c>
    2654:	48 ef       	ldi	r20, 0xF8	; 248
    2656:	5f ef       	ldi	r21, 0xFF	; 255
    2658:	60 e0       	ldi	r22, 0x00	; 0
    265a:	70 e0       	ldi	r23, 0x00	; 0
    265c:	84 17       	cp	r24, r20
    265e:	95 07       	cpc	r25, r21
    2660:	a6 07       	cpc	r26, r22
    2662:	b7 07       	cpc	r27, r23
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2664:	28 f0       	brcs	.+10     	; 0x2670 <_ZN6SdFile5writeEPKvj+0x220>
    2666:	c8 01       	movw	r24, r16
    2668:	a4 d9       	rcall	.-3256   	; 0x19b2 <_ZN6SdFile10addClusterEv>
    266a:	81 11       	cpse	r24, r1
    266c:	4d cf       	rjmp	.-358    	; 0x2508 <_ZN6SdFile5writeEPKvj+0xb8>
    266e:	27 cf       	rjmp	.-434    	; 0x24be <_ZN6SdFile5writeEPKvj+0x6e>
        } else {
          curCluster_ = next;
    2670:	f8 01       	movw	r30, r16
    2672:	86 83       	std	Z+6, r24	; 0x06
    2674:	97 83       	std	Z+7, r25	; 0x07
    2676:	a0 87       	std	Z+8, r26	; 0x08
    2678:	b1 87       	std	Z+9, r27	; 0x09
    267a:	46 cf       	rjmp	.-372    	; 0x2508 <_ZN6SdFile5writeEPKvj+0xb8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    267c:	e1 14       	cp	r14, r1
    267e:	f1 04       	cpc	r15, r1
    2680:	21 f5       	brne	.+72     	; 0x26ca <_ZN6SdFile5writeEPKvj+0x27a>
    2682:	d8 01       	movw	r26, r16
    2684:	1a 96       	adiw	r26, 0x0a	; 10
    2686:	4d 91       	ld	r20, X+
    2688:	5d 91       	ld	r21, X+
    268a:	6d 91       	ld	r22, X+
    268c:	7c 91       	ld	r23, X
    268e:	1d 97       	sbiw	r26, 0x0d	; 13
    2690:	53 96       	adiw	r26, 0x13	; 19
    2692:	8d 91       	ld	r24, X+
    2694:	9d 91       	ld	r25, X+
    2696:	0d 90       	ld	r0, X+
    2698:	bc 91       	ld	r27, X
    269a:	a0 2d       	mov	r26, r0
    269c:	48 17       	cp	r20, r24
    269e:	59 07       	cpc	r21, r25
    26a0:	6a 07       	cpc	r22, r26
    26a2:	7b 07       	cpc	r23, r27
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    26a4:	90 f0       	brcs	.+36     	; 0x26ca <_ZN6SdFile5writeEPKvj+0x27a>
    26a6:	7e d0       	rcall	.+252    	; 0x27a4 <_ZN8SdVolume10cacheFlushEv>
    26a8:	88 23       	and	r24, r24
    26aa:	09 f4       	brne	.+2      	; 0x26ae <_ZN6SdFile5writeEPKvj+0x25e>
    26ac:	08 cf       	rjmp	.-496    	; 0x24be <_ZN6SdFile5writeEPKvj+0x6e>
        SdVolume::cacheBlockNumber_ = block;
    26ae:	40 92 06 02 	sts	0x0206, r4	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    26b2:	50 92 07 02 	sts	0x0207, r5	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    26b6:	60 92 08 02 	sts	0x0208, r6	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    26ba:	70 92 09 02 	sts	0x0209, r7	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    26be:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
    26c2:	81 60       	ori	r24, 0x01	; 1
    26c4:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    26c8:	07 c0       	rjmp	.+14     	; 0x26d8 <_ZN6SdFile5writeEPKvj+0x288>
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	c3 01       	movw	r24, r6
    26ce:	b2 01       	movw	r22, r4
    26d0:	a2 d0       	rcall	.+324    	; 0x2816 <_ZN8SdVolume13cacheRawBlockEmh>
    26d2:	88 23       	and	r24, r24
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <_ZN6SdFile5writeEPKvj+0x288>
    26d6:	f3 ce       	rjmp	.-538    	; 0x24be <_ZN6SdFile5writeEPKvj+0x6e>
    26d8:	d6 01       	movw	r26, r12
    26da:	f7 01       	movw	r30, r14
    26dc:	e4 53       	subi	r30, 0x34	; 52
    26de:	fc 4f       	sbci	r31, 0xFC	; 252
    26e0:	9f 01       	movw	r18, r30
    26e2:	2a 0d       	add	r18, r10
    26e4:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    26e6:	2e 17       	cp	r18, r30
    26e8:	3f 07       	cpc	r19, r31
    26ea:	19 f0       	breq	.+6      	; 0x26f2 <_ZN6SdFile5writeEPKvj+0x2a2>
    26ec:	8d 91       	ld	r24, X+
    26ee:	81 93       	st	Z+, r24
    26f0:	fa cf       	rjmp	.-12     	; 0x26e6 <_ZN6SdFile5writeEPKvj+0x296>
    26f2:	ca 0c       	add	r12, r10
    26f4:	db 1c       	adc	r13, r11
    26f6:	62 cf       	rjmp	.-316    	; 0x25bc <_ZN6SdFile5writeEPKvj+0x16c>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    26f8:	d8 01       	movw	r26, r16
    26fa:	53 96       	adiw	r26, 0x13	; 19
    26fc:	cd 90       	ld	r12, X+
    26fe:	dd 90       	ld	r13, X+
    2700:	ed 90       	ld	r14, X+
    2702:	fc 90       	ld	r15, X
    2704:	56 97       	sbiw	r26, 0x16	; 22
    2706:	14 96       	adiw	r26, 0x04	; 4
    2708:	8c 91       	ld	r24, X
    270a:	c4 16       	cp	r12, r20
    270c:	d5 06       	cpc	r13, r21
    270e:	e6 06       	cpc	r14, r22
    2710:	f7 06       	cpc	r15, r23
    2712:	40 f4       	brcc	.+16     	; 0x2724 <_ZN6SdFile5writeEPKvj+0x2d4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2714:	f8 01       	movw	r30, r16
    2716:	43 8b       	std	Z+19, r20	; 0x13
    2718:	54 8b       	std	Z+20, r21	; 0x14
    271a:	65 8b       	std	Z+21, r22	; 0x15
    271c:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    271e:	80 68       	ori	r24, 0x80	; 128
    2720:	84 83       	std	Z+4, r24	; 0x04
    2722:	0d c0       	rjmp	.+26     	; 0x273e <_ZN6SdFile5writeEPKvj+0x2ee>
  } else if (dateTime_ && nbyte) {
    2724:	20 91 c3 03 	lds	r18, 0x03C3	; 0x8003c3 <_ZN6SdFile9dateTime_E>
    2728:	30 91 c4 03 	lds	r19, 0x03C4	; 0x8003c4 <_ZN6SdFile9dateTime_E+0x1>
    272c:	23 2b       	or	r18, r19
    272e:	39 f0       	breq	.+14     	; 0x273e <_ZN6SdFile5writeEPKvj+0x2ee>
    2730:	21 14       	cp	r2, r1
    2732:	31 04       	cpc	r3, r1
    2734:	21 f0       	breq	.+8      	; 0x273e <_ZN6SdFile5writeEPKvj+0x2ee>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2736:	80 68       	ori	r24, 0x80	; 128
    2738:	d8 01       	movw	r26, r16
    273a:	14 96       	adiw	r26, 0x04	; 4
    273c:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    273e:	f8 01       	movw	r30, r16
    2740:	84 81       	ldd	r24, Z+4	; 0x04
    2742:	83 fd       	sbrc	r24, 3
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2744:	02 c0       	rjmp	.+4      	; 0x274a <_ZN6SdFile5writeEPKvj+0x2fa>
    2746:	c1 01       	movw	r24, r2
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2748:	06 c0       	rjmp	.+12     	; 0x2756 <_ZN6SdFile5writeEPKvj+0x306>
    274a:	c8 01       	movw	r24, r16
    274c:	38 dc       	rcall	.-1936   	; 0x1fbe <_ZN6SdFile4syncEv>
    274e:	88 23       	and	r24, r24
    2750:	09 f4       	brne	.+2      	; 0x2754 <_ZN6SdFile5writeEPKvj+0x304>
    2752:	b5 ce       	rjmp	.-662    	; 0x24be <_ZN6SdFile5writeEPKvj+0x6e>
    2754:	f8 cf       	rjmp	.-16     	; 0x2746 <_ZN6SdFile5writeEPKvj+0x2f6>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	ff 90       	pop	r15
    2768:	ef 90       	pop	r14
    276a:	df 90       	pop	r13
    276c:	cf 90       	pop	r12
    276e:	bf 90       	pop	r11
    2770:	af 90       	pop	r10
    2772:	9f 90       	pop	r9
    2774:	8f 90       	pop	r8
    2776:	7f 90       	pop	r7
    2778:	6f 90       	pop	r6
    277a:	5f 90       	pop	r5
    277c:	4f 90       	pop	r4
    277e:	3f 90       	pop	r3
    2780:	2f 90       	pop	r2
    2782:	08 95       	ret

00002784 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	1f 92       	push	r1
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	be 01       	movw	r22, r28
    2796:	6f 5f       	subi	r22, 0xFF	; 255
    2798:	7f 4f       	sbci	r23, 0xFF	; 255
    279a:	5a de       	rcall	.-844    	; 0x2450 <_ZN6SdFile5writeEPKvj>
}
    279c:	0f 90       	pop	r0
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	08 95       	ret

000027a4 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    27a4:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
    27a8:	88 23       	and	r24, r24
    27aa:	99 f1       	breq	.+102    	; 0x2812 <_ZN8SdVolume10cacheFlushEv+0x6e>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    27ac:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    27b0:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    27b4:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    27b8:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    27bc:	2c ec       	ldi	r18, 0xCC	; 204
    27be:	33 e0       	ldi	r19, 0x03	; 3
    27c0:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_ZN8SdVolume7sdCard_E>
    27c4:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_ZN8SdVolume7sdCard_E+0x1>
    27c8:	a7 d8       	rcall	.-3762   	; 0x1918 <_ZN7Sd2Card10writeBlockEmPKh>
    27ca:	81 11       	cpse	r24, r1
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <_ZN8SdVolume10cacheFlushEv+0x2e>
      return false;
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    27d2:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <_ZN8SdVolume17cacheMirrorBlock_E>
    27d6:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    27da:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    27de:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    27e2:	41 15       	cp	r20, r1
    27e4:	51 05       	cpc	r21, r1
    27e6:	61 05       	cpc	r22, r1
    27e8:	71 05       	cpc	r23, r1
    27ea:	89 f0       	breq	.+34     	; 0x280e <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    27ec:	2c ec       	ldi	r18, 0xCC	; 204
    27ee:	33 e0       	ldi	r19, 0x03	; 3
    27f0:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_ZN8SdVolume7sdCard_E>
    27f4:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_ZN8SdVolume7sdCard_E+0x1>
    27f8:	8f d8       	rcall	.-3810   	; 0x1918 <_ZN7Sd2Card10writeBlockEmPKh>
    27fa:	88 23       	and	r24, r24
    27fc:	41 f3       	breq	.-48     	; 0x27ce <_ZN8SdVolume10cacheFlushEv+0x2a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    27fe:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <_ZN8SdVolume17cacheMirrorBlock_E>
    2802:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2806:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    280a:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    }
    cacheDirty_ = 0;
    280e:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    2812:	81 e0       	ldi	r24, 0x01	; 1
}
    2814:	08 95       	ret

00002816 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2816:	cf 92       	push	r12
    2818:	df 92       	push	r13
    281a:	ef 92       	push	r14
    281c:	ff 92       	push	r15
    281e:	cf 93       	push	r28
    2820:	6b 01       	movw	r12, r22
    2822:	7c 01       	movw	r14, r24
    2824:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    2826:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    282a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    282e:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2832:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2836:	8c 15       	cp	r24, r12
    2838:	9d 05       	cpc	r25, r13
    283a:	ae 05       	cpc	r26, r14
    283c:	bf 05       	cpc	r27, r15
    if (!cacheFlush()) return false;
    283e:	c1 f0       	breq	.+48     	; 0x2870 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    2840:	b1 df       	rcall	.-158    	; 0x27a4 <_ZN8SdVolume10cacheFlushEv>
    2842:	81 11       	cpse	r24, r1
    2844:	02 c0       	rjmp	.+4      	; 0x284a <_ZN8SdVolume13cacheRawBlockEmh+0x34>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2848:	19 c0       	rjmp	.+50     	; 0x287c <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    284a:	2c ec       	ldi	r18, 0xCC	; 204
    284c:	33 e0       	ldi	r19, 0x03	; 3
    284e:	b7 01       	movw	r22, r14
    2850:	a6 01       	movw	r20, r12
    2852:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_ZN8SdVolume7sdCard_E>
    2856:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_ZN8SdVolume7sdCard_E+0x1>
    285a:	25 d8       	rcall	.-4022   	; 0x18a6 <_ZN7Sd2Card9readBlockEmPh>
    285c:	88 23       	and	r24, r24
    cacheBlockNumber_ = blockNumber;
    285e:	99 f3       	breq	.-26     	; 0x2846 <_ZN8SdVolume13cacheRawBlockEmh+0x30>
    2860:	c0 92 06 02 	sts	0x0206, r12	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2864:	d0 92 07 02 	sts	0x0207, r13	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2868:	e0 92 08 02 	sts	0x0208, r14	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    286c:	f0 92 09 02 	sts	0x0209, r15	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    2870:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
    2874:	c8 2b       	or	r28, r24
    2876:	c0 93 c9 03 	sts	0x03C9, r28	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
  return true;
}
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	cf 91       	pop	r28
    287e:	ff 90       	pop	r15
    2880:	ef 90       	pop	r14
    2882:	df 90       	pop	r13
    2884:	cf 90       	pop	r12
    2886:	08 95       	ret

00002888 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2888:	cf 92       	push	r12
    288a:	df 92       	push	r13
    288c:	ef 92       	push	r14
    288e:	ff 92       	push	r15
    2890:	6b 01       	movw	r12, r22
  if (!cacheFlush()) return false;
    2892:	7c 01       	movw	r14, r24
    2894:	87 df       	rcall	.-242    	; 0x27a4 <_ZN8SdVolume10cacheFlushEv>
    2896:	88 23       	and	r24, r24
    2898:	a9 f0       	breq	.+42     	; 0x28c4 <_ZN8SdVolume14cacheZeroBlockEm+0x3c>
    289a:	ec ec       	ldi	r30, 0xCC	; 204

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    289c:	f3 e0       	ldi	r31, 0x03	; 3
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    289e:	11 92       	st	Z+, r1
    28a0:	85 e0       	ldi	r24, 0x05	; 5
    28a2:	ec 3c       	cpi	r30, 0xCC	; 204
    28a4:	f8 07       	cpc	r31, r24
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    28a6:	d9 f7       	brne	.-10     	; 0x289e <_ZN8SdVolume14cacheZeroBlockEm+0x16>
    28a8:	c0 92 06 02 	sts	0x0206, r12	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    28ac:	d0 92 07 02 	sts	0x0207, r13	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    28b0:	e0 92 08 02 	sts	0x0208, r14	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    28b4:	f0 92 09 02 	sts	0x0209, r15	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    28b8:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
    28bc:	81 60       	ori	r24, 0x01	; 1
    28be:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
}
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
    28cc:	08 95       	ret

000028ce <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    28ce:	8f 92       	push	r8
    28d0:	9f 92       	push	r9
    28d2:	af 92       	push	r10
    28d4:	bf 92       	push	r11
    28d6:	cf 92       	push	r12
    28d8:	df 92       	push	r13
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    28e8:	81 85       	ldd	r24, Z+9	; 0x09
    28ea:	92 85       	ldd	r25, Z+10	; 0x0a
    28ec:	a3 85       	ldd	r26, Z+11	; 0x0b
    28ee:	b4 85       	ldd	r27, Z+12	; 0x0c
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	a1 1d       	adc	r26, r1
    28f4:	b1 1d       	adc	r27, r1
    28f6:	84 17       	cp	r24, r20
    28f8:	95 07       	cpc	r25, r21
    28fa:	a6 07       	cpc	r26, r22
    28fc:	b7 07       	cpc	r27, r23
    28fe:	10 f4       	brcc	.+4      	; 0x2904 <_ZNK8SdVolume6fatGetEmPm+0x36>
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	5a c0       	rjmp	.+180    	; 0x29b8 <_ZNK8SdVolume6fatGetEmPm+0xea>
  uint32_t lba = fatStartBlock_;
    2904:	83 88       	ldd	r8, Z+19	; 0x13
    2906:	94 88       	ldd	r9, Z+20	; 0x14
    2908:	a5 88       	ldd	r10, Z+21	; 0x15
    290a:	b6 88       	ldd	r11, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    290c:	87 89       	ldd	r24, Z+23	; 0x17
    290e:	80 31       	cpi	r24, 0x10	; 16
    2910:	29 f4       	brne	.+10     	; 0x291c <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2912:	bb 27       	eor	r27, r27
    2914:	a7 2f       	mov	r26, r23
    2916:	96 2f       	mov	r25, r22
    2918:	85 2f       	mov	r24, r21
    291a:	09 c0       	rjmp	.+18     	; 0x292e <_ZNK8SdVolume6fatGetEmPm+0x60>
    291c:	db 01       	movw	r26, r22
    291e:	ca 01       	movw	r24, r20
    2920:	c7 e0       	ldi	r28, 0x07	; 7
    2922:	b6 95       	lsr	r27
    2924:	a7 95       	ror	r26
    2926:	97 95       	ror	r25
    2928:	87 95       	ror	r24
    292a:	ca 95       	dec	r28
    292c:	d1 f7       	brne	.-12     	; 0x2922 <_ZNK8SdVolume6fatGetEmPm+0x54>
    292e:	e9 01       	movw	r28, r18
    2930:	6a 01       	movw	r12, r20
    2932:	7b 01       	movw	r14, r22
    2934:	8f 01       	movw	r16, r30
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	68 0d       	add	r22, r8
    293c:	79 1d       	adc	r23, r9
    293e:	8a 1d       	adc	r24, r10
    2940:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    2942:	80 90 06 02 	lds	r8, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2946:	90 90 07 02 	lds	r9, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    294a:	a0 90 08 02 	lds	r10, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    294e:	b0 90 09 02 	lds	r11, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2952:	68 15       	cp	r22, r8
    2954:	79 05       	cpc	r23, r9
    2956:	8a 05       	cpc	r24, r10
    2958:	9b 05       	cpc	r25, r11
    295a:	91 f4       	brne	.+36     	; 0x2980 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    295c:	f8 01       	movw	r30, r16
    295e:	87 89       	ldd	r24, Z+23	; 0x17
    2960:	80 31       	cpi	r24, 0x10	; 16
    2962:	99 f4       	brne	.+38     	; 0x298a <_ZNK8SdVolume6fatGetEmPm+0xbc>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2964:	dd 24       	eor	r13, r13
    2966:	ee 24       	eor	r14, r14
    2968:	ff 24       	eor	r15, r15
    296a:	c6 01       	movw	r24, r12
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	fc 01       	movw	r30, r24
    2972:	e4 53       	subi	r30, 0x34	; 52
    2974:	fc 4f       	sbci	r31, 0xFC	; 252
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	a0 e0       	ldi	r26, 0x00	; 0
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	17 c0       	rjmp	.+46     	; 0x29ae <_ZNK8SdVolume6fatGetEmPm+0xe0>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	49 df       	rcall	.-366    	; 0x2816 <_ZN8SdVolume13cacheRawBlockEmh>
    2984:	81 11       	cpse	r24, r1
    2986:	ea cf       	rjmp	.-44     	; 0x295c <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2988:	bb cf       	rjmp	.-138    	; 0x2900 <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    298a:	e8 94       	clt
    298c:	c7 f8       	bld	r12, 7
    298e:	dd 24       	eor	r13, r13
    2990:	ee 24       	eor	r14, r14
    2992:	ff 24       	eor	r15, r15
    2994:	c6 01       	movw	r24, r12
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	fc 01       	movw	r30, r24
    29a0:	e4 53       	subi	r30, 0x34	; 52
    29a2:	fc 4f       	sbci	r31, 0xFC	; 252
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	a2 81       	ldd	r26, Z+2	; 0x02
    29aa:	b3 81       	ldd	r27, Z+3	; 0x03
    29ac:	bf 70       	andi	r27, 0x0F	; 15
    29ae:	88 83       	st	Y, r24
    29b0:	99 83       	std	Y+1, r25	; 0x01
    29b2:	aa 83       	std	Y+2, r26	; 0x02
    29b4:	bb 83       	std	Y+3, r27	; 0x03
    29b6:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
    29c8:	bf 90       	pop	r11
    29ca:	af 90       	pop	r10
    29cc:	9f 90       	pop	r9
    29ce:	8f 90       	pop	r8
    29d0:	08 95       	ret

000029d2 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    29d2:	4f 92       	push	r4
    29d4:	5f 92       	push	r5
    29d6:	6f 92       	push	r6
    29d8:	7f 92       	push	r7
    29da:	af 92       	push	r10
    29dc:	bf 92       	push	r11
    29de:	cf 92       	push	r12
    29e0:	df 92       	push	r13
    29e2:	ef 92       	push	r14
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    29f0:	1f 92       	push	r1
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	8c 01       	movw	r16, r24
    29f8:	49 83       	std	Y+1, r20	; 0x01
    29fa:	5a 83       	std	Y+2, r21	; 0x02
    29fc:	6b 83       	std	Y+3, r22	; 0x03
    29fe:	7c 83       	std	Y+4, r23	; 0x04
    2a00:	59 01       	movw	r10, r18
  uint32_t s = 0;
    2a02:	c1 2c       	mov	r12, r1
    2a04:	d1 2c       	mov	r13, r1
    2a06:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2a08:	41 2c       	mov	r4, r1
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	58 2e       	mov	r5, r24
    2a0e:	61 2c       	mov	r6, r1
    2a10:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2a12:	49 81       	ldd	r20, Y+1	; 0x01
    2a14:	5a 81       	ldd	r21, Y+2	; 0x02
    2a16:	6b 81       	ldd	r22, Y+3	; 0x03
    2a18:	7c 81       	ldd	r23, Y+4	; 0x04
    2a1a:	9e 01       	movw	r18, r28
    2a1c:	2f 5f       	subi	r18, 0xFF	; 255
    2a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a20:	c8 01       	movw	r24, r16
    2a22:	55 df       	rcall	.-342    	; 0x28ce <_ZNK8SdVolume6fatGetEmPm>
    2a24:	88 23       	and	r24, r24
    2a26:	51 f1       	breq	.+84     	; 0x2a7c <_ZNK8SdVolume9chainSizeEmPm+0xaa>
    s += 512UL << clusterSizeShift_;
    2a28:	d3 01       	movw	r26, r6
    2a2a:	c2 01       	movw	r24, r4
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	05 84       	ldd	r0, Z+13	; 0x0d
    2a30:	04 c0       	rjmp	.+8      	; 0x2a3a <_ZNK8SdVolume9chainSizeEmPm+0x68>
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	aa 1f       	adc	r26, r26
    2a38:	bb 1f       	adc	r27, r27
    2a3a:	0a 94       	dec	r0
    2a3c:	d2 f7       	brpl	.-12     	; 0x2a32 <_ZNK8SdVolume9chainSizeEmPm+0x60>
    2a3e:	c8 0e       	add	r12, r24
    2a40:	d9 1e       	adc	r13, r25
    2a42:	ea 1e       	adc	r14, r26
    2a44:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    2a46:	49 81       	ldd	r20, Y+1	; 0x01
    2a48:	5a 81       	ldd	r21, Y+2	; 0x02
    2a4a:	6b 81       	ldd	r22, Y+3	; 0x03
    2a4c:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2a4e:	87 89       	ldd	r24, Z+23	; 0x17
    2a50:	80 31       	cpi	r24, 0x10	; 16
    2a52:	29 f0       	breq	.+10     	; 0x2a5e <_ZNK8SdVolume9chainSizeEmPm+0x8c>
    2a54:	88 ef       	ldi	r24, 0xF8	; 248
    2a56:	9f ef       	ldi	r25, 0xFF	; 255
    2a58:	af ef       	ldi	r26, 0xFF	; 255
    2a5a:	bf e0       	ldi	r27, 0x0F	; 15
    2a5c:	04 c0       	rjmp	.+8      	; 0x2a66 <_ZNK8SdVolume9chainSizeEmPm+0x94>
    2a5e:	88 ef       	ldi	r24, 0xF8	; 248
    2a60:	9f ef       	ldi	r25, 0xFF	; 255
    2a62:	a0 e0       	ldi	r26, 0x00	; 0
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2a66:	48 17       	cp	r20, r24
    2a68:	59 07       	cpc	r21, r25
    2a6a:	6a 07       	cpc	r22, r26
    2a6c:	7b 07       	cpc	r23, r27
    2a6e:	88 f2       	brcs	.-94     	; 0x2a12 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2a70:	f5 01       	movw	r30, r10
    2a72:	c0 82       	st	Z, r12
    2a74:	d1 82       	std	Z+1, r13	; 0x01
    2a76:	e2 82       	std	Z+2, r14	; 0x02
    2a78:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
}
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	ef 90       	pop	r14
    2a90:	df 90       	pop	r13
    2a92:	cf 90       	pop	r12
    2a94:	bf 90       	pop	r11
    2a96:	af 90       	pop	r10
    2a98:	7f 90       	pop	r7
    2a9a:	6f 90       	pop	r6
    2a9c:	5f 90       	pop	r5
    2a9e:	4f 90       	pop	r4
    2aa0:	08 95       	ret

00002aa2 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2aa2:	4f 92       	push	r4
    2aa4:	5f 92       	push	r5
    2aa6:	6f 92       	push	r6
    2aa8:	7f 92       	push	r7
    2aaa:	8f 92       	push	r8
    2aac:	9f 92       	push	r9
    2aae:	af 92       	push	r10
    2ab0:	bf 92       	push	r11
    2ab2:	cf 92       	push	r12
    2ab4:	df 92       	push	r13
    2ab6:	ef 92       	push	r14
    2ab8:	ff 92       	push	r15
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    2ac4:	42 30       	cpi	r20, 0x02	; 2
    2ac6:	51 05       	cpc	r21, r1
    2ac8:	61 05       	cpc	r22, r1
    2aca:	71 05       	cpc	r23, r1
    2acc:	10 f4       	brcc	.+4      	; 0x2ad2 <_ZN8SdVolume6fatPutEmm+0x30>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	77 c0       	rjmp	.+238    	; 0x2bc0 <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2ad2:	89 85       	ldd	r24, Y+9	; 0x09
    2ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad6:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ad8:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	a1 1d       	adc	r26, r1
    2ade:	b1 1d       	adc	r27, r1
    2ae0:	84 17       	cp	r24, r20
    2ae2:	95 07       	cpc	r25, r21
    2ae4:	a6 07       	cpc	r26, r22
    2ae6:	b7 07       	cpc	r27, r23
    2ae8:	90 f3       	brcs	.-28     	; 0x2ace <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2aea:	cb 88       	ldd	r12, Y+19	; 0x13
    2aec:	dc 88       	ldd	r13, Y+20	; 0x14
    2aee:	ed 88       	ldd	r14, Y+21	; 0x15
    2af0:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2af2:	8f 89       	ldd	r24, Y+23	; 0x17
    2af4:	80 31       	cpi	r24, 0x10	; 16
    2af6:	29 f4       	brne	.+10     	; 0x2b02 <_ZN8SdVolume6fatPutEmm+0x60>
    2af8:	bb 27       	eor	r27, r27
    2afa:	a7 2f       	mov	r26, r23
    2afc:	96 2f       	mov	r25, r22
    2afe:	85 2f       	mov	r24, r21
    2b00:	09 c0       	rjmp	.+18     	; 0x2b14 <_ZN8SdVolume6fatPutEmm+0x72>
    2b02:	db 01       	movw	r26, r22
    2b04:	ca 01       	movw	r24, r20
    2b06:	e7 e0       	ldi	r30, 0x07	; 7
    2b08:	b6 95       	lsr	r27
    2b0a:	a7 95       	ror	r26
    2b0c:	97 95       	ror	r25
    2b0e:	87 95       	ror	r24
    2b10:	ea 95       	dec	r30
    2b12:	d1 f7       	brne	.-12     	; 0x2b08 <_ZN8SdVolume6fatPutEmm+0x66>
    2b14:	48 01       	movw	r8, r16
    2b16:	59 01       	movw	r10, r18
    2b18:	2a 01       	movw	r4, r20
    2b1a:	3b 01       	movw	r6, r22
    2b1c:	c8 0e       	add	r12, r24
    2b1e:	d9 1e       	adc	r13, r25
    2b20:	ea 1e       	adc	r14, r26
    2b22:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    2b24:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8SdVolume17cacheBlockNumber_E>
    2b28:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2b2c:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2b30:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2b34:	c8 16       	cp	r12, r24
    2b36:	d9 06       	cpc	r13, r25
    2b38:	ea 06       	cpc	r14, r26
    2b3a:	fb 06       	cpc	r15, r27
    2b3c:	81 f4       	brne	.+32     	; 0x2b5e <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b40:	80 31       	cpi	r24, 0x10	; 16
    2b42:	a1 f4       	brne	.+40     	; 0x2b6c <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2b44:	b3 01       	movw	r22, r6
    2b46:	a2 01       	movw	r20, r4
    2b48:	55 27       	eor	r21, r21
    2b4a:	66 27       	eor	r22, r22
    2b4c:	77 27       	eor	r23, r23
    2b4e:	44 0f       	add	r20, r20
    2b50:	55 1f       	adc	r21, r21
    2b52:	fa 01       	movw	r30, r20
    2b54:	e4 53       	subi	r30, 0x34	; 52
    2b56:	fc 4f       	sbci	r31, 0xFC	; 252
    2b58:	91 82       	std	Z+1, r9	; 0x01
    2b5a:	80 82       	st	Z, r8
    2b5c:	18 c0       	rjmp	.+48     	; 0x2b8e <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	c7 01       	movw	r24, r14
    2b62:	b6 01       	movw	r22, r12
    2b64:	58 de       	rcall	.-848    	; 0x2816 <_ZN8SdVolume13cacheRawBlockEmh>
    2b66:	81 11       	cpse	r24, r1
    2b68:	ea cf       	rjmp	.-44     	; 0x2b3e <_ZN8SdVolume6fatPutEmm+0x9c>
    2b6a:	b1 cf       	rjmp	.-158    	; 0x2ace <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2b6c:	b3 01       	movw	r22, r6
    2b6e:	a2 01       	movw	r20, r4
    2b70:	4f 77       	andi	r20, 0x7F	; 127
    2b72:	55 27       	eor	r21, r21
    2b74:	66 27       	eor	r22, r22
    2b76:	77 27       	eor	r23, r23
    2b78:	44 0f       	add	r20, r20
    2b7a:	55 1f       	adc	r21, r21
    2b7c:	44 0f       	add	r20, r20
    2b7e:	55 1f       	adc	r21, r21
    2b80:	fa 01       	movw	r30, r20
    2b82:	e4 53       	subi	r30, 0x34	; 52
    2b84:	fc 4f       	sbci	r31, 0xFC	; 252
    2b86:	80 82       	st	Z, r8
    2b88:	91 82       	std	Z+1, r9	; 0x01
    2b8a:	a2 82       	std	Z+2, r10	; 0x02
    2b8c:	b3 82       	std	Z+3, r11	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2b8e:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
    2b92:	81 60       	ori	r24, 0x01	; 1
    2b94:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2b98:	8a 89       	ldd	r24, Y+18	; 0x12
    2b9a:	82 30       	cpi	r24, 0x02	; 2
    2b9c:	80 f0       	brcs	.+32     	; 0x2bbe <_ZN8SdVolume6fatPutEmm+0x11c>
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	af 81       	ldd	r26, Y+7	; 0x07
    2ba4:	b8 85       	ldd	r27, Y+8	; 0x08
    2ba6:	c8 0e       	add	r12, r24
    2ba8:	d9 1e       	adc	r13, r25
    2baa:	ea 1e       	adc	r14, r26
    2bac:	fb 1e       	adc	r15, r27
    2bae:	c0 92 c5 03 	sts	0x03C5, r12	; 0x8003c5 <_ZN8SdVolume17cacheMirrorBlock_E>
    2bb2:	d0 92 c6 03 	sts	0x03C6, r13	; 0x8003c6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2bb6:	e0 92 c7 03 	sts	0x03C7, r14	; 0x8003c7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2bba:	f0 92 c8 03 	sts	0x03C8, r15	; 0x8003c8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
}
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	bf 90       	pop	r11
    2bd2:	af 90       	pop	r10
    2bd4:	9f 90       	pop	r9
    2bd6:	8f 90       	pop	r8
    2bd8:	7f 90       	pop	r7
    2bda:	6f 90       	pop	r6
    2bdc:	5f 90       	pop	r5
    2bde:	4f 90       	pop	r4
    2be0:	08 95       	ret

00002be2 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2be2:	2f 92       	push	r2
    2be4:	3f 92       	push	r3
    2be6:	4f 92       	push	r4
    2be8:	5f 92       	push	r5
    2bea:	6f 92       	push	r6
    2bec:	7f 92       	push	r7
    2bee:	9f 92       	push	r9
    2bf0:	af 92       	push	r10
    2bf2:	bf 92       	push	r11
    2bf4:	cf 92       	push	r12
    2bf6:	df 92       	push	r13
    2bf8:	ef 92       	push	r14
    2bfa:	ff 92       	push	r15
    2bfc:	0f 93       	push	r16
    2bfe:	1f 93       	push	r17
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	60 97       	sbiw	r28, 0x10	; 16
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	5c 01       	movw	r10, r24
    2c16:	49 87       	std	Y+9, r20	; 0x09
    2c18:	5a 87       	std	Y+10, r21	; 0x0a
    2c1a:	6b 87       	std	Y+11, r22	; 0x0b
    2c1c:	7c 87       	std	Y+12, r23	; 0x0c
    2c1e:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2c20:	d9 01       	movw	r26, r18
    2c22:	cd 90       	ld	r12, X+
    2c24:	dd 90       	ld	r13, X+
    2c26:	ed 90       	ld	r14, X+
    2c28:	fc 90       	ld	r15, X
    2c2a:	c1 14       	cp	r12, r1
    2c2c:	d1 04       	cpc	r13, r1
    2c2e:	e1 04       	cpc	r14, r1
    2c30:	f1 04       	cpc	r15, r1
    2c32:	31 f0       	breq	.+12     	; 0x2c40 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2c34:	bf ef       	ldi	r27, 0xFF	; 255
    2c36:	cb 1a       	sub	r12, r27
    2c38:	db 0a       	sbc	r13, r27
    2c3a:	eb 0a       	sbc	r14, r27
    2c3c:	fb 0a       	sbc	r15, r27
    2c3e:	10 c0       	rjmp	.+32     	; 0x2c60 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2c40:	fc 01       	movw	r30, r24
    2c42:	c0 80       	ld	r12, Z
    2c44:	d1 80       	ldd	r13, Z+1	; 0x01
    2c46:	e2 80       	ldd	r14, Z+2	; 0x02
    2c48:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2c4a:	99 24       	eor	r9, r9
    2c4c:	93 94       	inc	r9
    2c4e:	09 85       	ldd	r16, Y+9	; 0x09
    2c50:	1a 85       	ldd	r17, Y+10	; 0x0a
    2c52:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c54:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c56:	01 30       	cpi	r16, 0x01	; 1
    2c58:	11 05       	cpc	r17, r1
    2c5a:	21 05       	cpc	r18, r1
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    2c60:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2c62:	f5 01       	movw	r30, r10
    2c64:	81 85       	ldd	r24, Z+9	; 0x09
    2c66:	92 85       	ldd	r25, Z+10	; 0x0a
    2c68:	a3 85       	ldd	r26, Z+11	; 0x0b
    2c6a:	b4 85       	ldd	r27, Z+12	; 0x0c
    2c6c:	8c 01       	movw	r16, r24
    2c6e:	9d 01       	movw	r18, r26
    2c70:	0f 5f       	subi	r16, 0xFF	; 255
    2c72:	1f 4f       	sbci	r17, 0xFF	; 255
    2c74:	2f 4f       	sbci	r18, 0xFF	; 255
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	0d 87       	std	Y+13, r16	; 0x0d
    2c7a:	1e 87       	std	Y+14, r17	; 0x0e
    2c7c:	2f 87       	std	Y+15, r18	; 0x0f
    2c7e:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2c80:	26 01       	movw	r4, r12
    2c82:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2c84:	1d 82       	std	Y+5, r1	; 0x05
    2c86:	1e 82       	std	Y+6, r1	; 0x06
    2c88:	1f 82       	std	Y+7, r1	; 0x07
    2c8a:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2c8c:	f5 01       	movw	r30, r10
    2c8e:	81 85       	ldd	r24, Z+9	; 0x09
    2c90:	92 85       	ldd	r25, Z+10	; 0x0a
    2c92:	a3 85       	ldd	r26, Z+11	; 0x0b
    2c94:	b4 85       	ldd	r27, Z+12	; 0x0c
    2c96:	0d 81       	ldd	r16, Y+5	; 0x05
    2c98:	1e 81       	ldd	r17, Y+6	; 0x06
    2c9a:	2f 81       	ldd	r18, Y+7	; 0x07
    2c9c:	38 85       	ldd	r19, Y+8	; 0x08
    2c9e:	08 17       	cp	r16, r24
    2ca0:	19 07       	cpc	r17, r25
    2ca2:	2a 07       	cpc	r18, r26
    2ca4:	3b 07       	cpc	r19, r27
    2ca6:	08 f0       	brcs	.+2      	; 0x2caa <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    2ca8:	54 c0       	rjmp	.+168    	; 0x2d52 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2caa:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cac:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cae:	4f 85       	ldd	r20, Y+15	; 0x0f
    2cb0:	58 89       	ldd	r21, Y+16	; 0x10
    2cb2:	24 15       	cp	r18, r4
    2cb4:	35 05       	cpc	r19, r5
    2cb6:	46 05       	cpc	r20, r6
    2cb8:	57 05       	cpc	r21, r7
    2cba:	50 f4       	brcc	.+20     	; 0x2cd0 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	48 2e       	mov	r4, r24
    2cc0:	51 2c       	mov	r5, r1
    2cc2:	61 2c       	mov	r6, r1
    2cc4:	71 2c       	mov	r7, r1
    2cc6:	92 e0       	ldi	r25, 0x02	; 2
    2cc8:	c9 2e       	mov	r12, r25
    2cca:	d1 2c       	mov	r13, r1
    2ccc:	e1 2c       	mov	r14, r1
    2cce:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2cd0:	9e 01       	movw	r18, r28
    2cd2:	2f 5f       	subi	r18, 0xFF	; 255
    2cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd6:	b3 01       	movw	r22, r6
    2cd8:	a2 01       	movw	r20, r4
    2cda:	c5 01       	movw	r24, r10
    2cdc:	f8 dd       	rcall	.-1040   	; 0x28ce <_ZNK8SdVolume6fatGetEmPm>
    2cde:	88 23       	and	r24, r24
    2ce0:	c1 f1       	breq	.+112    	; 0x2d52 <_ZN8SdVolume15allocContiguousEmPm+0x170>

    if (f != 0) {
    2ce2:	49 81       	ldd	r20, Y+1	; 0x01
    2ce4:	5a 81       	ldd	r21, Y+2	; 0x02
    2ce6:	6b 81       	ldd	r22, Y+3	; 0x03
    2ce8:	7c 81       	ldd	r23, Y+4	; 0x04
    2cea:	d3 01       	movw	r26, r6
    2cec:	c2 01       	movw	r24, r4
    2cee:	01 96       	adiw	r24, 0x01	; 1
    2cf0:	a1 1d       	adc	r26, r1
    2cf2:	b1 1d       	adc	r27, r1
    2cf4:	45 2b       	or	r20, r21
    2cf6:	46 2b       	or	r20, r22
    2cf8:	47 2b       	or	r20, r23
    2cfa:	19 f0       	breq	.+6      	; 0x2d02 <_ZN8SdVolume15allocContiguousEmPm+0x120>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2cfc:	6c 01       	movw	r12, r24
    2cfe:	7d 01       	movw	r14, r26
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    2d02:	ac 01       	movw	r20, r24
    2d04:	bd 01       	movw	r22, r26
    2d06:	4c 19       	sub	r20, r12
    2d08:	5d 09       	sbc	r21, r13
    2d0a:	6e 09       	sbc	r22, r14
    2d0c:	7f 09       	sbc	r23, r15
    2d0e:	09 85       	ldd	r16, Y+9	; 0x09
    2d10:	1a 85       	ldd	r17, Y+10	; 0x0a
    2d12:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d14:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d16:	04 17       	cp	r16, r20
    2d18:	15 07       	cpc	r17, r21
    2d1a:	26 07       	cpc	r18, r22
    2d1c:	37 07       	cpc	r19, r23
    2d1e:	79 f0       	breq	.+30     	; 0x2d3e <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2d20:	2d 81       	ldd	r18, Y+5	; 0x05
    2d22:	3e 81       	ldd	r19, Y+6	; 0x06
    2d24:	4f 81       	ldd	r20, Y+7	; 0x07
    2d26:	58 85       	ldd	r21, Y+8	; 0x08
    2d28:	2f 5f       	subi	r18, 0xFF	; 255
    2d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d30:	2d 83       	std	Y+5, r18	; 0x05
    2d32:	3e 83       	std	Y+6, r19	; 0x06
    2d34:	4f 83       	std	Y+7, r20	; 0x07
    2d36:	58 87       	std	Y+8, r21	; 0x08
    2d38:	2c 01       	movw	r4, r24
    2d3a:	3d 01       	movw	r6, r26
    2d3c:	a7 cf       	rjmp	.-178    	; 0x2c8c <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2d3e:	0f ef       	ldi	r16, 0xFF	; 255
    2d40:	1f ef       	ldi	r17, 0xFF	; 255
    2d42:	2f ef       	ldi	r18, 0xFF	; 255
    2d44:	3f e0       	ldi	r19, 0x0F	; 15
    2d46:	b3 01       	movw	r22, r6
    2d48:	a2 01       	movw	r20, r4
    2d4a:	c5 01       	movw	r24, r10
    2d4c:	aa de       	rcall	.-684    	; 0x2aa2 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2d4e:	81 11       	cpse	r24, r1
    2d50:	17 c0       	rjmp	.+46     	; 0x2d80 <_ZN8SdVolume15allocContiguousEmPm+0x19e>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	3f c0       	rjmp	.+126    	; 0x2dd4 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2d56:	d3 01       	movw	r26, r6
    2d58:	c2 01       	movw	r24, r4
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	a1 09       	sbc	r26, r1
    2d5e:	b1 09       	sbc	r27, r1
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	af 83       	std	Y+7, r26	; 0x07
    2d66:	b8 87       	std	Y+8, r27	; 0x08
    2d68:	93 01       	movw	r18, r6
    2d6a:	82 01       	movw	r16, r4
    2d6c:	ac 01       	movw	r20, r24
    2d6e:	bd 01       	movw	r22, r26
    2d70:	c5 01       	movw	r24, r10
    2d72:	97 de       	rcall	.-722    	; 0x2aa2 <_ZN8SdVolume6fatPutEmm>
    2d74:	88 23       	and	r24, r24
    2d76:	69 f3       	breq	.-38     	; 0x2d52 <_ZN8SdVolume15allocContiguousEmPm+0x170>
    endCluster--;
    2d78:	4d 80       	ldd	r4, Y+5	; 0x05
    2d7a:	5e 80       	ldd	r5, Y+6	; 0x06
    2d7c:	6f 80       	ldd	r6, Y+7	; 0x07
    2d7e:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2d80:	c4 14       	cp	r12, r4
    2d82:	d5 04       	cpc	r13, r5
    2d84:	e6 04       	cpc	r14, r6
    2d86:	f7 04       	cpc	r15, r7
    2d88:	30 f3       	brcs	.-52     	; 0x2d56 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2d8a:	d1 01       	movw	r26, r2
    2d8c:	4d 91       	ld	r20, X+
    2d8e:	5d 91       	ld	r21, X+
    2d90:	6d 91       	ld	r22, X+
    2d92:	7c 91       	ld	r23, X
    2d94:	41 15       	cp	r20, r1
    2d96:	51 05       	cpc	r21, r1
    2d98:	61 05       	cpc	r22, r1
    2d9a:	71 05       	cpc	r23, r1
    2d9c:	99 f4       	brne	.+38     	; 0x2dc4 <_ZN8SdVolume15allocContiguousEmPm+0x1e2>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2d9e:	f1 01       	movw	r30, r2
    2da0:	c0 82       	st	Z, r12
    2da2:	d1 82       	std	Z+1, r13	; 0x01
    2da4:	e2 82       	std	Z+2, r14	; 0x02
    2da6:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2da8:	99 20       	and	r9, r9
    2daa:	99 f0       	breq	.+38     	; 0x2dd2 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    2dac:	ff ef       	ldi	r31, 0xFF	; 255
    2dae:	cf 1a       	sub	r12, r31
    2db0:	df 0a       	sbc	r13, r31
    2db2:	ef 0a       	sbc	r14, r31
    2db4:	ff 0a       	sbc	r15, r31
    2db6:	d5 01       	movw	r26, r10
    2db8:	cd 92       	st	X+, r12
    2dba:	dd 92       	st	X+, r13
    2dbc:	ed 92       	st	X+, r14
    2dbe:	fc 92       	st	X, r15
    2dc0:	13 97       	sbiw	r26, 0x03	; 3
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2dc2:	07 c0       	rjmp	.+14     	; 0x2dd2 <_ZN8SdVolume15allocContiguousEmPm+0x1f0>
    2dc4:	97 01       	movw	r18, r14
    2dc6:	86 01       	movw	r16, r12
    2dc8:	c5 01       	movw	r24, r10
    2dca:	6b de       	rcall	.-810    	; 0x2aa2 <_ZN8SdVolume6fatPutEmm>
    2dcc:	81 11       	cpse	r24, r1
    2dce:	e7 cf       	rjmp	.-50     	; 0x2d9e <_ZN8SdVolume15allocContiguousEmPm+0x1bc>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    2dd0:	c0 cf       	rjmp	.-128    	; 0x2d52 <_ZN8SdVolume15allocContiguousEmPm+0x170>
}
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	60 96       	adiw	r28, 0x10	; 16
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	df 91       	pop	r29
    2de2:	cf 91       	pop	r28
    2de4:	1f 91       	pop	r17
    2de6:	0f 91       	pop	r16
    2de8:	ff 90       	pop	r15
    2dea:	ef 90       	pop	r14
    2dec:	df 90       	pop	r13
    2dee:	cf 90       	pop	r12
    2df0:	bf 90       	pop	r11
    2df2:	af 90       	pop	r10
    2df4:	9f 90       	pop	r9
    2df6:	7f 90       	pop	r7
    2df8:	6f 90       	pop	r6
    2dfa:	5f 90       	pop	r5
    2dfc:	4f 90       	pop	r4
    2dfe:	3f 90       	pop	r3
    2e00:	2f 90       	pop	r2
    2e02:	08 95       	ret

00002e04 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    2e04:	af 92       	push	r10
    2e06:	bf 92       	push	r11
    2e08:	cf 92       	push	r12
    2e0a:	df 92       	push	r13
    2e0c:	ef 92       	push	r14
    2e0e:	ff 92       	push	r15
    2e10:	0f 93       	push	r16
    2e12:	1f 93       	push	r17
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <_ZN8SdVolume9freeChainEm+0x16>
    2e1a:	1f 92       	push	r1
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	5c 01       	movw	r10, r24
    2e22:	6a 01       	movw	r12, r20
    2e24:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	a0 e0       	ldi	r26, 0x00	; 0
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	f5 01       	movw	r30, r10
    2e30:	80 83       	st	Z, r24
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	a2 83       	std	Z+2, r26	; 0x02
    2e36:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2e38:	9e 01       	movw	r18, r28
    2e3a:	2f 5f       	subi	r18, 0xFF	; 255
    2e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3e:	b7 01       	movw	r22, r14
    2e40:	a6 01       	movw	r20, r12
    2e42:	c5 01       	movw	r24, r10
    2e44:	44 dd       	rcall	.-1400   	; 0x28ce <_ZNK8SdVolume6fatGetEmPm>
    2e46:	88 23       	and	r24, r24
    2e48:	09 f1       	breq	.+66     	; 0x2e8c <_ZN8SdVolume9freeChainEm+0x88>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    2e4a:	00 e0       	ldi	r16, 0x00	; 0
    2e4c:	10 e0       	ldi	r17, 0x00	; 0
    2e4e:	98 01       	movw	r18, r16
    2e50:	b7 01       	movw	r22, r14
    2e52:	a6 01       	movw	r20, r12
    2e54:	c5 01       	movw	r24, r10
    2e56:	25 de       	rcall	.-950    	; 0x2aa2 <_ZN8SdVolume6fatPutEmm>
    2e58:	88 23       	and	r24, r24
    2e5a:	c1 f0       	breq	.+48     	; 0x2e8c <_ZN8SdVolume9freeChainEm+0x88>

    cluster = next;
    2e5c:	c9 80       	ldd	r12, Y+1	; 0x01
    2e5e:	da 80       	ldd	r13, Y+2	; 0x02
    2e60:	eb 80       	ldd	r14, Y+3	; 0x03
    2e62:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2e64:	f5 01       	movw	r30, r10
    2e66:	87 89       	ldd	r24, Z+23	; 0x17
    2e68:	80 31       	cpi	r24, 0x10	; 16
    2e6a:	29 f0       	breq	.+10     	; 0x2e76 <_ZN8SdVolume9freeChainEm+0x72>
    2e6c:	88 ef       	ldi	r24, 0xF8	; 248
    2e6e:	9f ef       	ldi	r25, 0xFF	; 255
    2e70:	af ef       	ldi	r26, 0xFF	; 255
    2e72:	bf e0       	ldi	r27, 0x0F	; 15
    2e74:	04 c0       	rjmp	.+8      	; 0x2e7e <_ZN8SdVolume9freeChainEm+0x7a>
    2e76:	88 ef       	ldi	r24, 0xF8	; 248
    2e78:	9f ef       	ldi	r25, 0xFF	; 255
    2e7a:	a0 e0       	ldi	r26, 0x00	; 0
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    2e7e:	c8 16       	cp	r12, r24
    2e80:	d9 06       	cpc	r13, r25
    2e82:	ea 06       	cpc	r14, r26
    2e84:	fb 06       	cpc	r15, r27
    2e86:	c0 f2       	brcs	.-80     	; 0x2e38 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <_ZN8SdVolume9freeChainEm+0x8a>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2e8c:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	df 91       	pop	r29
    2e98:	cf 91       	pop	r28
    2e9a:	1f 91       	pop	r17
    2e9c:	0f 91       	pop	r16
    2e9e:	ff 90       	pop	r15
    2ea0:	ef 90       	pop	r14
    2ea2:	df 90       	pop	r13
    2ea4:	cf 90       	pop	r12
    2ea6:	bf 90       	pop	r11
    2ea8:	af 90       	pop	r10
    2eaa:	08 95       	ret

00002eac <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    2eac:	8f 92       	push	r8
    2eae:	9f 92       	push	r9
    2eb0:	af 92       	push	r10
    2eb2:	bf 92       	push	r11
    2eb4:	cf 92       	push	r12
    2eb6:	df 92       	push	r13
    2eb8:	ef 92       	push	r14
    2eba:	ff 92       	push	r15
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	ec 01       	movw	r28, r24
    2ec6:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    2ec8:	70 93 cb 03 	sts	0x03CB, r23	; 0x8003cb <_ZN8SdVolume7sdCard_E+0x1>
    2ecc:	60 93 ca 03 	sts	0x03CA, r22	; 0x8003ca <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2ed0:	44 23       	and	r20, r20
    2ed2:	61 f1       	breq	.+88     	; 0x2f2c <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    if (part > 4)return false;
    2ed4:	45 30       	cpi	r20, 0x05	; 5
    2ed6:	10 f0       	brcs	.+4      	; 0x2edc <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	ef c0       	rjmp	.+478    	; 0x30ba <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	98 dc       	rcall	.-1744   	; 0x2816 <_ZN8SdVolume13cacheRawBlockEmh>
    2ee6:	88 23       	and	r24, r24
    2ee8:	b9 f3       	breq	.-18     	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    2eea:	20 e1       	ldi	r18, 0x10	; 16
    2eec:	12 9f       	mul	r17, r18
    2eee:	a0 01       	movw	r20, r0
    2ef0:	11 24       	eor	r1, r1
    2ef2:	44 54       	subi	r20, 0x44	; 68
    2ef4:	5c 4f       	sbci	r21, 0xFC	; 252
    2ef6:	fa 01       	movw	r30, r20
    2ef8:	e2 54       	subi	r30, 0x42	; 66
    2efa:	fe 4f       	sbci	r31, 0xFE	; 254
    2efc:	80 81       	ld	r24, Z
    2efe:	8f 77       	andi	r24, 0x7F	; 127
    2f00:	59 f7       	brne	.-42     	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    2f02:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    2f04:	80 81       	ld	r24, Z
    2f06:	91 81       	ldd	r25, Z+1	; 0x01
    2f08:	a2 81       	ldd	r26, Z+2	; 0x02
    2f0a:	b3 81       	ldd	r27, Z+3	; 0x03
    2f0c:	84 36       	cpi	r24, 0x64	; 100
    2f0e:	91 05       	cpc	r25, r1
    2f10:	a1 05       	cpc	r26, r1
    2f12:	b1 05       	cpc	r27, r1
    2f14:	08 f3       	brcs	.-62     	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    2f16:	34 97       	sbiw	r30, 0x04	; 4
    2f18:	c0 80       	ld	r12, Z
    2f1a:	d1 80       	ldd	r13, Z+1	; 0x01
    2f1c:	e2 80       	ldd	r14, Z+2	; 0x02
    2f1e:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    2f20:	c1 14       	cp	r12, r1
    2f22:	d1 04       	cpc	r13, r1
    2f24:	e1 04       	cpc	r14, r1
    2f26:	f1 04       	cpc	r15, r1
    2f28:	21 f4       	brne	.+8      	; 0x2f32 <_ZN8SdVolume4initEP7Sd2Cardh+0x86>
    2f2a:	d6 cf       	rjmp	.-84     	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    2f2c:	c1 2c       	mov	r12, r1
    2f2e:	d1 2c       	mov	r13, r1
    2f30:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	c7 01       	movw	r24, r14
    2f36:	b6 01       	movw	r22, r12
    2f38:	6e dc       	rcall	.-1828   	; 0x2816 <_ZN8SdVolume13cacheRawBlockEmh>
    2f3a:	88 23       	and	r24, r24
    2f3c:	69 f2       	breq	.-102    	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2f3e:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <_ZN8SdVolume12cacheBuffer_E+0xb>
    2f42:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <_ZN8SdVolume12cacheBuffer_E+0xc>
    2f46:	81 15       	cp	r24, r1
    2f48:	92 40       	sbci	r25, 0x02	; 2
    2f4a:	31 f6       	brne	.-116    	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    2f4c:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2f50:	99 23       	and	r25, r25
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <_ZN8SdVolume4initEP7Sd2Cardh+0xaa>
    2f54:	c1 cf       	rjmp	.-126    	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    2f56:	20 91 da 03 	lds	r18, 0x03DA	; 0x8003da <_ZN8SdVolume12cacheBuffer_E+0xe>
    2f5a:	30 91 db 03 	lds	r19, 0x03DB	; 0x8003db <_ZN8SdVolume12cacheBuffer_E+0xf>
    2f5e:	23 2b       	or	r18, r19
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <_ZN8SdVolume4initEP7Sd2Cardh+0xb8>
    2f62:	ba cf       	rjmp	.-140    	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    2f64:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    2f68:	88 23       	and	r24, r24
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    2f6c:	b5 cf       	rjmp	.-150    	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    2f6e:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    2f70:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    2f72:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	41 e0       	ldi	r20, 0x01	; 1
    2f78:	50 e0       	ldi	r21, 0x00	; 0
    2f7a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f7c:	e2 2f       	mov	r30, r18
    2f7e:	ba 01       	movw	r22, r20
    2f80:	02 2e       	mov	r0, r18
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    2f84:	66 0f       	add	r22, r22
    2f86:	77 1f       	adc	r23, r23
    2f88:	0a 94       	dec	r0
    2f8a:	e2 f7       	brpl	.-8      	; 0x2f84 <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    2f8c:	86 17       	cp	r24, r22
    2f8e:	97 07       	cpc	r25, r23
    2f90:	31 f0       	breq	.+12     	; 0x2f9e <_ZN8SdVolume4initEP7Sd2Cardh+0xf2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    2f92:	31 e0       	ldi	r19, 0x01	; 1
    2f94:	32 0f       	add	r19, r18
    2f96:	3d 87       	std	Y+13, r19	; 0x0d
    2f98:	28 30       	cpi	r18, 0x08	; 8
    2f9a:	78 f3       	brcs	.-34     	; 0x2f7a <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    2f9c:	9d cf       	rjmp	.-198    	; 0x2ed8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    2f9e:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <_ZN8SdVolume12cacheBuffer_E+0x16>
    2fa2:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    2fa6:	21 15       	cp	r18, r1
    2fa8:	31 05       	cpc	r19, r1
    2faa:	19 f0       	breq	.+6      	; 0x2fb2 <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	50 e0       	ldi	r21, 0x00	; 0
    2fb0:	08 c0       	rjmp	.+16     	; 0x2fc2 <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    2fb2:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <_ZN8SdVolume12cacheBuffer_E+0x24>
    2fb6:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <_ZN8SdVolume12cacheBuffer_E+0x25>
    2fba:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <_ZN8SdVolume12cacheBuffer_E+0x26>
    2fbe:	50 91 f3 03 	lds	r21, 0x03F3	; 0x8003f3 <_ZN8SdVolume12cacheBuffer_E+0x27>
    2fc2:	2d 83       	std	Y+5, r18	; 0x05
    2fc4:	3e 83       	std	Y+6, r19	; 0x06
    2fc6:	4f 83       	std	Y+7, r20	; 0x07
    2fc8:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    2fca:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <_ZN8SdVolume12cacheBuffer_E+0xe>
    2fce:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <_ZN8SdVolume12cacheBuffer_E+0xf>
    2fd2:	46 01       	movw	r8, r12
    2fd4:	57 01       	movw	r10, r14
    2fd6:	88 0e       	add	r8, r24
    2fd8:	99 1e       	adc	r9, r25
    2fda:	a1 1c       	adc	r10, r1
    2fdc:	b1 1c       	adc	r11, r1
    2fde:	8b 8a       	std	Y+19, r8	; 0x13
    2fe0:	9c 8a       	std	Y+20, r9	; 0x14
    2fe2:	ad 8a       	std	Y+21, r10	; 0x15
    2fe4:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    2fe6:	00 91 dd 03 	lds	r16, 0x03DD	; 0x8003dd <_ZN8SdVolume12cacheBuffer_E+0x11>
    2fea:	10 91 de 03 	lds	r17, 0x03DE	; 0x8003de <_ZN8SdVolume12cacheBuffer_E+0x12>
    2fee:	19 8f       	std	Y+25, r17	; 0x19
    2ff0:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    2ff2:	a0 91 dc 03 	lds	r26, 0x03DC	; 0x8003dc <_ZN8SdVolume12cacheBuffer_E+0x10>
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	5c d6       	rcall	.+3256   	; 0x3cb2 <__muluhisi3>
    2ffa:	86 0e       	add	r8, r22
    2ffc:	97 1e       	adc	r9, r23
    2ffe:	a8 1e       	adc	r10, r24
    3000:	b9 1e       	adc	r11, r25
    3002:	8a 8e       	std	Y+26, r8	; 0x1a
    3004:	9b 8e       	std	Y+27, r9	; 0x1b
    3006:	ac 8e       	std	Y+28, r10	; 0x1c
    3008:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    300a:	85 e0       	ldi	r24, 0x05	; 5
    300c:	00 0f       	add	r16, r16
    300e:	11 1f       	adc	r17, r17
    3010:	8a 95       	dec	r24
    3012:	e1 f7       	brne	.-8      	; 0x300c <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    3014:	01 50       	subi	r16, 0x01	; 1
    3016:	1e 4f       	sbci	r17, 0xFE	; 254
    3018:	01 2f       	mov	r16, r17
    301a:	11 27       	eor	r17, r17
    301c:	06 95       	lsr	r16
    301e:	80 0e       	add	r8, r16
    3020:	91 1e       	adc	r9, r17
    3022:	a1 1c       	adc	r10, r1
    3024:	b1 1c       	adc	r11, r1
    3026:	8e 86       	std	Y+14, r8	; 0x0e
    3028:	9f 86       	std	Y+15, r9	; 0x0f
    302a:	a8 8a       	std	Y+16, r10	; 0x10
    302c:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    302e:	20 91 df 03 	lds	r18, 0x03DF	; 0x8003df <_ZN8SdVolume12cacheBuffer_E+0x13>
    3032:	30 91 e0 03 	lds	r19, 0x03E0	; 0x8003e0 <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    3036:	21 15       	cp	r18, r1
    3038:	31 05       	cpc	r19, r1
    303a:	21 f0       	breq	.+8      	; 0x3044 <_ZN8SdVolume4initEP7Sd2Cardh+0x198>
    303c:	a9 01       	movw	r20, r18
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	08 c0       	rjmp	.+16     	; 0x3054 <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    3044:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <_ZN8SdVolume12cacheBuffer_E+0x20>
    3048:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <_ZN8SdVolume12cacheBuffer_E+0x21>
    304c:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <_ZN8SdVolume12cacheBuffer_E+0x22>
    3050:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3054:	d7 01       	movw	r26, r14
    3056:	c6 01       	movw	r24, r12
    3058:	88 19       	sub	r24, r8
    305a:	99 09       	sbc	r25, r9
    305c:	aa 09       	sbc	r26, r10
    305e:	bb 09       	sbc	r27, r11
    3060:	84 0f       	add	r24, r20
    3062:	95 1f       	adc	r25, r21
    3064:	a6 1f       	adc	r26, r22
    3066:	b7 1f       	adc	r27, r23
    3068:	04 c0       	rjmp	.+8      	; 0x3072 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c6>
    306a:	b6 95       	lsr	r27
    306c:	a7 95       	ror	r26
    306e:	97 95       	ror	r25
    3070:	87 95       	ror	r24
    3072:	ea 95       	dec	r30
    3074:	d2 f7       	brpl	.-12     	; 0x306a <_ZN8SdVolume4initEP7Sd2Cardh+0x1be>
    3076:	89 87       	std	Y+9, r24	; 0x09
    3078:	9a 87       	std	Y+10, r25	; 0x0a
    307a:	ab 87       	std	Y+11, r26	; 0x0b
    307c:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    307e:	85 3f       	cpi	r24, 0xF5	; 245
    3080:	2f e0       	ldi	r18, 0x0F	; 15
    3082:	92 07       	cpc	r25, r18
    3084:	a1 05       	cpc	r26, r1
    3086:	b1 05       	cpc	r27, r1
    3088:	10 f4       	brcc	.+4      	; 0x308e <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    fatType_ = 12;
    308a:	8c e0       	ldi	r24, 0x0C	; 12
    308c:	14 c0       	rjmp	.+40     	; 0x30b6 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    308e:	85 3f       	cpi	r24, 0xF5	; 245
    3090:	9f 4f       	sbci	r25, 0xFF	; 255
    3092:	a1 05       	cpc	r26, r1
    3094:	b1 05       	cpc	r27, r1
    3096:	10 f4       	brcc	.+4      	; 0x309c <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    fatType_ = 16;
    3098:	80 e1       	ldi	r24, 0x10	; 16
    309a:	0d c0       	rjmp	.+26     	; 0x30b6 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    309c:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    30a0:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    30a4:	a0 91 fa 03 	lds	r26, 0x03FA	; 0x8003fa <_ZN8SdVolume12cacheBuffer_E+0x2e>
    30a8:	b0 91 fb 03 	lds	r27, 0x03FB	; 0x8003fb <_ZN8SdVolume12cacheBuffer_E+0x2f>
    30ac:	8a 8f       	std	Y+26, r24	; 0x1a
    30ae:	9b 8f       	std	Y+27, r25	; 0x1b
    30b0:	ac 8f       	std	Y+28, r26	; 0x1c
    30b2:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    30b4:	80 e2       	ldi	r24, 0x20	; 32
    30b6:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
}
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	df 90       	pop	r13
    30c8:	cf 90       	pop	r12
    30ca:	bf 90       	pop	r11
    30cc:	af 90       	pop	r10
    30ce:	9f 90       	pop	r9
    30d0:	8f 90       	pop	r8
    30d2:	08 95       	ret

000030d4 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    30d4:	cf 93       	push	r28
  uint8_t sreg = SREG;
    30d6:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    30d8:	f8 94       	cli
  if (!initialized) {
    30da:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SPIClass11initializedE>
    30de:	81 11       	cpse	r24, r1
    30e0:	23 c0       	rjmp	.+70     	; 0x3128 <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    30e2:	e9 ed       	ldi	r30, 0xD9	; 217
    30e4:	f1 e0       	ldi	r31, 0x01	; 1
    30e6:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    30e8:	e3 e9       	ldi	r30, 0x93	; 147
    30ea:	f1 e0       	ldi	r31, 0x01	; 1
    30ec:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    30ee:	e8 2f       	mov	r30, r24
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	ee 0f       	add	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	ec 5f       	subi	r30, 0xFC	; 252
    30f8:	fd 4f       	sbci	r31, 0xFD	; 253
    30fa:	a5 91       	lpm	r26, Z+
    30fc:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    30fe:	ec 91       	ld	r30, X
    3100:	e9 23       	and	r30, r25
    3102:	19 f4       	brne	.+6      	; 0x310a <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    3104:	61 e0       	ldi	r22, 0x01	; 1
    3106:	85 e3       	ldi	r24, 0x35	; 53
    3108:	0a d4       	rcall	.+2068   	; 0x391e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	85 e3       	ldi	r24, 0x35	; 53
    310e:	cb d3       	rcall	.+1942   	; 0x38a6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3110:	8c b5       	in	r24, 0x2c	; 44
    3112:	80 61       	ori	r24, 0x10	; 16
    3114:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3116:	8c b5       	in	r24, 0x2c	; 44
    3118:	80 64       	ori	r24, 0x40	; 64
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    311a:	8c bd       	out	0x2c, r24	; 44
    311c:	61 e0       	ldi	r22, 0x01	; 1
    pinMode(MOSI, OUTPUT);
    311e:	84 e3       	ldi	r24, 0x34	; 52
    3120:	c2 d3       	rcall	.+1924   	; 0x38a6 <pinMode>
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	83 e3       	ldi	r24, 0x33	; 51
  }
  initialized++; // reference count
    3126:	bf d3       	rcall	.+1918   	; 0x38a6 <pinMode>
    3128:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SPIClass11initializedE>
    312c:	8f 5f       	subi	r24, 0xFF	; 255
    312e:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <_ZN8SPIClass11initializedE>
  SREG = sreg;
}
    3132:	cf bf       	out	0x3f, r28	; 63
    3134:	cf 91       	pop	r28
    3136:	08 95       	ret

00003138 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3138:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    313a:	91 8d       	ldd	r25, Z+25	; 0x19
    313c:	22 8d       	ldd	r18, Z+26	; 0x1a
    313e:	89 2f       	mov	r24, r25
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	80 5c       	subi	r24, 0xC0	; 192
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	82 1b       	sub	r24, r18
    3148:	91 09       	sbc	r25, r1
}
    314a:	8f 73       	andi	r24, 0x3F	; 63
    314c:	99 27       	eor	r25, r25
    314e:	08 95       	ret

00003150 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3150:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3152:	91 8d       	ldd	r25, Z+25	; 0x19
    3154:	82 8d       	ldd	r24, Z+26	; 0x1a
    3156:	98 17       	cp	r25, r24
    3158:	31 f0       	breq	.+12     	; 0x3166 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    315a:	82 8d       	ldd	r24, Z+26	; 0x1a
    315c:	e8 0f       	add	r30, r24
    315e:	f1 1d       	adc	r31, r1
    3160:	85 8d       	ldd	r24, Z+29	; 0x1d
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3166:	8f ef       	ldi	r24, 0xFF	; 255
    3168:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    316a:	08 95       	ret

0000316c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    316c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    316e:	91 8d       	ldd	r25, Z+25	; 0x19
    3170:	82 8d       	ldd	r24, Z+26	; 0x1a
    3172:	98 17       	cp	r25, r24
    3174:	61 f0       	breq	.+24     	; 0x318e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3176:	82 8d       	ldd	r24, Z+26	; 0x1a
    3178:	df 01       	movw	r26, r30
    317a:	a8 0f       	add	r26, r24
    317c:	b1 1d       	adc	r27, r1
    317e:	5d 96       	adiw	r26, 0x1d	; 29
    3180:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3182:	92 8d       	ldd	r25, Z+26	; 0x1a
    3184:	9f 5f       	subi	r25, 0xFF	; 255
    3186:	9f 73       	andi	r25, 0x3F	; 63
    3188:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    318e:	8f ef       	ldi	r24, 0xFF	; 255
    3190:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3192:	08 95       	ret

00003194 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    3194:	fc 01       	movw	r30, r24
    3196:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    3198:	44 8d       	ldd	r20, Z+28	; 0x1c
    319a:	25 2f       	mov	r18, r21
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	84 2f       	mov	r24, r20
    31a0:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    31a2:	82 1b       	sub	r24, r18
    31a4:	93 0b       	sbc	r25, r19
    31a6:	54 17       	cp	r21, r20
    31a8:	10 f0       	brcs	.+4      	; 0x31ae <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    31aa:	cf 96       	adiw	r24, 0x3f	; 63
    31ac:	08 95       	ret
  return tail - head - 1;
    31ae:	01 97       	sbiw	r24, 0x01	; 1
}
    31b0:	08 95       	ret

000031b2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    31b2:	8e e5       	ldi	r24, 0x5E	; 94
    31b4:	9a e1       	ldi	r25, 0x1A	; 26
    31b6:	89 2b       	or	r24, r25
    31b8:	39 f0       	breq	.+14     	; 0x31c8 <_Z14serialEventRunv+0x16>
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	89 2b       	or	r24, r25
    31c0:	19 f0       	breq	.+6      	; 0x31c8 <_Z14serialEventRunv+0x16>
    31c2:	7c d1       	rcall	.+760    	; 0x34bc <_Z17Serial0_availablev>
    31c4:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    31c6:	24 c0       	rjmp	.+72     	; 0x3210 <_Z14serialEventRunv+0x5e>
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	89 2b       	or	r24, r25
    31ce:	41 f0       	breq	.+16     	; 0x31e0 <_Z14serialEventRunv+0x2e>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	89 2b       	or	r24, r25
    31d6:	21 f0       	breq	.+8      	; 0x31e0 <_Z14serialEventRunv+0x2e>
    31d8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    31dc:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    31de:	1b c0       	rjmp	.+54     	; 0x3216 <_Z14serialEventRunv+0x64>
    31e0:	83 ef       	ldi	r24, 0xF3	; 243
    31e2:	9a e1       	ldi	r25, 0x1A	; 26
    31e4:	89 2b       	or	r24, r25
    31e6:	39 f0       	breq	.+14     	; 0x31f6 <_Z14serialEventRunv+0x44>
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	89 2b       	or	r24, r25
    31ee:	19 f0       	breq	.+6      	; 0x31f6 <_Z14serialEventRunv+0x44>
    31f0:	fa d1       	rcall	.+1012   	; 0x35e6 <_Z17Serial2_availablev>
    31f2:	81 11       	cpse	r24, r1
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    31f4:	13 c0       	rjmp	.+38     	; 0x321c <_Z14serialEventRunv+0x6a>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	89 2b       	or	r24, r25
    31fc:	a1 f0       	breq	.+40     	; 0x3226 <_Z14serialEventRunv+0x74>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	89 2b       	or	r24, r25
    3204:	81 f0       	breq	.+32     	; 0x3226 <_Z14serialEventRunv+0x74>
    3206:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    320a:	81 11       	cpse	r24, r1
    320c:	0a c0       	rjmp	.+20     	; 0x3222 <_Z14serialEventRunv+0x70>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    320e:	08 95       	ret
    3210:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3214:	d9 cf       	rjmp	.-78     	; 0x31c8 <_Z14serialEventRunv+0x16>
    3216:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    321a:	e2 cf       	rjmp	.-60     	; 0x31e0 <_Z14serialEventRunv+0x2e>
    321c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    3220:	ea cf       	rjmp	.-44     	; 0x31f6 <_Z14serialEventRunv+0x44>
    3222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3226:	08 95       	ret

00003228 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3228:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    322a:	84 8d       	ldd	r24, Z+28	; 0x1c
    322c:	df 01       	movw	r26, r30
    322e:	a8 0f       	add	r26, r24
    3230:	b1 1d       	adc	r27, r1
    3232:	a3 5a       	subi	r26, 0xA3	; 163
    3234:	bf 4f       	sbci	r27, 0xFF	; 255
    3236:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3238:	84 8d       	ldd	r24, Z+28	; 0x1c
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	8f 73       	andi	r24, 0x3F	; 63
    3240:	99 27       	eor	r25, r25
    3242:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3244:	a6 89       	ldd	r26, Z+22	; 0x16
    3246:	b7 89       	ldd	r27, Z+23	; 0x17
    3248:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    324a:	a0 89       	ldd	r26, Z+16	; 0x10
    324c:	b1 89       	ldd	r27, Z+17	; 0x11
    324e:	8c 91       	ld	r24, X
    3250:	80 64       	ori	r24, 0x40	; 64
    3252:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3254:	93 8d       	ldd	r25, Z+27	; 0x1b
    3256:	84 8d       	ldd	r24, Z+28	; 0x1c
    3258:	98 13       	cpse	r25, r24
    325a:	06 c0       	rjmp	.+12     	; 0x3268 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    325c:	02 88       	ldd	r0, Z+18	; 0x12
    325e:	f3 89       	ldd	r31, Z+19	; 0x13
    3260:	e0 2d       	mov	r30, r0
    3262:	80 81       	ld	r24, Z
    3264:	8f 7d       	andi	r24, 0xDF	; 223
    3266:	80 83       	st	Z, r24
    3268:	08 95       	ret

0000326a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    326a:	ef 92       	push	r14
    326c:	ff 92       	push	r15
    326e:	0f 93       	push	r16
    3270:	1f 93       	push	r17
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	ec 01       	movw	r28, r24
  _written = true;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    327c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    327e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3280:	98 13       	cpse	r25, r24
    3282:	05 c0       	rjmp	.+10     	; 0x328e <_ZN14HardwareSerial5writeEh+0x24>
    3284:	e8 89       	ldd	r30, Y+16	; 0x10
    3286:	f9 89       	ldd	r31, Y+17	; 0x11
    3288:	80 81       	ld	r24, Z
    328a:	85 fd       	sbrc	r24, 5
    328c:	23 c0       	rjmp	.+70     	; 0x32d4 <_ZN14HardwareSerial5writeEh+0x6a>
    328e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3290:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3292:	10 e0       	ldi	r17, 0x00	; 0
    3294:	0f 5f       	subi	r16, 0xFF	; 255
    3296:	1f 4f       	sbci	r17, 0xFF	; 255
    3298:	0f 73       	andi	r16, 0x3F	; 63
    329a:	11 27       	eor	r17, r17
    329c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    329e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32a0:	e8 12       	cpse	r14, r24
    32a2:	0b c0       	rjmp	.+22     	; 0x32ba <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	07 fc       	sbrc	r0, 7
    32a8:	fa cf       	rjmp	.-12     	; 0x329e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    32aa:	e8 89       	ldd	r30, Y+16	; 0x10
    32ac:	f9 89       	ldd	r31, Y+17	; 0x11
    32ae:	80 81       	ld	r24, Z
    32b0:	85 ff       	sbrs	r24, 5
    32b2:	f5 cf       	rjmp	.-22     	; 0x329e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    32b4:	ce 01       	movw	r24, r28
    32b6:	b8 df       	rcall	.-144    	; 0x3228 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    32b8:	f2 cf       	rjmp	.-28     	; 0x329e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    32ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32bc:	fe 01       	movw	r30, r28
    32be:	e8 0f       	add	r30, r24
    32c0:	f1 1d       	adc	r31, r1
    32c2:	e3 5a       	subi	r30, 0xA3	; 163
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    32c8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    32ca:	ea 89       	ldd	r30, Y+18	; 0x12
    32cc:	fb 89       	ldd	r31, Y+19	; 0x13
    32ce:	80 81       	ld	r24, Z
    32d0:	80 62       	ori	r24, 0x20	; 32
    32d2:	07 c0       	rjmp	.+14     	; 0x32e2 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    32d4:	ee 89       	ldd	r30, Y+22	; 0x16
    32d6:	ff 89       	ldd	r31, Y+23	; 0x17
    32d8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    32da:	e8 89       	ldd	r30, Y+16	; 0x10
    32dc:	f9 89       	ldd	r31, Y+17	; 0x11
    32de:	80 81       	ld	r24, Z
    32e0:	80 64       	ori	r24, 0x40	; 64
    32e2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	df 91       	pop	r29
    32ea:	cf 91       	pop	r28
    32ec:	1f 91       	pop	r17
    32ee:	0f 91       	pop	r16
    32f0:	ff 90       	pop	r15
    32f2:	ef 90       	pop	r14
    32f4:	08 95       	ret

000032f6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    32fc:	88 8d       	ldd	r24, Y+24	; 0x18
    32fe:	88 23       	and	r24, r24
    3300:	c1 f0       	breq	.+48     	; 0x3332 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3302:	ea 89       	ldd	r30, Y+18	; 0x12
    3304:	fb 89       	ldd	r31, Y+19	; 0x13
    3306:	80 81       	ld	r24, Z
    3308:	85 fd       	sbrc	r24, 5
    330a:	05 c0       	rjmp	.+10     	; 0x3316 <_ZN14HardwareSerial5flushEv+0x20>
    330c:	a8 89       	ldd	r26, Y+16	; 0x10
    330e:	b9 89       	ldd	r27, Y+17	; 0x11
    3310:	8c 91       	ld	r24, X
    3312:	86 fd       	sbrc	r24, 6
    3314:	0e c0       	rjmp	.+28     	; 0x3332 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	07 fc       	sbrc	r0, 7
    331a:	f5 cf       	rjmp	.-22     	; 0x3306 <_ZN14HardwareSerial5flushEv+0x10>
    331c:	80 81       	ld	r24, Z
    331e:	85 ff       	sbrs	r24, 5
    3320:	f2 cf       	rjmp	.-28     	; 0x3306 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3322:	a8 89       	ldd	r26, Y+16	; 0x10
    3324:	b9 89       	ldd	r27, Y+17	; 0x11
    3326:	8c 91       	ld	r24, X
    3328:	85 ff       	sbrs	r24, 5
    332a:	ed cf       	rjmp	.-38     	; 0x3306 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    332c:	ce 01       	movw	r24, r28
    332e:	7c df       	rcall	.-264    	; 0x3228 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3330:	e8 cf       	rjmp	.-48     	; 0x3302 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3332:	df 91       	pop	r29
    3334:	cf 91       	pop	r28
    3336:	08 95       	ret

00003338 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3338:	cf 92       	push	r12
    333a:	df 92       	push	r13
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	ec 01       	movw	r28, r24
    3348:	6a 01       	movw	r12, r20
    334a:	7b 01       	movw	r14, r22
    334c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    334e:	e8 89       	ldd	r30, Y+16	; 0x10
    3350:	f9 89       	ldd	r31, Y+17	; 0x11
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3356:	41 15       	cp	r20, r1
    3358:	51 4e       	sbci	r21, 0xE1	; 225
    335a:	61 05       	cpc	r22, r1
    335c:	71 05       	cpc	r23, r1
    335e:	a9 f0       	breq	.+42     	; 0x338a <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3360:	60 e0       	ldi	r22, 0x00	; 0
    3362:	79 e0       	ldi	r23, 0x09	; 9
    3364:	8d e3       	ldi	r24, 0x3D	; 61
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	a7 01       	movw	r20, r14
    336a:	96 01       	movw	r18, r12
    336c:	78 d4       	rcall	.+2288   	; 0x3c5e <__udivmodsi4>
    336e:	da 01       	movw	r26, r20
    3370:	c9 01       	movw	r24, r18
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	a1 09       	sbc	r26, r1
    3376:	b1 09       	sbc	r27, r1
    3378:	b6 95       	lsr	r27
    337a:	a7 95       	ror	r26
    337c:	97 95       	ror	r25
    337e:	87 95       	ror	r24
    3380:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3382:	21 15       	cp	r18, r1
    3384:	80 e1       	ldi	r24, 0x10	; 16
    3386:	38 07       	cpc	r19, r24
    3388:	a0 f0       	brcs	.+40     	; 0x33b2 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    338a:	e8 89       	ldd	r30, Y+16	; 0x10
    338c:	f9 89       	ldd	r31, Y+17	; 0x11
    338e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3390:	60 e8       	ldi	r22, 0x80	; 128
    3392:	74 e8       	ldi	r23, 0x84	; 132
    3394:	8e e1       	ldi	r24, 0x1E	; 30
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	a7 01       	movw	r20, r14
    339a:	96 01       	movw	r18, r12
    339c:	60 d4       	rcall	.+2240   	; 0x3c5e <__udivmodsi4>
    339e:	da 01       	movw	r26, r20
    33a0:	c9 01       	movw	r24, r18
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	a1 09       	sbc	r26, r1
    33a6:	b1 09       	sbc	r27, r1
    33a8:	b6 95       	lsr	r27
    33aa:	a7 95       	ror	r26
    33ac:	97 95       	ror	r25
    33ae:	87 95       	ror	r24
    33b0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    33b2:	ec 85       	ldd	r30, Y+12	; 0x0c
    33b4:	fd 85       	ldd	r31, Y+13	; 0x0d
    33b6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    33b8:	ee 85       	ldd	r30, Y+14	; 0x0e
    33ba:	ff 85       	ldd	r31, Y+15	; 0x0f
    33bc:	20 83       	st	Z, r18

  _written = false;
    33be:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    33c0:	ec 89       	ldd	r30, Y+20	; 0x14
    33c2:	fd 89       	ldd	r31, Y+21	; 0x15
    33c4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    33c6:	ea 89       	ldd	r30, Y+18	; 0x12
    33c8:	fb 89       	ldd	r31, Y+19	; 0x13
    33ca:	80 81       	ld	r24, Z
    33cc:	80 61       	ori	r24, 0x10	; 16
    33ce:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    33d0:	ea 89       	ldd	r30, Y+18	; 0x12
    33d2:	fb 89       	ldd	r31, Y+19	; 0x13
    33d4:	80 81       	ld	r24, Z
    33d6:	88 60       	ori	r24, 0x08	; 8
    33d8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    33da:	ea 89       	ldd	r30, Y+18	; 0x12
    33dc:	fb 89       	ldd	r31, Y+19	; 0x13
    33de:	80 81       	ld	r24, Z
    33e0:	80 68       	ori	r24, 0x80	; 128
    33e2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    33e4:	ea 89       	ldd	r30, Y+18	; 0x12
    33e6:	fb 89       	ldd	r31, Y+19	; 0x13
    33e8:	80 81       	ld	r24, Z
    33ea:	8f 7d       	andi	r24, 0xDF	; 223
    33ec:	80 83       	st	Z, r24
}
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	1f 91       	pop	r17
    33f4:	ff 90       	pop	r15
    33f6:	ef 90       	pop	r14
    33f8:	df 90       	pop	r13
    33fa:	cf 90       	pop	r12
    33fc:	08 95       	ret

000033fe <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    33fe:	1f 92       	push	r1
    3400:	0f 92       	push	r0
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	0f 92       	push	r0
    3406:	11 24       	eor	r1, r1
    3408:	0b b6       	in	r0, 0x3b	; 59
    340a:	0f 92       	push	r0
    340c:	2f 93       	push	r18
    340e:	8f 93       	push	r24
    3410:	9f 93       	push	r25
    3412:	ef 93       	push	r30
    3414:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3416:	e0 91 e0 05 	lds	r30, 0x05E0	; 0x8005e0 <Serial+0x10>
    341a:	f0 91 e1 05 	lds	r31, 0x05E1	; 0x8005e1 <Serial+0x11>
    341e:	80 81       	ld	r24, Z
    3420:	e0 91 e6 05 	lds	r30, 0x05E6	; 0x8005e6 <Serial+0x16>
    3424:	f0 91 e7 05 	lds	r31, 0x05E7	; 0x8005e7 <Serial+0x17>
    3428:	82 fd       	sbrc	r24, 2
    342a:	12 c0       	rjmp	.+36     	; 0x3450 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    342c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    342e:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <Serial+0x19>
    3432:	8f 5f       	subi	r24, 0xFF	; 255
    3434:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3436:	20 91 ea 05 	lds	r18, 0x05EA	; 0x8005ea <Serial+0x1a>
    343a:	82 17       	cp	r24, r18
    343c:	51 f0       	breq	.+20     	; 0x3452 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    343e:	e0 91 e9 05 	lds	r30, 0x05E9	; 0x8005e9 <Serial+0x19>
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	e0 53       	subi	r30, 0x30	; 48
    3446:	fa 4f       	sbci	r31, 0xFA	; 250
    3448:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    344a:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <Serial+0x19>
    344e:	01 c0       	rjmp	.+2      	; 0x3452 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3450:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3452:	ff 91       	pop	r31
    3454:	ef 91       	pop	r30
    3456:	9f 91       	pop	r25
    3458:	8f 91       	pop	r24
    345a:	2f 91       	pop	r18
    345c:	0f 90       	pop	r0
    345e:	0b be       	out	0x3b, r0	; 59
    3460:	0f 90       	pop	r0
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	0f 90       	pop	r0
    3466:	1f 90       	pop	r1
    3468:	18 95       	reti

0000346a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    346a:	1f 92       	push	r1
    346c:	0f 92       	push	r0
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	0f 92       	push	r0
    3472:	11 24       	eor	r1, r1
    3474:	0b b6       	in	r0, 0x3b	; 59
    3476:	0f 92       	push	r0
    3478:	2f 93       	push	r18
    347a:	3f 93       	push	r19
    347c:	4f 93       	push	r20
    347e:	5f 93       	push	r21
    3480:	6f 93       	push	r22
    3482:	7f 93       	push	r23
    3484:	8f 93       	push	r24
    3486:	9f 93       	push	r25
    3488:	af 93       	push	r26
    348a:	bf 93       	push	r27
    348c:	ef 93       	push	r30
    348e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3490:	80 ed       	ldi	r24, 0xD0	; 208
    3492:	95 e0       	ldi	r25, 0x05	; 5
    3494:	c9 de       	rcall	.-622    	; 0x3228 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3496:	ff 91       	pop	r31
    3498:	ef 91       	pop	r30
    349a:	bf 91       	pop	r27
    349c:	af 91       	pop	r26
    349e:	9f 91       	pop	r25
    34a0:	8f 91       	pop	r24
    34a2:	7f 91       	pop	r23
    34a4:	6f 91       	pop	r22
    34a6:	5f 91       	pop	r21
    34a8:	4f 91       	pop	r20
    34aa:	3f 91       	pop	r19
    34ac:	2f 91       	pop	r18
    34ae:	0f 90       	pop	r0
    34b0:	0b be       	out	0x3b, r0	; 59
    34b2:	0f 90       	pop	r0
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	0f 90       	pop	r0
    34b8:	1f 90       	pop	r1
    34ba:	18 95       	reti

000034bc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    34bc:	80 ed       	ldi	r24, 0xD0	; 208
    34be:	95 e0       	ldi	r25, 0x05	; 5
    34c0:	3b de       	rcall	.-906    	; 0x3138 <_ZN14HardwareSerial9availableEv>
    34c2:	21 e0       	ldi	r18, 0x01	; 1
    34c4:	89 2b       	or	r24, r25
    34c6:	09 f4       	brne	.+2      	; 0x34ca <_Z17Serial0_availablev+0xe>
    34c8:	20 e0       	ldi	r18, 0x00	; 0
}
    34ca:	82 2f       	mov	r24, r18
    34cc:	08 95       	ret

000034ce <_GLOBAL__sub_I___vector_25>:
  public:
    Print() : write_error(0) {}
    34ce:	e0 ed       	ldi	r30, 0xD0	; 208
    34d0:	f5 e0       	ldi	r31, 0x05	; 5
    34d2:	13 82       	std	Z+3, r1	; 0x03
    34d4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    34d6:	88 ee       	ldi	r24, 0xE8	; 232
    34d8:	93 e0       	ldi	r25, 0x03	; 3
    34da:	a0 e0       	ldi	r26, 0x00	; 0
    34dc:	b0 e0       	ldi	r27, 0x00	; 0
    34de:	84 83       	std	Z+4, r24	; 0x04
    34e0:	95 83       	std	Z+5, r25	; 0x05
    34e2:	a6 83       	std	Z+6, r26	; 0x06
    34e4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    34e6:	8a e2       	ldi	r24, 0x2A	; 42
    34e8:	93 e0       	ldi	r25, 0x03	; 3
    34ea:	91 83       	std	Z+1, r25	; 0x01
    34ec:	80 83       	st	Z, r24
    34ee:	85 ec       	ldi	r24, 0xC5	; 197
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	95 87       	std	Z+13, r25	; 0x0d
    34f4:	84 87       	std	Z+12, r24	; 0x0c
    34f6:	84 ec       	ldi	r24, 0xC4	; 196
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	97 87       	std	Z+15, r25	; 0x0f
    34fc:	86 87       	std	Z+14, r24	; 0x0e
    34fe:	80 ec       	ldi	r24, 0xC0	; 192
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	91 8b       	std	Z+17, r25	; 0x11
    3504:	80 8b       	std	Z+16, r24	; 0x10
    3506:	81 ec       	ldi	r24, 0xC1	; 193
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	93 8b       	std	Z+19, r25	; 0x13
    350c:	82 8b       	std	Z+18, r24	; 0x12
    350e:	82 ec       	ldi	r24, 0xC2	; 194
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	95 8b       	std	Z+21, r25	; 0x15
    3514:	84 8b       	std	Z+20, r24	; 0x14
    3516:	86 ec       	ldi	r24, 0xC6	; 198
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	97 8b       	std	Z+23, r25	; 0x17
    351c:	86 8b       	std	Z+22, r24	; 0x16
    351e:	11 8e       	std	Z+25, r1	; 0x19
    3520:	12 8e       	std	Z+26, r1	; 0x1a
    3522:	13 8e       	std	Z+27, r1	; 0x1b
    3524:	14 8e       	std	Z+28, r1	; 0x1c
    3526:	08 95       	ret

00003528 <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    3528:	1f 92       	push	r1
    352a:	0f 92       	push	r0
    352c:	0f b6       	in	r0, 0x3f	; 63
    352e:	0f 92       	push	r0
    3530:	11 24       	eor	r1, r1
    3532:	0b b6       	in	r0, 0x3b	; 59
    3534:	0f 92       	push	r0
    3536:	2f 93       	push	r18
    3538:	8f 93       	push	r24
    353a:	9f 93       	push	r25
    353c:	ef 93       	push	r30
    353e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3540:	e0 91 7d 06 	lds	r30, 0x067D	; 0x80067d <Serial2+0x10>
    3544:	f0 91 7e 06 	lds	r31, 0x067E	; 0x80067e <Serial2+0x11>
    3548:	80 81       	ld	r24, Z
    354a:	e0 91 83 06 	lds	r30, 0x0683	; 0x800683 <Serial2+0x16>
    354e:	f0 91 84 06 	lds	r31, 0x0684	; 0x800684 <Serial2+0x17>
    3552:	82 fd       	sbrc	r24, 2
    3554:	12 c0       	rjmp	.+36     	; 0x357a <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3556:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3558:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <Serial2+0x19>
    355c:	8f 5f       	subi	r24, 0xFF	; 255
    355e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3560:	20 91 87 06 	lds	r18, 0x0687	; 0x800687 <Serial2+0x1a>
    3564:	82 17       	cp	r24, r18
    3566:	51 f0       	breq	.+20     	; 0x357c <__vector_51+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    3568:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <Serial2+0x19>
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	e3 59       	subi	r30, 0x93	; 147
    3570:	f9 4f       	sbci	r31, 0xF9	; 249
    3572:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3574:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <Serial2+0x19>
    3578:	01 c0       	rjmp	.+2      	; 0x357c <__vector_51+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    357a:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    357c:	ff 91       	pop	r31
    357e:	ef 91       	pop	r30
    3580:	9f 91       	pop	r25
    3582:	8f 91       	pop	r24
    3584:	2f 91       	pop	r18
    3586:	0f 90       	pop	r0
    3588:	0b be       	out	0x3b, r0	; 59
    358a:	0f 90       	pop	r0
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	0f 90       	pop	r0
    3590:	1f 90       	pop	r1
    3592:	18 95       	reti

00003594 <__vector_52>:

ISR(USART2_UDRE_vect)
{
    3594:	1f 92       	push	r1
    3596:	0f 92       	push	r0
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	0f 92       	push	r0
    359c:	11 24       	eor	r1, r1
    359e:	0b b6       	in	r0, 0x3b	; 59
    35a0:	0f 92       	push	r0
    35a2:	2f 93       	push	r18
    35a4:	3f 93       	push	r19
    35a6:	4f 93       	push	r20
    35a8:	5f 93       	push	r21
    35aa:	6f 93       	push	r22
    35ac:	7f 93       	push	r23
    35ae:	8f 93       	push	r24
    35b0:	9f 93       	push	r25
    35b2:	af 93       	push	r26
    35b4:	bf 93       	push	r27
    35b6:	ef 93       	push	r30
    35b8:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    35ba:	8d e6       	ldi	r24, 0x6D	; 109
    35bc:	96 e0       	ldi	r25, 0x06	; 6
    35be:	34 de       	rcall	.-920    	; 0x3228 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    35c0:	ff 91       	pop	r31
    35c2:	ef 91       	pop	r30
    35c4:	bf 91       	pop	r27
    35c6:	af 91       	pop	r26
    35c8:	9f 91       	pop	r25
    35ca:	8f 91       	pop	r24
    35cc:	7f 91       	pop	r23
    35ce:	6f 91       	pop	r22
    35d0:	5f 91       	pop	r21
    35d2:	4f 91       	pop	r20
    35d4:	3f 91       	pop	r19
    35d6:	2f 91       	pop	r18
    35d8:	0f 90       	pop	r0
    35da:	0b be       	out	0x3b, r0	; 59
    35dc:	0f 90       	pop	r0
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	0f 90       	pop	r0
    35e2:	1f 90       	pop	r1
    35e4:	18 95       	reti

000035e6 <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    35e6:	8d e6       	ldi	r24, 0x6D	; 109
    35e8:	96 e0       	ldi	r25, 0x06	; 6
    35ea:	a6 dd       	rcall	.-1204   	; 0x3138 <_ZN14HardwareSerial9availableEv>
    35ec:	21 e0       	ldi	r18, 0x01	; 1
    35ee:	89 2b       	or	r24, r25
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <_Z17Serial2_availablev+0xe>
    35f2:	20 e0       	ldi	r18, 0x00	; 0
}
    35f4:	82 2f       	mov	r24, r18
    35f6:	08 95       	ret

000035f8 <_GLOBAL__sub_I___vector_51>:
    35f8:	ed e6       	ldi	r30, 0x6D	; 109
    35fa:	f6 e0       	ldi	r31, 0x06	; 6
    35fc:	13 82       	std	Z+3, r1	; 0x03
    35fe:	12 82       	std	Z+2, r1	; 0x02
    3600:	88 ee       	ldi	r24, 0xE8	; 232
    3602:	93 e0       	ldi	r25, 0x03	; 3
    3604:	a0 e0       	ldi	r26, 0x00	; 0
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	84 83       	std	Z+4, r24	; 0x04
    360a:	95 83       	std	Z+5, r25	; 0x05
    360c:	a6 83       	std	Z+6, r26	; 0x06
    360e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3610:	8a e2       	ldi	r24, 0x2A	; 42
    3612:	93 e0       	ldi	r25, 0x03	; 3
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	80 83       	st	Z, r24
    3618:	85 ed       	ldi	r24, 0xD5	; 213
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	95 87       	std	Z+13, r25	; 0x0d
    361e:	84 87       	std	Z+12, r24	; 0x0c
    3620:	84 ed       	ldi	r24, 0xD4	; 212
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	97 87       	std	Z+15, r25	; 0x0f
    3626:	86 87       	std	Z+14, r24	; 0x0e
    3628:	80 ed       	ldi	r24, 0xD0	; 208
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	91 8b       	std	Z+17, r25	; 0x11
    362e:	80 8b       	std	Z+16, r24	; 0x10
    3630:	81 ed       	ldi	r24, 0xD1	; 209
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	93 8b       	std	Z+19, r25	; 0x13
    3636:	82 8b       	std	Z+18, r24	; 0x12
    3638:	82 ed       	ldi	r24, 0xD2	; 210
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	95 8b       	std	Z+21, r25	; 0x15
    363e:	84 8b       	std	Z+20, r24	; 0x14
    3640:	86 ed       	ldi	r24, 0xD6	; 214
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	97 8b       	std	Z+23, r25	; 0x17
    3646:	86 8b       	std	Z+22, r24	; 0x16
    3648:	11 8e       	std	Z+25, r1	; 0x19
    364a:	12 8e       	std	Z+26, r1	; 0x1a
    364c:	13 8e       	std	Z+27, r1	; 0x1b
    364e:	14 8e       	std	Z+28, r1	; 0x1c
    3650:	08 95       	ret

00003652 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3652:	08 95       	ret

00003654 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3654:	cf 92       	push	r12
    3656:	df 92       	push	r13
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	6c 01       	movw	r12, r24
    3666:	7a 01       	movw	r14, r20
    3668:	8b 01       	movw	r16, r22
    366a:	c0 e0       	ldi	r28, 0x00	; 0
    366c:	d0 e0       	ldi	r29, 0x00	; 0
    366e:	ce 15       	cp	r28, r14
    3670:	df 05       	cpc	r29, r15
    3672:	81 f0       	breq	.+32     	; 0x3694 <_ZN5Print5writeEPKhj+0x40>
    3674:	d8 01       	movw	r26, r16
    3676:	6d 91       	ld	r22, X+
    3678:	8d 01       	movw	r16, r26
    367a:	d6 01       	movw	r26, r12
    367c:	ed 91       	ld	r30, X+
    367e:	fc 91       	ld	r31, X
    3680:	01 90       	ld	r0, Z+
    3682:	f0 81       	ld	r31, Z
    3684:	e0 2d       	mov	r30, r0
    3686:	c6 01       	movw	r24, r12
    3688:	19 95       	eicall
    368a:	89 2b       	or	r24, r25
    368c:	11 f0       	breq	.+4      	; 0x3692 <_ZN5Print5writeEPKhj+0x3e>
    368e:	21 96       	adiw	r28, 0x01	; 1
    3690:	ee cf       	rjmp	.-36     	; 0x366e <_ZN5Print5writeEPKhj+0x1a>
    3692:	7e 01       	movw	r14, r28
    3694:	c7 01       	movw	r24, r14
    3696:	df 91       	pop	r29
    3698:	cf 91       	pop	r28
    369a:	1f 91       	pop	r17
    369c:	0f 91       	pop	r16
    369e:	ff 90       	pop	r15
    36a0:	ef 90       	pop	r14
    36a2:	df 90       	pop	r13
    36a4:	cf 90       	pop	r12
    36a6:	08 95       	ret

000036a8 <_ZN5Print5writeEPKc>:
    36a8:	61 15       	cp	r22, r1
    36aa:	71 05       	cpc	r23, r1
    36ac:	79 f0       	breq	.+30     	; 0x36cc <_ZN5Print5writeEPKc+0x24>
    36ae:	fb 01       	movw	r30, r22
    36b0:	01 90       	ld	r0, Z+
    36b2:	00 20       	and	r0, r0
    36b4:	e9 f7       	brne	.-6      	; 0x36b0 <_ZN5Print5writeEPKc+0x8>
    36b6:	31 97       	sbiw	r30, 0x01	; 1
    36b8:	af 01       	movw	r20, r30
    36ba:	46 1b       	sub	r20, r22
    36bc:	57 0b       	sbc	r21, r23
    36be:	dc 01       	movw	r26, r24
    36c0:	ed 91       	ld	r30, X+
    36c2:	fc 91       	ld	r31, X
    36c4:	02 80       	ldd	r0, Z+2	; 0x02
    36c6:	f3 81       	ldd	r31, Z+3	; 0x03
    36c8:	e0 2d       	mov	r30, r0
    36ca:	19 94       	eijmp
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	08 95       	ret

000036d2 <_ZN5Print5printERK6String>:
    36d2:	db 01       	movw	r26, r22
    36d4:	14 96       	adiw	r26, 0x04	; 4
    36d6:	4d 91       	ld	r20, X+
    36d8:	5c 91       	ld	r21, X
    36da:	15 97       	sbiw	r26, 0x05	; 5
    36dc:	6d 91       	ld	r22, X+
    36de:	7c 91       	ld	r23, X
    36e0:	dc 01       	movw	r26, r24
    36e2:	ed 91       	ld	r30, X+
    36e4:	fc 91       	ld	r31, X
    36e6:	02 80       	ldd	r0, Z+2	; 0x02
    36e8:	f3 81       	ldd	r31, Z+3	; 0x03
    36ea:	e0 2d       	mov	r30, r0
    36ec:	19 94       	eijmp

000036ee <_ZN5Print5printEPKc>:
    36ee:	dc cf       	rjmp	.-72     	; 0x36a8 <_ZN5Print5writeEPKc>

000036f0 <_ZN5Print7printlnEv>:
    36f0:	63 e0       	ldi	r22, 0x03	; 3
    36f2:	73 e0       	ldi	r23, 0x03	; 3
    36f4:	d9 cf       	rjmp	.-78     	; 0x36a8 <_ZN5Print5writeEPKc>

000036f6 <_ZN5Print7printlnERK6String>:
    36f6:	0f 93       	push	r16
    36f8:	1f 93       	push	r17
    36fa:	cf 93       	push	r28
    36fc:	df 93       	push	r29
    36fe:	ec 01       	movw	r28, r24
    3700:	e8 df       	rcall	.-48     	; 0x36d2 <_ZN5Print5printERK6String>
    3702:	8c 01       	movw	r16, r24
    3704:	ce 01       	movw	r24, r28
    3706:	f4 df       	rcall	.-24     	; 0x36f0 <_ZN5Print7printlnEv>
    3708:	80 0f       	add	r24, r16
    370a:	91 1f       	adc	r25, r17
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	1f 91       	pop	r17
    3712:	0f 91       	pop	r16
    3714:	08 95       	ret

00003716 <_ZN5Print7printlnEPKc>:
    3716:	0f 93       	push	r16
    3718:	1f 93       	push	r17
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	ec 01       	movw	r28, r24
    3720:	c3 df       	rcall	.-122    	; 0x36a8 <_ZN5Print5writeEPKc>
    3722:	8c 01       	movw	r16, r24
    3724:	ce 01       	movw	r24, r28
    3726:	e4 df       	rcall	.-56     	; 0x36f0 <_ZN5Print7printlnEv>
    3728:	80 0f       	add	r24, r16
    372a:	91 1f       	adc	r25, r17
    372c:	df 91       	pop	r29
    372e:	cf 91       	pop	r28
    3730:	1f 91       	pop	r17
    3732:	0f 91       	pop	r16
    3734:	08 95       	ret

00003736 <_ZN5Print11printNumberEmh>:
    3736:	8f 92       	push	r8
    3738:	9f 92       	push	r9
    373a:	af 92       	push	r10
    373c:	bf 92       	push	r11
    373e:	ef 92       	push	r14
    3740:	ff 92       	push	r15
    3742:	0f 93       	push	r16
    3744:	1f 93       	push	r17
    3746:	cf 93       	push	r28
    3748:	df 93       	push	r29
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	a1 97       	sbiw	r28, 0x21	; 33
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	cd bf       	out	0x3d, r28	; 61
    375a:	7c 01       	movw	r14, r24
    375c:	fa 01       	movw	r30, r20
    375e:	cb 01       	movw	r24, r22
    3760:	19 a2       	std	Y+33, r1	; 0x21
    3762:	22 30       	cpi	r18, 0x02	; 2
    3764:	08 f4       	brcc	.+2      	; 0x3768 <_ZN5Print11printNumberEmh+0x32>
    3766:	2a e0       	ldi	r18, 0x0A	; 10
    3768:	8e 01       	movw	r16, r28
    376a:	0f 5d       	subi	r16, 0xDF	; 223
    376c:	1f 4f       	sbci	r17, 0xFF	; 255
    376e:	82 2e       	mov	r8, r18
    3770:	91 2c       	mov	r9, r1
    3772:	a1 2c       	mov	r10, r1
    3774:	b1 2c       	mov	r11, r1
    3776:	bf 01       	movw	r22, r30
    3778:	a5 01       	movw	r20, r10
    377a:	94 01       	movw	r18, r8
    377c:	70 d2       	rcall	.+1248   	; 0x3c5e <__udivmodsi4>
    377e:	f9 01       	movw	r30, r18
    3780:	ca 01       	movw	r24, r20
    3782:	01 50       	subi	r16, 0x01	; 1
    3784:	11 09       	sbc	r17, r1
    3786:	6a 30       	cpi	r22, 0x0A	; 10
    3788:	10 f4       	brcc	.+4      	; 0x378e <_ZN5Print11printNumberEmh+0x58>
    378a:	60 5d       	subi	r22, 0xD0	; 208
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <_ZN5Print11printNumberEmh+0x5a>
    378e:	69 5c       	subi	r22, 0xC9	; 201
    3790:	d8 01       	movw	r26, r16
    3792:	6c 93       	st	X, r22
    3794:	23 2b       	or	r18, r19
    3796:	24 2b       	or	r18, r20
    3798:	25 2b       	or	r18, r21
    379a:	69 f7       	brne	.-38     	; 0x3776 <_ZN5Print11printNumberEmh+0x40>
    379c:	b8 01       	movw	r22, r16
    379e:	c7 01       	movw	r24, r14
    37a0:	83 df       	rcall	.-250    	; 0x36a8 <_ZN5Print5writeEPKc>
    37a2:	a1 96       	adiw	r28, 0x21	; 33
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	ff 90       	pop	r15
    37b8:	ef 90       	pop	r14
    37ba:	bf 90       	pop	r11
    37bc:	af 90       	pop	r10
    37be:	9f 90       	pop	r9
    37c0:	8f 90       	pop	r8
    37c2:	08 95       	ret

000037c4 <_ZN5Print5printEmi>:
    37c4:	21 15       	cp	r18, r1
    37c6:	31 05       	cpc	r19, r1
    37c8:	41 f4       	brne	.+16     	; 0x37da <_ZN5Print5printEmi+0x16>
    37ca:	dc 01       	movw	r26, r24
    37cc:	ed 91       	ld	r30, X+
    37ce:	fc 91       	ld	r31, X
    37d0:	01 90       	ld	r0, Z+
    37d2:	f0 81       	ld	r31, Z
    37d4:	e0 2d       	mov	r30, r0
    37d6:	64 2f       	mov	r22, r20
    37d8:	19 94       	eijmp
    37da:	ad cf       	rjmp	.-166    	; 0x3736 <_ZN5Print11printNumberEmh>

000037dc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    37dc:	0f 93       	push	r16
    37de:	1f 93       	push	r17
    37e0:	cf 93       	push	r28
    37e2:	df 93       	push	r29
  size_t n = print(num, base);
    37e4:	ec 01       	movw	r28, r24
  n += println();
    37e6:	ee df       	rcall	.-36     	; 0x37c4 <_ZN5Print5printEmi>
    37e8:	8c 01       	movw	r16, r24
  return n;
}
    37ea:	ce 01       	movw	r24, r28
    37ec:	81 df       	rcall	.-254    	; 0x36f0 <_ZN5Print7printlnEv>
    37ee:	80 0f       	add	r24, r16
    37f0:	91 1f       	adc	r25, r17
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    37f8:	0f 91       	pop	r16
    37fa:	08 95       	ret

000037fc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	fc 01       	movw	r30, r24
    3800:	31 97       	sbiw	r30, 0x01	; 1
    3802:	e2 31       	cpi	r30, 0x12	; 18
    3804:	f1 05       	cpc	r31, r1
    3806:	08 f0       	brcs	.+2      	; 0x380a <turnOffPWM+0xe>
    3808:	4d c0       	rjmp	.+154    	; 0x38a4 <turnOffPWM+0xa8>
    380a:	88 27       	eor	r24, r24
    380c:	ee 58       	subi	r30, 0x8E	; 142
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	8f 4f       	sbci	r24, 0xFF	; 255
    3812:	47 c2       	rjmp	.+1166   	; 0x3ca2 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3814:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3818:	8f 77       	andi	r24, 0x7F	; 127
    381a:	03 c0       	rjmp	.+6      	; 0x3822 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    381c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3820:	8f 7d       	andi	r24, 0xDF	; 223
    3822:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3826:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3828:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    382c:	87 7f       	andi	r24, 0xF7	; 247
    382e:	f9 cf       	rjmp	.-14     	; 0x3822 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3830:	84 b5       	in	r24, 0x24	; 36
    3832:	8f 77       	andi	r24, 0x7F	; 127
    3834:	02 c0       	rjmp	.+4      	; 0x383a <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3836:	84 b5       	in	r24, 0x24	; 36
    3838:	8f 7d       	andi	r24, 0xDF	; 223
    383a:	84 bd       	out	0x24, r24	; 36
    383c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    383e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    3842:	8f 77       	andi	r24, 0x7F	; 127
    3844:	03 c0       	rjmp	.+6      	; 0x384c <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3846:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    384a:	8f 7d       	andi	r24, 0xDF	; 223
    384c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    3850:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3852:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    3856:	8f 77       	andi	r24, 0x7F	; 127
    3858:	07 c0       	rjmp	.+14     	; 0x3868 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    385a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    385e:	8f 7d       	andi	r24, 0xDF	; 223
    3860:	03 c0       	rjmp	.+6      	; 0x3868 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3862:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    3866:	87 7f       	andi	r24, 0xF7	; 247
    3868:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    386c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    386e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3872:	8f 77       	andi	r24, 0x7F	; 127
    3874:	07 c0       	rjmp	.+14     	; 0x3884 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3876:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    387a:	8f 7d       	andi	r24, 0xDF	; 223
    387c:	03 c0       	rjmp	.+6      	; 0x3884 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    387e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3882:	87 7f       	andi	r24, 0xF7	; 247
    3884:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3888:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    388a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    388e:	8f 77       	andi	r24, 0x7F	; 127
    3890:	07 c0       	rjmp	.+14     	; 0x38a0 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    3892:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3896:	8f 7d       	andi	r24, 0xDF	; 223
    3898:	03 c0       	rjmp	.+6      	; 0x38a0 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    389a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    389e:	87 7f       	andi	r24, 0xF7	; 247
    38a0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    38a4:	08 95       	ret

000038a6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	fc 01       	movw	r30, r24
    38ae:	e2 5a       	subi	r30, 0xA2	; 162
    38b0:	fe 4f       	sbci	r31, 0xFE	; 254
    38b2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    38b4:	fc 01       	movw	r30, r24
    38b6:	ec 55       	subi	r30, 0x5C	; 92
    38b8:	fe 4f       	sbci	r31, 0xFE	; 254
    38ba:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    38bc:	88 23       	and	r24, r24
    38be:	61 f1       	breq	.+88     	; 0x3918 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	88 0f       	add	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	fc 01       	movw	r30, r24
    38c8:	ec 5f       	subi	r30, 0xFC	; 252
    38ca:	fd 4f       	sbci	r31, 0xFD	; 253
    38cc:	c5 91       	lpm	r28, Z+
    38ce:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    38d0:	fc 01       	movw	r30, r24
    38d2:	e6 51       	subi	r30, 0x16	; 22
    38d4:	fe 4f       	sbci	r31, 0xFE	; 254
    38d6:	a5 91       	lpm	r26, Z+
    38d8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    38da:	61 11       	cpse	r22, r1
    38dc:	09 c0       	rjmp	.+18     	; 0x38f0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    38de:	9f b7       	in	r25, 0x3f	; 63
                cli();
    38e0:	f8 94       	cli
		*reg &= ~bit;
    38e2:	88 81       	ld	r24, Y
    38e4:	20 95       	com	r18
    38e6:	82 23       	and	r24, r18
    38e8:	88 83       	st	Y, r24
		*out &= ~bit;
    38ea:	ec 91       	ld	r30, X
    38ec:	2e 23       	and	r18, r30
    38ee:	0b c0       	rjmp	.+22     	; 0x3906 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    38f0:	62 30       	cpi	r22, 0x02	; 2
    38f2:	61 f4       	brne	.+24     	; 0x390c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    38f4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    38f6:	f8 94       	cli
		*reg &= ~bit;
    38f8:	88 81       	ld	r24, Y
    38fa:	32 2f       	mov	r19, r18
    38fc:	30 95       	com	r19
    38fe:	83 23       	and	r24, r19
    3900:	88 83       	st	Y, r24
		*out |= bit;
    3902:	ec 91       	ld	r30, X
    3904:	2e 2b       	or	r18, r30
    3906:	2c 93       	st	X, r18
		SREG = oldSREG;
    3908:	9f bf       	out	0x3f, r25	; 63
    390a:	06 c0       	rjmp	.+12     	; 0x3918 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    390c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    390e:	f8 94       	cli
		*reg |= bit;
    3910:	e8 81       	ld	r30, Y
    3912:	2e 2b       	or	r18, r30
    3914:	28 83       	st	Y, r18
		SREG = oldSREG;
    3916:	8f bf       	out	0x3f, r24	; 63
	}
}
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	08 95       	ret

0000391e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    391e:	1f 93       	push	r17
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3924:	28 2f       	mov	r18, r24
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	f9 01       	movw	r30, r18
    392a:	e8 5e       	subi	r30, 0xE8	; 232
    392c:	fe 4f       	sbci	r31, 0xFE	; 254
    392e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3930:	f9 01       	movw	r30, r18
    3932:	e2 5a       	subi	r30, 0xA2	; 162
    3934:	fe 4f       	sbci	r31, 0xFE	; 254
    3936:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3938:	f9 01       	movw	r30, r18
    393a:	ec 55       	subi	r30, 0x5C	; 92
    393c:	fe 4f       	sbci	r31, 0xFE	; 254
    393e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3940:	cc 23       	and	r28, r28
    3942:	b9 f0       	breq	.+46     	; 0x3972 <digitalWrite+0x54>
    3944:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3946:	81 11       	cpse	r24, r1

	out = portOutputRegister(port);
    3948:	59 df       	rcall	.-334    	; 0x37fc <turnOffPWM>
    394a:	ec 2f       	mov	r30, r28
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	ee 0f       	add	r30, r30
    3950:	ff 1f       	adc	r31, r31
    3952:	e6 51       	subi	r30, 0x16	; 22
    3954:	fe 4f       	sbci	r31, 0xFE	; 254
    3956:	a5 91       	lpm	r26, Z+

	uint8_t oldSREG = SREG;
    3958:	b4 91       	lpm	r27, Z
	cli();
    395a:	9f b7       	in	r25, 0x3f	; 63

	if (val == LOW) {
    395c:	f8 94       	cli
    395e:	11 11       	cpse	r17, r1
		*out &= ~bit;
    3960:	04 c0       	rjmp	.+8      	; 0x396a <digitalWrite+0x4c>
    3962:	8c 91       	ld	r24, X
    3964:	d0 95       	com	r29
    3966:	d8 23       	and	r29, r24
	} else {
		*out |= bit;
    3968:	02 c0       	rjmp	.+4      	; 0x396e <digitalWrite+0x50>
    396a:	ec 91       	ld	r30, X
    396c:	de 2b       	or	r29, r30
	}

	SREG = oldSREG;
    396e:	dc 93       	st	X, r29
}
    3970:	9f bf       	out	0x3f, r25	; 63
    3972:	df 91       	pop	r29
    3974:	cf 91       	pop	r28
    3976:	1f 91       	pop	r17
    3978:	08 95       	ret

0000397a <_ZN6StringD1Ev>:
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    397a:	fc 01       	movw	r30, r24
    397c:	80 81       	ld	r24, Z
    397e:	91 81       	ldd	r25, Z+1	; 0x01
    3980:	49 c2       	rjmp	.+1170   	; 0x3e14 <free>

00003982 <_ZN6String10invalidateEv>:
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	ec 01       	movw	r28, r24
    3988:	88 81       	ld	r24, Y
    398a:	99 81       	ldd	r25, Y+1	; 0x01
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	09 f0       	breq	.+2      	; 0x3992 <_ZN6String10invalidateEv+0x10>
    3990:	41 d2       	rcall	.+1154   	; 0x3e14 <free>
    3992:	19 82       	std	Y+1, r1	; 0x01
    3994:	18 82       	st	Y, r1
    3996:	1d 82       	std	Y+5, r1	; 0x05
    3998:	1c 82       	std	Y+4, r1	; 0x04
    399a:	1b 82       	std	Y+3, r1	; 0x03
    399c:	1a 82       	std	Y+2, r1	; 0x02
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	08 95       	ret

000039a4 <_ZN6String12changeBufferEj>:
    39a4:	0f 93       	push	r16
    39a6:	1f 93       	push	r17
    39a8:	cf 93       	push	r28
    39aa:	df 93       	push	r29
    39ac:	ec 01       	movw	r28, r24
    39ae:	8b 01       	movw	r16, r22
    39b0:	6f 5f       	subi	r22, 0xFF	; 255
    39b2:	7f 4f       	sbci	r23, 0xFF	; 255
    39b4:	88 81       	ld	r24, Y
    39b6:	99 81       	ldd	r25, Y+1	; 0x01
    39b8:	b6 d2       	rcall	.+1388   	; 0x3f26 <realloc>
    39ba:	00 97       	sbiw	r24, 0x00	; 0
    39bc:	31 f0       	breq	.+12     	; 0x39ca <_ZN6String12changeBufferEj+0x26>
    39be:	99 83       	std	Y+1, r25	; 0x01
    39c0:	88 83       	st	Y, r24
    39c2:	1b 83       	std	Y+3, r17	; 0x03
    39c4:	0a 83       	std	Y+2, r16	; 0x02
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <_ZN6String12changeBufferEj+0x28>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	08 95       	ret

000039d6 <_ZN6String7reserveEj>:
    39d6:	cf 93       	push	r28
    39d8:	df 93       	push	r29
    39da:	ec 01       	movw	r28, r24
    39dc:	88 81       	ld	r24, Y
    39de:	99 81       	ldd	r25, Y+1	; 0x01
    39e0:	89 2b       	or	r24, r25
    39e2:	29 f0       	breq	.+10     	; 0x39ee <_ZN6String7reserveEj+0x18>
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	9b 81       	ldd	r25, Y+3	; 0x03
    39e8:	86 17       	cp	r24, r22
    39ea:	97 07       	cpc	r25, r23
    39ec:	58 f4       	brcc	.+22     	; 0x3a04 <_ZN6String7reserveEj+0x2e>
    39ee:	ce 01       	movw	r24, r28
    39f0:	d9 df       	rcall	.-78     	; 0x39a4 <_ZN6String12changeBufferEj>
    39f2:	88 23       	and	r24, r24
    39f4:	41 f0       	breq	.+16     	; 0x3a06 <_ZN6String7reserveEj+0x30>
    39f6:	8c 81       	ldd	r24, Y+4	; 0x04
    39f8:	9d 81       	ldd	r25, Y+5	; 0x05
    39fa:	89 2b       	or	r24, r25
    39fc:	19 f4       	brne	.+6      	; 0x3a04 <_ZN6String7reserveEj+0x2e>
    39fe:	e8 81       	ld	r30, Y
    3a00:	f9 81       	ldd	r31, Y+1	; 0x01
    3a02:	10 82       	st	Z, r1
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	08 95       	ret

00003a0c <_ZN6String4copyEPKcj>:
    3a0c:	ef 92       	push	r14
    3a0e:	ff 92       	push	r15
    3a10:	0f 93       	push	r16
    3a12:	1f 93       	push	r17
    3a14:	cf 93       	push	r28
    3a16:	df 93       	push	r29
    3a18:	ec 01       	movw	r28, r24
    3a1a:	7b 01       	movw	r14, r22
    3a1c:	8a 01       	movw	r16, r20
    3a1e:	ba 01       	movw	r22, r20
    3a20:	da df       	rcall	.-76     	; 0x39d6 <_ZN6String7reserveEj>
    3a22:	81 11       	cpse	r24, r1
    3a24:	03 c0       	rjmp	.+6      	; 0x3a2c <_ZN6String4copyEPKcj+0x20>
    3a26:	ce 01       	movw	r24, r28
    3a28:	ac df       	rcall	.-168    	; 0x3982 <_ZN6String10invalidateEv>
    3a2a:	06 c0       	rjmp	.+12     	; 0x3a38 <_ZN6String4copyEPKcj+0x2c>
    3a2c:	1d 83       	std	Y+5, r17	; 0x05
    3a2e:	0c 83       	std	Y+4, r16	; 0x04
    3a30:	b7 01       	movw	r22, r14
    3a32:	88 81       	ld	r24, Y
    3a34:	99 81       	ldd	r25, Y+1	; 0x01
    3a36:	78 d3       	rcall	.+1776   	; 0x4128 <strcpy>
    3a38:	ce 01       	movw	r24, r28
    3a3a:	df 91       	pop	r29
    3a3c:	cf 91       	pop	r28
    3a3e:	1f 91       	pop	r17
    3a40:	0f 91       	pop	r16
    3a42:	ff 90       	pop	r15
    3a44:	ef 90       	pop	r14
    3a46:	08 95       	ret

00003a48 <_ZN6StringC1EPKc>:
    3a48:	fc 01       	movw	r30, r24
    3a4a:	11 82       	std	Z+1, r1	; 0x01
    3a4c:	10 82       	st	Z, r1
    3a4e:	13 82       	std	Z+3, r1	; 0x03
    3a50:	12 82       	std	Z+2, r1	; 0x02
    3a52:	15 82       	std	Z+5, r1	; 0x05
    3a54:	14 82       	std	Z+4, r1	; 0x04
    3a56:	61 15       	cp	r22, r1
    3a58:	71 05       	cpc	r23, r1
    3a5a:	49 f0       	breq	.+18     	; 0x3a6e <_ZN6StringC1EPKc+0x26>
    3a5c:	fb 01       	movw	r30, r22
    3a5e:	01 90       	ld	r0, Z+
    3a60:	00 20       	and	r0, r0
    3a62:	e9 f7       	brne	.-6      	; 0x3a5e <_ZN6StringC1EPKc+0x16>
    3a64:	31 97       	sbiw	r30, 0x01	; 1
    3a66:	af 01       	movw	r20, r30
    3a68:	46 1b       	sub	r20, r22
    3a6a:	57 0b       	sbc	r21, r23
    3a6c:	cf cf       	rjmp	.-98     	; 0x3a0c <_ZN6String4copyEPKcj>
    3a6e:	08 95       	ret

00003a70 <_ZN6StringaSERKS_>:
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	ec 01       	movw	r28, r24
    3a76:	fb 01       	movw	r30, r22
    3a78:	86 17       	cp	r24, r22
    3a7a:	97 07       	cpc	r25, r23
    3a7c:	51 f0       	breq	.+20     	; 0x3a92 <_ZN6StringaSERKS_+0x22>
    3a7e:	60 81       	ld	r22, Z
    3a80:	71 81       	ldd	r23, Z+1	; 0x01
    3a82:	61 15       	cp	r22, r1
    3a84:	71 05       	cpc	r23, r1
    3a86:	21 f0       	breq	.+8      	; 0x3a90 <_ZN6StringaSERKS_+0x20>
    3a88:	44 81       	ldd	r20, Z+4	; 0x04
    3a8a:	55 81       	ldd	r21, Z+5	; 0x05
    3a8c:	bf df       	rcall	.-130    	; 0x3a0c <_ZN6String4copyEPKcj>
    3a8e:	01 c0       	rjmp	.+2      	; 0x3a92 <_ZN6StringaSERKS_+0x22>
    3a90:	78 df       	rcall	.-272    	; 0x3982 <_ZN6String10invalidateEv>
    3a92:	ce 01       	movw	r24, r28
    3a94:	df 91       	pop	r29
    3a96:	cf 91       	pop	r28
    3a98:	08 95       	ret

00003a9a <_ZN6StringaSEPKc>:
    3a9a:	cf 93       	push	r28
    3a9c:	df 93       	push	r29
    3a9e:	ec 01       	movw	r28, r24
    3aa0:	61 15       	cp	r22, r1
    3aa2:	71 05       	cpc	r23, r1
    3aa4:	51 f0       	breq	.+20     	; 0x3aba <_ZN6StringaSEPKc+0x20>
    3aa6:	fb 01       	movw	r30, r22
    3aa8:	01 90       	ld	r0, Z+
    3aaa:	00 20       	and	r0, r0
    3aac:	e9 f7       	brne	.-6      	; 0x3aa8 <_ZN6StringaSEPKc+0xe>
    3aae:	31 97       	sbiw	r30, 0x01	; 1
    3ab0:	af 01       	movw	r20, r30
    3ab2:	46 1b       	sub	r20, r22
    3ab4:	57 0b       	sbc	r21, r23
    3ab6:	aa df       	rcall	.-172    	; 0x3a0c <_ZN6String4copyEPKcj>
    3ab8:	01 c0       	rjmp	.+2      	; 0x3abc <_ZN6StringaSEPKc+0x22>
    3aba:	63 df       	rcall	.-314    	; 0x3982 <_ZN6String10invalidateEv>
    3abc:	ce 01       	movw	r24, r28
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	08 95       	ret

00003ac4 <_ZN6StringC1Emh>:
    3ac4:	0f 93       	push	r16
    3ac6:	1f 93       	push	r17
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
    3ad0:	a1 97       	sbiw	r28, 0x21	; 33
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	f8 94       	cli
    3ad6:	de bf       	out	0x3e, r29	; 62
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	cd bf       	out	0x3d, r28	; 61
    3adc:	8c 01       	movw	r16, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	ba 01       	movw	r22, r20
    3ae2:	f8 01       	movw	r30, r16
    3ae4:	11 82       	std	Z+1, r1	; 0x01
    3ae6:	10 82       	st	Z, r1
    3ae8:	13 82       	std	Z+3, r1	; 0x03
    3aea:	12 82       	std	Z+2, r1	; 0x02
    3aec:	15 82       	std	Z+5, r1	; 0x05
    3aee:	14 82       	std	Z+4, r1	; 0x04
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	ae 01       	movw	r20, r28
    3af4:	4f 5f       	subi	r20, 0xFF	; 255
    3af6:	5f 4f       	sbci	r21, 0xFF	; 255
    3af8:	47 d3       	rcall	.+1678   	; 0x4188 <ultoa>
    3afa:	be 01       	movw	r22, r28
    3afc:	6f 5f       	subi	r22, 0xFF	; 255
    3afe:	7f 4f       	sbci	r23, 0xFF	; 255
    3b00:	c8 01       	movw	r24, r16
    3b02:	cb df       	rcall	.-106    	; 0x3a9a <_ZN6StringaSEPKc>
    3b04:	a1 96       	adiw	r28, 0x21	; 33
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	08 95       	ret

00003b1a <_ZN6String6concatEPKcj>:
    3b1a:	ef 92       	push	r14
    3b1c:	ff 92       	push	r15
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	61 15       	cp	r22, r1
    3b28:	71 05       	cpc	r23, r1
    3b2a:	11 f4       	brne	.+4      	; 0x3b30 <_ZN6String6concatEPKcj+0x16>
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	1a c0       	rjmp	.+52     	; 0x3b64 <_ZN6String6concatEPKcj+0x4a>
    3b30:	41 15       	cp	r20, r1
    3b32:	51 05       	cpc	r21, r1
    3b34:	b1 f0       	breq	.+44     	; 0x3b62 <_ZN6String6concatEPKcj+0x48>
    3b36:	7b 01       	movw	r14, r22
    3b38:	ec 01       	movw	r28, r24
    3b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b3e:	8a 01       	movw	r16, r20
    3b40:	08 0f       	add	r16, r24
    3b42:	19 1f       	adc	r17, r25
    3b44:	b8 01       	movw	r22, r16
    3b46:	ce 01       	movw	r24, r28
    3b48:	46 df       	rcall	.-372    	; 0x39d6 <_ZN6String7reserveEj>
    3b4a:	88 23       	and	r24, r24
    3b4c:	79 f3       	breq	.-34     	; 0x3b2c <_ZN6String6concatEPKcj+0x12>
    3b4e:	28 81       	ld	r18, Y
    3b50:	39 81       	ldd	r19, Y+1	; 0x01
    3b52:	8c 81       	ldd	r24, Y+4	; 0x04
    3b54:	9d 81       	ldd	r25, Y+5	; 0x05
    3b56:	b7 01       	movw	r22, r14
    3b58:	82 0f       	add	r24, r18
    3b5a:	93 1f       	adc	r25, r19
    3b5c:	e5 d2       	rcall	.+1482   	; 0x4128 <strcpy>
    3b5e:	1d 83       	std	Y+5, r17	; 0x05
    3b60:	0c 83       	std	Y+4, r16	; 0x04
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	08 95       	ret

00003b72 <_ZN6String6concatEc>:
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	1f 92       	push	r1
    3b78:	1f 92       	push	r1
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62
    3b7e:	69 83       	std	Y+1, r22	; 0x01
    3b80:	1a 82       	std	Y+2, r1	; 0x02
    3b82:	41 e0       	ldi	r20, 0x01	; 1
    3b84:	50 e0       	ldi	r21, 0x00	; 0
    3b86:	be 01       	movw	r22, r28
    3b88:	6f 5f       	subi	r22, 0xFF	; 255
    3b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8c:	c6 df       	rcall	.-116    	; 0x3b1a <_ZN6String6concatEPKcj>
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	08 95       	ret

00003b98 <_ZplRK15StringSumHelperRK6String>:
    3b98:	cf 93       	push	r28
    3b9a:	df 93       	push	r29
    3b9c:	ec 01       	movw	r28, r24
    3b9e:	fb 01       	movw	r30, r22
    3ba0:	44 81       	ldd	r20, Z+4	; 0x04
    3ba2:	55 81       	ldd	r21, Z+5	; 0x05
    3ba4:	60 81       	ld	r22, Z
    3ba6:	71 81       	ldd	r23, Z+1	; 0x01
    3ba8:	b8 df       	rcall	.-144    	; 0x3b1a <_ZN6String6concatEPKcj>
    3baa:	81 11       	cpse	r24, r1
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <_ZplRK15StringSumHelperRK6String+0x1a>
    3bae:	ce 01       	movw	r24, r28
    3bb0:	e8 de       	rcall	.-560    	; 0x3982 <_ZN6String10invalidateEv>
    3bb2:	ce 01       	movw	r24, r28
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	08 95       	ret

00003bba <_ZplRK15StringSumHelperPKc>:
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	ec 01       	movw	r28, r24
    3bc0:	61 15       	cp	r22, r1
    3bc2:	71 05       	cpc	r23, r1
    3bc4:	59 f0       	breq	.+22     	; 0x3bdc <_ZplRK15StringSumHelperPKc+0x22>
    3bc6:	fb 01       	movw	r30, r22
    3bc8:	01 90       	ld	r0, Z+
    3bca:	00 20       	and	r0, r0
    3bcc:	e9 f7       	brne	.-6      	; 0x3bc8 <_ZplRK15StringSumHelperPKc+0xe>
    3bce:	31 97       	sbiw	r30, 0x01	; 1
    3bd0:	af 01       	movw	r20, r30
    3bd2:	46 1b       	sub	r20, r22
    3bd4:	57 0b       	sbc	r21, r23
    3bd6:	a1 df       	rcall	.-190    	; 0x3b1a <_ZN6String6concatEPKcj>
    3bd8:	81 11       	cpse	r24, r1
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <_ZplRK15StringSumHelperPKc+0x26>
    3bdc:	ce 01       	movw	r24, r28
    3bde:	d1 de       	rcall	.-606    	; 0x3982 <_ZN6String10invalidateEv>
    3be0:	ce 01       	movw	r24, r28
    3be2:	df 91       	pop	r29
    3be4:	cf 91       	pop	r28
    3be6:	08 95       	ret

00003be8 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
	if (fromIndex >= len) return -1;
    3bec:	fc 01       	movw	r30, r24
    3bee:	24 81       	ldd	r18, Z+4	; 0x04
    3bf0:	35 81       	ldd	r19, Z+5	; 0x05
    3bf2:	42 17       	cp	r20, r18
    3bf4:	53 07       	cpc	r21, r19
    3bf6:	60 f4       	brcc	.+24     	; 0x3c10 <_ZNK6String7indexOfEcj+0x28>
	const char* temp = strchr(buffer + fromIndex, ch);
    3bf8:	c0 81       	ld	r28, Z
    3bfa:	d1 81       	ldd	r29, Z+1	; 0x01
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	ce 01       	movw	r24, r28
    3c00:	84 0f       	add	r24, r20
    3c02:	95 1f       	adc	r25, r21
    3c04:	86 d2       	rcall	.+1292   	; 0x4112 <strchr>
	if (temp == NULL) return -1;
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	19 f0       	breq	.+6      	; 0x3c10 <_ZNK6String7indexOfEcj+0x28>
	return temp - buffer;
    3c0a:	8c 1b       	sub	r24, r28
    3c0c:	9d 0b       	sbc	r25, r29
    3c0e:	02 c0       	rjmp	.+4      	; 0x3c14 <_ZNK6String7indexOfEcj+0x2c>
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    3c10:	8f ef       	ldi	r24, 0xFF	; 255
    3c12:	9f ef       	ldi	r25, 0xFF	; 255
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
    3c14:	df 91       	pop	r29
    3c16:	cf 91       	pop	r28
    3c18:	08 95       	ret

00003c1a <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    3c1a:	40 e0       	ldi	r20, 0x00	; 0
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	e4 cf       	rjmp	.-56     	; 0x3be8 <_ZNK6String7indexOfEcj>

00003c20 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    3c20:	cf 93       	push	r28
    3c22:	df 93       	push	r29
	if (fromIndex >= len) return -1;
    3c24:	fc 01       	movw	r30, r24
    3c26:	24 81       	ldd	r18, Z+4	; 0x04
    3c28:	35 81       	ldd	r19, Z+5	; 0x05
    3c2a:	42 17       	cp	r20, r18
    3c2c:	53 07       	cpc	r21, r19
    3c2e:	78 f4       	brcc	.+30     	; 0x3c4e <_ZNK6String7indexOfERKS_j+0x2e>
    3c30:	fb 01       	movw	r30, r22
    3c32:	dc 01       	movw	r26, r24
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    3c34:	cd 91       	ld	r28, X+
    3c36:	dc 91       	ld	r29, X
    3c38:	60 81       	ld	r22, Z
    3c3a:	71 81       	ldd	r23, Z+1	; 0x01
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	84 0f       	add	r24, r20
    3c40:	95 1f       	adc	r25, r21
    3c42:	88 d2       	rcall	.+1296   	; 0x4154 <strstr>
	if (found == NULL) return -1;
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	19 f0       	breq	.+6      	; 0x3c4e <_ZNK6String7indexOfERKS_j+0x2e>
	return found - buffer;
    3c48:	8c 1b       	sub	r24, r28
    3c4a:	9d 0b       	sbc	r25, r29
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <_ZNK6String7indexOfERKS_j+0x32>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    3c4e:	8f ef       	ldi	r24, 0xFF	; 255
    3c50:	9f ef       	ldi	r25, 0xFF	; 255
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	08 95       	ret

00003c58 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    3c58:	40 e0       	ldi	r20, 0x00	; 0
    3c5a:	50 e0       	ldi	r21, 0x00	; 0
    3c5c:	e1 cf       	rjmp	.-62     	; 0x3c20 <_ZNK6String7indexOfERKS_j>

00003c5e <__udivmodsi4>:
    3c5e:	a1 e2       	ldi	r26, 0x21	; 33
    3c60:	1a 2e       	mov	r1, r26
    3c62:	aa 1b       	sub	r26, r26
    3c64:	bb 1b       	sub	r27, r27
    3c66:	fd 01       	movw	r30, r26
    3c68:	0d c0       	rjmp	.+26     	; 0x3c84 <__udivmodsi4_ep>

00003c6a <__udivmodsi4_loop>:
    3c6a:	aa 1f       	adc	r26, r26
    3c6c:	bb 1f       	adc	r27, r27
    3c6e:	ee 1f       	adc	r30, r30
    3c70:	ff 1f       	adc	r31, r31
    3c72:	a2 17       	cp	r26, r18
    3c74:	b3 07       	cpc	r27, r19
    3c76:	e4 07       	cpc	r30, r20
    3c78:	f5 07       	cpc	r31, r21
    3c7a:	20 f0       	brcs	.+8      	; 0x3c84 <__udivmodsi4_ep>
    3c7c:	a2 1b       	sub	r26, r18
    3c7e:	b3 0b       	sbc	r27, r19
    3c80:	e4 0b       	sbc	r30, r20
    3c82:	f5 0b       	sbc	r31, r21

00003c84 <__udivmodsi4_ep>:
    3c84:	66 1f       	adc	r22, r22
    3c86:	77 1f       	adc	r23, r23
    3c88:	88 1f       	adc	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	1a 94       	dec	r1
    3c8e:	69 f7       	brne	.-38     	; 0x3c6a <__udivmodsi4_loop>
    3c90:	60 95       	com	r22
    3c92:	70 95       	com	r23
    3c94:	80 95       	com	r24
    3c96:	90 95       	com	r25
    3c98:	9b 01       	movw	r18, r22
    3c9a:	ac 01       	movw	r20, r24
    3c9c:	bd 01       	movw	r22, r26
    3c9e:	cf 01       	movw	r24, r30
    3ca0:	08 95       	ret

00003ca2 <__tablejump2__>:
    3ca2:	ee 0f       	add	r30, r30
    3ca4:	ff 1f       	adc	r31, r31
    3ca6:	88 1f       	adc	r24, r24
    3ca8:	8b bf       	out	0x3b, r24	; 59
    3caa:	07 90       	elpm	r0, Z+
    3cac:	f6 91       	elpm	r31, Z
    3cae:	e0 2d       	mov	r30, r0
    3cb0:	19 94       	eijmp

00003cb2 <__muluhisi3>:
    3cb2:	09 d0       	rcall	.+18     	; 0x3cc6 <__umulhisi3>
    3cb4:	a5 9f       	mul	r26, r21
    3cb6:	90 0d       	add	r25, r0
    3cb8:	b4 9f       	mul	r27, r20
    3cba:	90 0d       	add	r25, r0
    3cbc:	a4 9f       	mul	r26, r20
    3cbe:	80 0d       	add	r24, r0
    3cc0:	91 1d       	adc	r25, r1
    3cc2:	11 24       	eor	r1, r1
    3cc4:	08 95       	ret

00003cc6 <__umulhisi3>:
    3cc6:	a2 9f       	mul	r26, r18
    3cc8:	b0 01       	movw	r22, r0
    3cca:	b3 9f       	mul	r27, r19
    3ccc:	c0 01       	movw	r24, r0
    3cce:	a3 9f       	mul	r26, r19
    3cd0:	70 0d       	add	r23, r0
    3cd2:	81 1d       	adc	r24, r1
    3cd4:	11 24       	eor	r1, r1
    3cd6:	91 1d       	adc	r25, r1
    3cd8:	b2 9f       	mul	r27, r18
    3cda:	70 0d       	add	r23, r0
    3cdc:	81 1d       	adc	r24, r1
    3cde:	11 24       	eor	r1, r1
    3ce0:	91 1d       	adc	r25, r1
    3ce2:	08 95       	ret

00003ce4 <malloc>:
    3ce4:	0f 93       	push	r16
    3ce6:	1f 93       	push	r17
    3ce8:	cf 93       	push	r28
    3cea:	df 93       	push	r29
    3cec:	82 30       	cpi	r24, 0x02	; 2
    3cee:	91 05       	cpc	r25, r1
    3cf0:	10 f4       	brcc	.+4      	; 0x3cf6 <malloc+0x12>
    3cf2:	82 e0       	ldi	r24, 0x02	; 2
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	e0 91 0c 07 	lds	r30, 0x070C	; 0x80070c <__flp>
    3cfa:	f0 91 0d 07 	lds	r31, 0x070D	; 0x80070d <__flp+0x1>
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	a0 e0       	ldi	r26, 0x00	; 0
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	30 97       	sbiw	r30, 0x00	; 0
    3d08:	19 f1       	breq	.+70     	; 0x3d50 <malloc+0x6c>
    3d0a:	40 81       	ld	r20, Z
    3d0c:	51 81       	ldd	r21, Z+1	; 0x01
    3d0e:	02 81       	ldd	r16, Z+2	; 0x02
    3d10:	13 81       	ldd	r17, Z+3	; 0x03
    3d12:	48 17       	cp	r20, r24
    3d14:	59 07       	cpc	r21, r25
    3d16:	c8 f0       	brcs	.+50     	; 0x3d4a <malloc+0x66>
    3d18:	84 17       	cp	r24, r20
    3d1a:	95 07       	cpc	r25, r21
    3d1c:	69 f4       	brne	.+26     	; 0x3d38 <malloc+0x54>
    3d1e:	10 97       	sbiw	r26, 0x00	; 0
    3d20:	31 f0       	breq	.+12     	; 0x3d2e <malloc+0x4a>
    3d22:	12 96       	adiw	r26, 0x02	; 2
    3d24:	0c 93       	st	X, r16
    3d26:	12 97       	sbiw	r26, 0x02	; 2
    3d28:	13 96       	adiw	r26, 0x03	; 3
    3d2a:	1c 93       	st	X, r17
    3d2c:	27 c0       	rjmp	.+78     	; 0x3d7c <malloc+0x98>
    3d2e:	00 93 0c 07 	sts	0x070C, r16	; 0x80070c <__flp>
    3d32:	10 93 0d 07 	sts	0x070D, r17	; 0x80070d <__flp+0x1>
    3d36:	22 c0       	rjmp	.+68     	; 0x3d7c <malloc+0x98>
    3d38:	21 15       	cp	r18, r1
    3d3a:	31 05       	cpc	r19, r1
    3d3c:	19 f0       	breq	.+6      	; 0x3d44 <malloc+0x60>
    3d3e:	42 17       	cp	r20, r18
    3d40:	53 07       	cpc	r21, r19
    3d42:	18 f4       	brcc	.+6      	; 0x3d4a <malloc+0x66>
    3d44:	9a 01       	movw	r18, r20
    3d46:	bd 01       	movw	r22, r26
    3d48:	ef 01       	movw	r28, r30
    3d4a:	df 01       	movw	r26, r30
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	db cf       	rjmp	.-74     	; 0x3d06 <malloc+0x22>
    3d50:	21 15       	cp	r18, r1
    3d52:	31 05       	cpc	r19, r1
    3d54:	f9 f0       	breq	.+62     	; 0x3d94 <malloc+0xb0>
    3d56:	28 1b       	sub	r18, r24
    3d58:	39 0b       	sbc	r19, r25
    3d5a:	24 30       	cpi	r18, 0x04	; 4
    3d5c:	31 05       	cpc	r19, r1
    3d5e:	80 f4       	brcc	.+32     	; 0x3d80 <malloc+0x9c>
    3d60:	8a 81       	ldd	r24, Y+2	; 0x02
    3d62:	9b 81       	ldd	r25, Y+3	; 0x03
    3d64:	61 15       	cp	r22, r1
    3d66:	71 05       	cpc	r23, r1
    3d68:	21 f0       	breq	.+8      	; 0x3d72 <malloc+0x8e>
    3d6a:	fb 01       	movw	r30, r22
    3d6c:	93 83       	std	Z+3, r25	; 0x03
    3d6e:	82 83       	std	Z+2, r24	; 0x02
    3d70:	04 c0       	rjmp	.+8      	; 0x3d7a <malloc+0x96>
    3d72:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <__flp+0x1>
    3d76:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <__flp>
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	32 96       	adiw	r30, 0x02	; 2
    3d7e:	44 c0       	rjmp	.+136    	; 0x3e08 <malloc+0x124>
    3d80:	fe 01       	movw	r30, r28
    3d82:	e2 0f       	add	r30, r18
    3d84:	f3 1f       	adc	r31, r19
    3d86:	81 93       	st	Z+, r24
    3d88:	91 93       	st	Z+, r25
    3d8a:	22 50       	subi	r18, 0x02	; 2
    3d8c:	31 09       	sbc	r19, r1
    3d8e:	39 83       	std	Y+1, r19	; 0x01
    3d90:	28 83       	st	Y, r18
    3d92:	3a c0       	rjmp	.+116    	; 0x3e08 <malloc+0x124>
    3d94:	20 91 0a 07 	lds	r18, 0x070A	; 0x80070a <__brkval>
    3d98:	30 91 0b 07 	lds	r19, 0x070B	; 0x80070b <__brkval+0x1>
    3d9c:	23 2b       	or	r18, r19
    3d9e:	41 f4       	brne	.+16     	; 0x3db0 <malloc+0xcc>
    3da0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3da4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3da8:	30 93 0b 07 	sts	0x070B, r19	; 0x80070b <__brkval+0x1>
    3dac:	20 93 0a 07 	sts	0x070A, r18	; 0x80070a <__brkval>
    3db0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    3db4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3db8:	21 15       	cp	r18, r1
    3dba:	31 05       	cpc	r19, r1
    3dbc:	41 f4       	brne	.+16     	; 0x3dce <malloc+0xea>
    3dbe:	2d b7       	in	r18, 0x3d	; 61
    3dc0:	3e b7       	in	r19, 0x3e	; 62
    3dc2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3dc6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3dca:	24 1b       	sub	r18, r20
    3dcc:	35 0b       	sbc	r19, r21
    3dce:	e0 91 0a 07 	lds	r30, 0x070A	; 0x80070a <__brkval>
    3dd2:	f0 91 0b 07 	lds	r31, 0x070B	; 0x80070b <__brkval+0x1>
    3dd6:	e2 17       	cp	r30, r18
    3dd8:	f3 07       	cpc	r31, r19
    3dda:	a0 f4       	brcc	.+40     	; 0x3e04 <malloc+0x120>
    3ddc:	2e 1b       	sub	r18, r30
    3dde:	3f 0b       	sbc	r19, r31
    3de0:	28 17       	cp	r18, r24
    3de2:	39 07       	cpc	r19, r25
    3de4:	78 f0       	brcs	.+30     	; 0x3e04 <malloc+0x120>
    3de6:	ac 01       	movw	r20, r24
    3de8:	4e 5f       	subi	r20, 0xFE	; 254
    3dea:	5f 4f       	sbci	r21, 0xFF	; 255
    3dec:	24 17       	cp	r18, r20
    3dee:	35 07       	cpc	r19, r21
    3df0:	48 f0       	brcs	.+18     	; 0x3e04 <malloc+0x120>
    3df2:	4e 0f       	add	r20, r30
    3df4:	5f 1f       	adc	r21, r31
    3df6:	50 93 0b 07 	sts	0x070B, r21	; 0x80070b <__brkval+0x1>
    3dfa:	40 93 0a 07 	sts	0x070A, r20	; 0x80070a <__brkval>
    3dfe:	81 93       	st	Z+, r24
    3e00:	91 93       	st	Z+, r25
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <malloc+0x124>
    3e04:	e0 e0       	ldi	r30, 0x00	; 0
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	cf 01       	movw	r24, r30
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	08 95       	ret

00003e14 <free>:
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	00 97       	sbiw	r24, 0x00	; 0
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <free+0xa>
    3e1c:	81 c0       	rjmp	.+258    	; 0x3f20 <free+0x10c>
    3e1e:	fc 01       	movw	r30, r24
    3e20:	32 97       	sbiw	r30, 0x02	; 2
    3e22:	13 82       	std	Z+3, r1	; 0x03
    3e24:	12 82       	std	Z+2, r1	; 0x02
    3e26:	a0 91 0c 07 	lds	r26, 0x070C	; 0x80070c <__flp>
    3e2a:	b0 91 0d 07 	lds	r27, 0x070D	; 0x80070d <__flp+0x1>
    3e2e:	10 97       	sbiw	r26, 0x00	; 0
    3e30:	81 f4       	brne	.+32     	; 0x3e52 <free+0x3e>
    3e32:	20 81       	ld	r18, Z
    3e34:	31 81       	ldd	r19, Z+1	; 0x01
    3e36:	82 0f       	add	r24, r18
    3e38:	93 1f       	adc	r25, r19
    3e3a:	20 91 0a 07 	lds	r18, 0x070A	; 0x80070a <__brkval>
    3e3e:	30 91 0b 07 	lds	r19, 0x070B	; 0x80070b <__brkval+0x1>
    3e42:	28 17       	cp	r18, r24
    3e44:	39 07       	cpc	r19, r25
    3e46:	51 f5       	brne	.+84     	; 0x3e9c <free+0x88>
    3e48:	f0 93 0b 07 	sts	0x070B, r31	; 0x80070b <__brkval+0x1>
    3e4c:	e0 93 0a 07 	sts	0x070A, r30	; 0x80070a <__brkval>
    3e50:	67 c0       	rjmp	.+206    	; 0x3f20 <free+0x10c>
    3e52:	ed 01       	movw	r28, r26
    3e54:	20 e0       	ldi	r18, 0x00	; 0
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	ce 17       	cp	r28, r30
    3e5a:	df 07       	cpc	r29, r31
    3e5c:	40 f4       	brcc	.+16     	; 0x3e6e <free+0x5a>
    3e5e:	4a 81       	ldd	r20, Y+2	; 0x02
    3e60:	5b 81       	ldd	r21, Y+3	; 0x03
    3e62:	9e 01       	movw	r18, r28
    3e64:	41 15       	cp	r20, r1
    3e66:	51 05       	cpc	r21, r1
    3e68:	f1 f0       	breq	.+60     	; 0x3ea6 <free+0x92>
    3e6a:	ea 01       	movw	r28, r20
    3e6c:	f5 cf       	rjmp	.-22     	; 0x3e58 <free+0x44>
    3e6e:	d3 83       	std	Z+3, r29	; 0x03
    3e70:	c2 83       	std	Z+2, r28	; 0x02
    3e72:	40 81       	ld	r20, Z
    3e74:	51 81       	ldd	r21, Z+1	; 0x01
    3e76:	84 0f       	add	r24, r20
    3e78:	95 1f       	adc	r25, r21
    3e7a:	c8 17       	cp	r28, r24
    3e7c:	d9 07       	cpc	r29, r25
    3e7e:	59 f4       	brne	.+22     	; 0x3e96 <free+0x82>
    3e80:	88 81       	ld	r24, Y
    3e82:	99 81       	ldd	r25, Y+1	; 0x01
    3e84:	84 0f       	add	r24, r20
    3e86:	95 1f       	adc	r25, r21
    3e88:	02 96       	adiw	r24, 0x02	; 2
    3e8a:	91 83       	std	Z+1, r25	; 0x01
    3e8c:	80 83       	st	Z, r24
    3e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e90:	9b 81       	ldd	r25, Y+3	; 0x03
    3e92:	93 83       	std	Z+3, r25	; 0x03
    3e94:	82 83       	std	Z+2, r24	; 0x02
    3e96:	21 15       	cp	r18, r1
    3e98:	31 05       	cpc	r19, r1
    3e9a:	29 f4       	brne	.+10     	; 0x3ea6 <free+0x92>
    3e9c:	f0 93 0d 07 	sts	0x070D, r31	; 0x80070d <__flp+0x1>
    3ea0:	e0 93 0c 07 	sts	0x070C, r30	; 0x80070c <__flp>
    3ea4:	3d c0       	rjmp	.+122    	; 0x3f20 <free+0x10c>
    3ea6:	e9 01       	movw	r28, r18
    3ea8:	fb 83       	std	Y+3, r31	; 0x03
    3eaa:	ea 83       	std	Y+2, r30	; 0x02
    3eac:	49 91       	ld	r20, Y+
    3eae:	59 91       	ld	r21, Y+
    3eb0:	c4 0f       	add	r28, r20
    3eb2:	d5 1f       	adc	r29, r21
    3eb4:	ec 17       	cp	r30, r28
    3eb6:	fd 07       	cpc	r31, r29
    3eb8:	61 f4       	brne	.+24     	; 0x3ed2 <free+0xbe>
    3eba:	80 81       	ld	r24, Z
    3ebc:	91 81       	ldd	r25, Z+1	; 0x01
    3ebe:	84 0f       	add	r24, r20
    3ec0:	95 1f       	adc	r25, r21
    3ec2:	02 96       	adiw	r24, 0x02	; 2
    3ec4:	e9 01       	movw	r28, r18
    3ec6:	99 83       	std	Y+1, r25	; 0x01
    3ec8:	88 83       	st	Y, r24
    3eca:	82 81       	ldd	r24, Z+2	; 0x02
    3ecc:	93 81       	ldd	r25, Z+3	; 0x03
    3ece:	9b 83       	std	Y+3, r25	; 0x03
    3ed0:	8a 83       	std	Y+2, r24	; 0x02
    3ed2:	e0 e0       	ldi	r30, 0x00	; 0
    3ed4:	f0 e0       	ldi	r31, 0x00	; 0
    3ed6:	12 96       	adiw	r26, 0x02	; 2
    3ed8:	8d 91       	ld	r24, X+
    3eda:	9c 91       	ld	r25, X
    3edc:	13 97       	sbiw	r26, 0x03	; 3
    3ede:	00 97       	sbiw	r24, 0x00	; 0
    3ee0:	19 f0       	breq	.+6      	; 0x3ee8 <free+0xd4>
    3ee2:	fd 01       	movw	r30, r26
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	f7 cf       	rjmp	.-18     	; 0x3ed6 <free+0xc2>
    3ee8:	8d 91       	ld	r24, X+
    3eea:	9c 91       	ld	r25, X
    3eec:	11 97       	sbiw	r26, 0x01	; 1
    3eee:	9d 01       	movw	r18, r26
    3ef0:	2e 5f       	subi	r18, 0xFE	; 254
    3ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef4:	82 0f       	add	r24, r18
    3ef6:	93 1f       	adc	r25, r19
    3ef8:	20 91 0a 07 	lds	r18, 0x070A	; 0x80070a <__brkval>
    3efc:	30 91 0b 07 	lds	r19, 0x070B	; 0x80070b <__brkval+0x1>
    3f00:	28 17       	cp	r18, r24
    3f02:	39 07       	cpc	r19, r25
    3f04:	69 f4       	brne	.+26     	; 0x3f20 <free+0x10c>
    3f06:	30 97       	sbiw	r30, 0x00	; 0
    3f08:	29 f4       	brne	.+10     	; 0x3f14 <free+0x100>
    3f0a:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <__flp+0x1>
    3f0e:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <__flp>
    3f12:	02 c0       	rjmp	.+4      	; 0x3f18 <free+0x104>
    3f14:	13 82       	std	Z+3, r1	; 0x03
    3f16:	12 82       	std	Z+2, r1	; 0x02
    3f18:	b0 93 0b 07 	sts	0x070B, r27	; 0x80070b <__brkval+0x1>
    3f1c:	a0 93 0a 07 	sts	0x070A, r26	; 0x80070a <__brkval>
    3f20:	df 91       	pop	r29
    3f22:	cf 91       	pop	r28
    3f24:	08 95       	ret

00003f26 <realloc>:
    3f26:	6f 92       	push	r6
    3f28:	7f 92       	push	r7
    3f2a:	8f 92       	push	r8
    3f2c:	9f 92       	push	r9
    3f2e:	af 92       	push	r10
    3f30:	bf 92       	push	r11
    3f32:	cf 92       	push	r12
    3f34:	df 92       	push	r13
    3f36:	ef 92       	push	r14
    3f38:	ff 92       	push	r15
    3f3a:	0f 93       	push	r16
    3f3c:	1f 93       	push	r17
    3f3e:	cf 93       	push	r28
    3f40:	df 93       	push	r29
    3f42:	00 97       	sbiw	r24, 0x00	; 0
    3f44:	81 f4       	brne	.+32     	; 0x3f66 <realloc+0x40>
    3f46:	cb 01       	movw	r24, r22
    3f48:	df 91       	pop	r29
    3f4a:	cf 91       	pop	r28
    3f4c:	1f 91       	pop	r17
    3f4e:	0f 91       	pop	r16
    3f50:	ff 90       	pop	r15
    3f52:	ef 90       	pop	r14
    3f54:	df 90       	pop	r13
    3f56:	cf 90       	pop	r12
    3f58:	bf 90       	pop	r11
    3f5a:	af 90       	pop	r10
    3f5c:	9f 90       	pop	r9
    3f5e:	8f 90       	pop	r8
    3f60:	7f 90       	pop	r7
    3f62:	6f 90       	pop	r6
    3f64:	bf ce       	rjmp	.-642    	; 0x3ce4 <malloc>
    3f66:	fc 01       	movw	r30, r24
    3f68:	e6 0f       	add	r30, r22
    3f6a:	f7 1f       	adc	r31, r23
    3f6c:	9c 01       	movw	r18, r24
    3f6e:	22 50       	subi	r18, 0x02	; 2
    3f70:	31 09       	sbc	r19, r1
    3f72:	e2 17       	cp	r30, r18
    3f74:	f3 07       	cpc	r31, r19
    3f76:	08 f4       	brcc	.+2      	; 0x3f7a <realloc+0x54>
    3f78:	a5 c0       	rjmp	.+330    	; 0x40c4 <realloc+0x19e>
    3f7a:	ec 01       	movw	r28, r24
    3f7c:	d9 01       	movw	r26, r18
    3f7e:	0d 91       	ld	r16, X+
    3f80:	1c 91       	ld	r17, X
    3f82:	11 97       	sbiw	r26, 0x01	; 1
    3f84:	06 17       	cp	r16, r22
    3f86:	17 07       	cpc	r17, r23
    3f88:	a8 f0       	brcs	.+42     	; 0x3fb4 <realloc+0x8e>
    3f8a:	05 30       	cpi	r16, 0x05	; 5
    3f8c:	11 05       	cpc	r17, r1
    3f8e:	08 f4       	brcc	.+2      	; 0x3f92 <realloc+0x6c>
    3f90:	97 c0       	rjmp	.+302    	; 0x40c0 <realloc+0x19a>
    3f92:	c8 01       	movw	r24, r16
    3f94:	04 97       	sbiw	r24, 0x04	; 4
    3f96:	86 17       	cp	r24, r22
    3f98:	97 07       	cpc	r25, r23
    3f9a:	08 f4       	brcc	.+2      	; 0x3f9e <realloc+0x78>
    3f9c:	91 c0       	rjmp	.+290    	; 0x40c0 <realloc+0x19a>
    3f9e:	02 50       	subi	r16, 0x02	; 2
    3fa0:	11 09       	sbc	r17, r1
    3fa2:	06 1b       	sub	r16, r22
    3fa4:	17 0b       	sbc	r17, r23
    3fa6:	01 93       	st	Z+, r16
    3fa8:	11 93       	st	Z+, r17
    3faa:	6d 93       	st	X+, r22
    3fac:	7c 93       	st	X, r23
    3fae:	cf 01       	movw	r24, r30
    3fb0:	31 df       	rcall	.-414    	; 0x3e14 <free>
    3fb2:	86 c0       	rjmp	.+268    	; 0x40c0 <realloc+0x19a>
    3fb4:	5b 01       	movw	r10, r22
    3fb6:	a0 1a       	sub	r10, r16
    3fb8:	b1 0a       	sbc	r11, r17
    3fba:	4c 01       	movw	r8, r24
    3fbc:	80 0e       	add	r8, r16
    3fbe:	91 1e       	adc	r9, r17
    3fc0:	a0 91 0c 07 	lds	r26, 0x070C	; 0x80070c <__flp>
    3fc4:	b0 91 0d 07 	lds	r27, 0x070D	; 0x80070d <__flp+0x1>
    3fc8:	61 2c       	mov	r6, r1
    3fca:	71 2c       	mov	r7, r1
    3fcc:	e1 2c       	mov	r14, r1
    3fce:	f1 2c       	mov	r15, r1
    3fd0:	10 97       	sbiw	r26, 0x00	; 0
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <realloc+0xb0>
    3fd4:	46 c0       	rjmp	.+140    	; 0x4062 <realloc+0x13c>
    3fd6:	8d 91       	ld	r24, X+
    3fd8:	9c 91       	ld	r25, X
    3fda:	11 97       	sbiw	r26, 0x01	; 1
    3fdc:	a8 15       	cp	r26, r8
    3fde:	b9 05       	cpc	r27, r9
    3fe0:	b1 f5       	brne	.+108    	; 0x404e <realloc+0x128>
    3fe2:	6c 01       	movw	r12, r24
    3fe4:	42 e0       	ldi	r20, 0x02	; 2
    3fe6:	c4 0e       	add	r12, r20
    3fe8:	d1 1c       	adc	r13, r1
    3fea:	ca 14       	cp	r12, r10
    3fec:	db 04       	cpc	r13, r11
    3fee:	78 f1       	brcs	.+94     	; 0x404e <realloc+0x128>
    3ff0:	4c 01       	movw	r8, r24
    3ff2:	8a 18       	sub	r8, r10
    3ff4:	9b 08       	sbc	r9, r11
    3ff6:	64 01       	movw	r12, r8
    3ff8:	42 e0       	ldi	r20, 0x02	; 2
    3ffa:	c4 0e       	add	r12, r20
    3ffc:	d1 1c       	adc	r13, r1
    3ffe:	12 96       	adiw	r26, 0x02	; 2
    4000:	bc 90       	ld	r11, X
    4002:	12 97       	sbiw	r26, 0x02	; 2
    4004:	13 96       	adiw	r26, 0x03	; 3
    4006:	ac 91       	ld	r26, X
    4008:	b5 e0       	ldi	r27, 0x05	; 5
    400a:	cb 16       	cp	r12, r27
    400c:	d1 04       	cpc	r13, r1
    400e:	40 f0       	brcs	.+16     	; 0x4020 <realloc+0xfa>
    4010:	b2 82       	std	Z+2, r11	; 0x02
    4012:	a3 83       	std	Z+3, r26	; 0x03
    4014:	91 82       	std	Z+1, r9	; 0x01
    4016:	80 82       	st	Z, r8
    4018:	d9 01       	movw	r26, r18
    401a:	6d 93       	st	X+, r22
    401c:	7c 93       	st	X, r23
    401e:	09 c0       	rjmp	.+18     	; 0x4032 <realloc+0x10c>
    4020:	0e 5f       	subi	r16, 0xFE	; 254
    4022:	1f 4f       	sbci	r17, 0xFF	; 255
    4024:	80 0f       	add	r24, r16
    4026:	91 1f       	adc	r25, r17
    4028:	f9 01       	movw	r30, r18
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
    402e:	eb 2d       	mov	r30, r11
    4030:	fa 2f       	mov	r31, r26
    4032:	e1 14       	cp	r14, r1
    4034:	f1 04       	cpc	r15, r1
    4036:	31 f0       	breq	.+12     	; 0x4044 <realloc+0x11e>
    4038:	d7 01       	movw	r26, r14
    403a:	13 96       	adiw	r26, 0x03	; 3
    403c:	fc 93       	st	X, r31
    403e:	ee 93       	st	-X, r30
    4040:	12 97       	sbiw	r26, 0x02	; 2
    4042:	3e c0       	rjmp	.+124    	; 0x40c0 <realloc+0x19a>
    4044:	f0 93 0d 07 	sts	0x070D, r31	; 0x80070d <__flp+0x1>
    4048:	e0 93 0c 07 	sts	0x070C, r30	; 0x80070c <__flp>
    404c:	39 c0       	rjmp	.+114    	; 0x40c0 <realloc+0x19a>
    404e:	68 16       	cp	r6, r24
    4050:	79 06       	cpc	r7, r25
    4052:	08 f4       	brcc	.+2      	; 0x4056 <realloc+0x130>
    4054:	3c 01       	movw	r6, r24
    4056:	7d 01       	movw	r14, r26
    4058:	12 96       	adiw	r26, 0x02	; 2
    405a:	0d 90       	ld	r0, X+
    405c:	bc 91       	ld	r27, X
    405e:	a0 2d       	mov	r26, r0
    4060:	b7 cf       	rjmp	.-146    	; 0x3fd0 <realloc+0xaa>
    4062:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <__brkval>
    4066:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <__brkval+0x1>
    406a:	88 16       	cp	r8, r24
    406c:	99 06       	cpc	r9, r25
    406e:	e1 f4       	brne	.+56     	; 0x40a8 <realloc+0x182>
    4070:	66 16       	cp	r6, r22
    4072:	77 06       	cpc	r7, r23
    4074:	c8 f4       	brcc	.+50     	; 0x40a8 <realloc+0x182>
    4076:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    407a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	41 f4       	brne	.+16     	; 0x4092 <realloc+0x16c>
    4082:	8d b7       	in	r24, 0x3d	; 61
    4084:	9e b7       	in	r25, 0x3e	; 62
    4086:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    408a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    408e:	84 1b       	sub	r24, r20
    4090:	95 0b       	sbc	r25, r21
    4092:	e8 17       	cp	r30, r24
    4094:	f9 07       	cpc	r31, r25
    4096:	b0 f4       	brcc	.+44     	; 0x40c4 <realloc+0x19e>
    4098:	f0 93 0b 07 	sts	0x070B, r31	; 0x80070b <__brkval+0x1>
    409c:	e0 93 0a 07 	sts	0x070A, r30	; 0x80070a <__brkval>
    40a0:	f9 01       	movw	r30, r18
    40a2:	71 83       	std	Z+1, r23	; 0x01
    40a4:	60 83       	st	Z, r22
    40a6:	0c c0       	rjmp	.+24     	; 0x40c0 <realloc+0x19a>
    40a8:	cb 01       	movw	r24, r22
    40aa:	1c de       	rcall	.-968    	; 0x3ce4 <malloc>
    40ac:	7c 01       	movw	r14, r24
    40ae:	00 97       	sbiw	r24, 0x00	; 0
    40b0:	49 f0       	breq	.+18     	; 0x40c4 <realloc+0x19e>
    40b2:	a8 01       	movw	r20, r16
    40b4:	be 01       	movw	r22, r28
    40b6:	24 d0       	rcall	.+72     	; 0x4100 <memcpy>
    40b8:	ce 01       	movw	r24, r28
    40ba:	ac de       	rcall	.-680    	; 0x3e14 <free>
    40bc:	c7 01       	movw	r24, r14
    40be:	04 c0       	rjmp	.+8      	; 0x40c8 <realloc+0x1a2>
    40c0:	ce 01       	movw	r24, r28
    40c2:	02 c0       	rjmp	.+4      	; 0x40c8 <realloc+0x1a2>
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	0f 91       	pop	r16
    40d0:	ff 90       	pop	r15
    40d2:	ef 90       	pop	r14
    40d4:	df 90       	pop	r13
    40d6:	cf 90       	pop	r12
    40d8:	bf 90       	pop	r11
    40da:	af 90       	pop	r10
    40dc:	9f 90       	pop	r9
    40de:	8f 90       	pop	r8
    40e0:	7f 90       	pop	r7
    40e2:	6f 90       	pop	r6
    40e4:	08 95       	ret

000040e6 <memcmp>:
    40e6:	fb 01       	movw	r30, r22
    40e8:	dc 01       	movw	r26, r24
    40ea:	04 c0       	rjmp	.+8      	; 0x40f4 <memcmp+0xe>
    40ec:	8d 91       	ld	r24, X+
    40ee:	01 90       	ld	r0, Z+
    40f0:	80 19       	sub	r24, r0
    40f2:	21 f4       	brne	.+8      	; 0x40fc <memcmp+0x16>
    40f4:	41 50       	subi	r20, 0x01	; 1
    40f6:	50 40       	sbci	r21, 0x00	; 0
    40f8:	c8 f7       	brcc	.-14     	; 0x40ec <memcmp+0x6>
    40fa:	88 1b       	sub	r24, r24
    40fc:	99 0b       	sbc	r25, r25
    40fe:	08 95       	ret

00004100 <memcpy>:
    4100:	fb 01       	movw	r30, r22
    4102:	dc 01       	movw	r26, r24
    4104:	02 c0       	rjmp	.+4      	; 0x410a <memcpy+0xa>
    4106:	01 90       	ld	r0, Z+
    4108:	0d 92       	st	X+, r0
    410a:	41 50       	subi	r20, 0x01	; 1
    410c:	50 40       	sbci	r21, 0x00	; 0
    410e:	d8 f7       	brcc	.-10     	; 0x4106 <memcpy+0x6>
    4110:	08 95       	ret

00004112 <strchr>:
    4112:	fc 01       	movw	r30, r24
    4114:	81 91       	ld	r24, Z+
    4116:	86 17       	cp	r24, r22
    4118:	21 f0       	breq	.+8      	; 0x4122 <strchr+0x10>
    411a:	88 23       	and	r24, r24
    411c:	d9 f7       	brne	.-10     	; 0x4114 <strchr+0x2>
    411e:	99 27       	eor	r25, r25
    4120:	08 95       	ret
    4122:	31 97       	sbiw	r30, 0x01	; 1
    4124:	cf 01       	movw	r24, r30
    4126:	08 95       	ret

00004128 <strcpy>:
    4128:	fb 01       	movw	r30, r22
    412a:	dc 01       	movw	r26, r24
    412c:	01 90       	ld	r0, Z+
    412e:	0d 92       	st	X+, r0
    4130:	00 20       	and	r0, r0
    4132:	e1 f7       	brne	.-8      	; 0x412c <strcpy+0x4>
    4134:	08 95       	ret

00004136 <strncpy>:
    4136:	fb 01       	movw	r30, r22
    4138:	dc 01       	movw	r26, r24
    413a:	41 50       	subi	r20, 0x01	; 1
    413c:	50 40       	sbci	r21, 0x00	; 0
    413e:	48 f0       	brcs	.+18     	; 0x4152 <strncpy+0x1c>
    4140:	01 90       	ld	r0, Z+
    4142:	0d 92       	st	X+, r0
    4144:	00 20       	and	r0, r0
    4146:	c9 f7       	brne	.-14     	; 0x413a <strncpy+0x4>
    4148:	01 c0       	rjmp	.+2      	; 0x414c <strncpy+0x16>
    414a:	1d 92       	st	X+, r1
    414c:	41 50       	subi	r20, 0x01	; 1
    414e:	50 40       	sbci	r21, 0x00	; 0
    4150:	e0 f7       	brcc	.-8      	; 0x414a <strncpy+0x14>
    4152:	08 95       	ret

00004154 <strstr>:
    4154:	fb 01       	movw	r30, r22
    4156:	51 91       	ld	r21, Z+
    4158:	55 23       	and	r21, r21
    415a:	a9 f0       	breq	.+42     	; 0x4186 <strstr+0x32>
    415c:	bf 01       	movw	r22, r30
    415e:	dc 01       	movw	r26, r24
    4160:	4d 91       	ld	r20, X+
    4162:	45 17       	cp	r20, r21
    4164:	41 11       	cpse	r20, r1
    4166:	e1 f7       	brne	.-8      	; 0x4160 <strstr+0xc>
    4168:	59 f4       	brne	.+22     	; 0x4180 <strstr+0x2c>
    416a:	cd 01       	movw	r24, r26
    416c:	01 90       	ld	r0, Z+
    416e:	00 20       	and	r0, r0
    4170:	49 f0       	breq	.+18     	; 0x4184 <strstr+0x30>
    4172:	4d 91       	ld	r20, X+
    4174:	40 15       	cp	r20, r0
    4176:	41 11       	cpse	r20, r1
    4178:	c9 f3       	breq	.-14     	; 0x416c <strstr+0x18>
    417a:	fb 01       	movw	r30, r22
    417c:	41 11       	cpse	r20, r1
    417e:	ef cf       	rjmp	.-34     	; 0x415e <strstr+0xa>
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	08 95       	ret

00004188 <ultoa>:
    4188:	25 32       	cpi	r18, 0x25	; 37
    418a:	31 05       	cpc	r19, r1
    418c:	18 f4       	brcc	.+6      	; 0x4194 <ultoa+0xc>
    418e:	22 30       	cpi	r18, 0x02	; 2
    4190:	08 f0       	brcs	.+2      	; 0x4194 <ultoa+0xc>
    4192:	04 c0       	rjmp	.+8      	; 0x419c <__ultoa_ncheck>
    4194:	fa 01       	movw	r30, r20
    4196:	10 82       	st	Z, r1
    4198:	ca 01       	movw	r24, r20
    419a:	08 95       	ret

0000419c <__ultoa_ncheck>:
    419c:	bb 27       	eor	r27, r27

0000419e <__ultoa_common>:
    419e:	fa 01       	movw	r30, r20
    41a0:	a6 2f       	mov	r26, r22
    41a2:	62 17       	cp	r22, r18
    41a4:	71 05       	cpc	r23, r1
    41a6:	81 05       	cpc	r24, r1
    41a8:	91 05       	cpc	r25, r1
    41aa:	33 0b       	sbc	r19, r19
    41ac:	30 fb       	bst	r19, 0
    41ae:	66 f0       	brts	.+24     	; 0x41c8 <__ultoa_common+0x2a>
    41b0:	aa 27       	eor	r26, r26
    41b2:	66 0f       	add	r22, r22
    41b4:	77 1f       	adc	r23, r23
    41b6:	88 1f       	adc	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	aa 1f       	adc	r26, r26
    41bc:	a2 17       	cp	r26, r18
    41be:	10 f0       	brcs	.+4      	; 0x41c4 <__ultoa_common+0x26>
    41c0:	a2 1b       	sub	r26, r18
    41c2:	63 95       	inc	r22
    41c4:	38 50       	subi	r19, 0x08	; 8
    41c6:	a9 f7       	brne	.-22     	; 0x41b2 <__ultoa_common+0x14>
    41c8:	a0 5d       	subi	r26, 0xD0	; 208
    41ca:	aa 33       	cpi	r26, 0x3A	; 58
    41cc:	08 f0       	brcs	.+2      	; 0x41d0 <__ultoa_common+0x32>
    41ce:	a9 5d       	subi	r26, 0xD9	; 217
    41d0:	a1 93       	st	Z+, r26
    41d2:	36 f7       	brtc	.-52     	; 0x41a0 <__ultoa_common+0x2>
    41d4:	b1 11       	cpse	r27, r1
    41d6:	b1 93       	st	Z+, r27
    41d8:	10 82       	st	Z, r1
    41da:	ca 01       	movw	r24, r20
    41dc:	00 c0       	rjmp	.+0      	; 0x41de <strrev>

000041de <strrev>:
    41de:	dc 01       	movw	r26, r24
    41e0:	fc 01       	movw	r30, r24
    41e2:	67 2f       	mov	r22, r23
    41e4:	71 91       	ld	r23, Z+
    41e6:	77 23       	and	r23, r23
    41e8:	e1 f7       	brne	.-8      	; 0x41e2 <strrev+0x4>
    41ea:	32 97       	sbiw	r30, 0x02	; 2
    41ec:	04 c0       	rjmp	.+8      	; 0x41f6 <strrev+0x18>
    41ee:	7c 91       	ld	r23, X
    41f0:	6d 93       	st	X+, r22
    41f2:	70 83       	st	Z, r23
    41f4:	62 91       	ld	r22, -Z
    41f6:	ae 17       	cp	r26, r30
    41f8:	bf 07       	cpc	r27, r31
    41fa:	c8 f3       	brcs	.-14     	; 0x41ee <strrev+0x10>
    41fc:	08 95       	ret

000041fe <_exit>:
    41fe:	f8 94       	cli

00004200 <__stop_program>:
    4200:	ff cf       	rjmp	.-2      	; 0x4200 <__stop_program>
